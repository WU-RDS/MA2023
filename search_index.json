[["index.html", "Marketing Analytics 2022 Welcome!", " Marketing Analytics 2022 Welcome!              Welcome to the course Marketing Analytics! This course covers the conceptual foundations of data analysis techniques for marketing managers and applications of these methods to different data sets. The course will be delivered in parts using the flipped classroom teaching method. This means that students are required to familiarize themselves with the contents by means of self-study before each session (i.e., by going through the assigned materials on their own). This website is intended to aid the self-study process by providing you with explanations regarding the relevant concepts and methods in text and video format along with code files and commented outputs that will show you how to implement these methods using the statistical software R. The self-learning process will be complemented with compulsory in-person weekly interactive sessions in the PC lab, which provide ample opportunities to train the acquired knowledge and clarify points that require further discussion. The following pages outline the course schedule and explain how to use this tutorial in detail. If you have any questions, feel free to send me a short email. Nils Wlömert nils.wloemert@wu.ac.at Daniel Winkler daniel.winkler@wu.ac.at "],["introduction.html", "Introduction Course structure Course materials", " Introduction Course structure This course combines asynchronous teaching elements (e.g., texts and pre-recorded videos on this website) with synchronous elements (e.g., weekly in-person interactive sessions in the PC Lab). The syllabus consists of three main parts, as reflected by the structure of this website: Lecture notes: the lecture part will explain the theory behind the concepts and methods and provide you with example applications using the statistical software R. Individual assignments: the individual assignments require you to apply the acquired knowledge to new data sets. Group project: in the group you will design and conduct your own market research project and transfer the knowledge to a real business setting. The general approach is that students will first familiarize themselves with the contents by going through the materials on their own. This self-study process is complemented with in-person weekly interactive sessions in the PC lab, which provide ample opportunities to ask questions and clarify points that require further discussion. The schedule for each of the three parts will be explained below. Schedule In-person lecture The contents on this website are divided into weekly readings. To be able to follow the curriculum and complete the assignments, you need to read the materials assigned for the respective week. The relevant chapters are indicated in the table below. The weekly readings will be complemented with weekly interactive sessions in the PC lab, which provide you with an opportunity to ask questions about the assigned readings. Please note that you need to go through the materials on your own in the week before the respective session. For example, chapters 2, 3 &amp; 4 will be discussed in the second session. The dates and times for the classroom sessions are indicated in the table below for each group separately. It is highly recommended to prepare questions or comments about the materials for these sessions that you think might be interesting and helpful to the class. As a preparation for the in-class discussions, you should go through the Learning check section at the end of each chapter. By working through these questions, you may self-assess your progress and identify knowledge gaps regarding the materials that were assigned for the previous week. Lecture dates - Group A Date Day Time Room Topics Chapters Oct. 3 Monday 01:00PM - 05:00PM TC.-1.61 Introduction to the course Basic concepts 1 Oct. 10 Monday 01:00PM - 05:00PM TC.-1.61 Introduction to R &amp; R Markdown 2, 3, 4 Oct. 17 Monday 01:00PM - 05:00PM TC.-1.61 Introduction to inferential statistics Hypothesis testing I 5, 6.1, 6.2, 6.3 Oct. 24 Monday 01:00PM - 04:00PM TC.5.03 Hypothesis testing II 6.4, 6.5, 6.6 Oct. 31 Monday 01:00PM - 05:00PM EA.6.026 Regression I 7.1, 7.2, 7.3 Nov. 7 Monday 01:00PM - 05:00PM TC.-1.61 Regression II 7.4, 7.5, 7.6 Nov. 14 Monday 01:00PM - 05:00PM TC.-1.61 Factor analysis Cluster analysis 8, 9 Note: Dates and times are indicated for group A. Lecture dates - Group B Date Day Time Room Topics Chapters Oct. 5 Wednesday 01:00PM - 05:00PM TC.-1.61 Introduction to the course Basic concepts 1 Oct. 12 Wednesday 12:00PM - 04:00PM TC.-1.61 Introduction to R &amp; R Markdown 2, 3, 4 Oct. 19 Wednesday 12:00PM - 04:00PM TC.-1.61 Introduction to inferential statistics Hypothesis testing I 5, 6.1, 6.2, 6.3 Oct. 28 Friday 01:00PM - 05:00PM TC.5.03 Hypothesis testing II 6.4, 6.5, 6.6 Nov. 2 Wednesday 12:00PM - 04:00PM EA.6.026 Regression I 7.1, 7.2, 7.3 Nov. 9 Wednesday 12:00PM - 04:00PM TC.-1.61 Regression II 7.4, 7.5, 7.6 Nov. 16 Wednesday 12:00PM - 04:00PM TC.-1.61 Factor analysis Cluster analysis 8, 9 Note: Dates and times are indicated for group B. We understand that the self-study format might pose challenges to the learning process because we cannot troubleshoot in person outside of the classroom sessions. Remember that it is very unlikely that you are the only student encountering a particular problem. So please make use of the forum on Learn@WU (see below) to interact with your peers or ask us questions so that everyone else will benefit from the answer (there are no stupid questions!). In case you cannot get answers to address a specific problem, we will be available during the in-person classroom sessions for coaching. Individual assignments There will be 4 individual assignments complemented with optional coaching sessions. Note that the assignments need to be submitted in the R Markdown format (see chapter 10) via Learn@wu. There will be a coaching session dedicated to the R Markdown reporting format in the second session, when the first homework is assigned. Your main point of contact for the individual assignments will be Daria Yudaeva (daria.yudaeva@wu.ac.at). You may contact Daria to schedule individual coaching sessions during the times indicated in the table below. These coaching sessions will be held online. However, please make sure that you have exhausted all other resources to solve a particular problem, such as the online tutorial, the forum on Learn@wu, and other web resources (see below) before you schedule a coaching session. If you feel that other students might have similar questions and would benefit from an answer to a particular question, you should post the question in the forum on Learn@wu. Assignment schedule - Group A Assignment Assigned Coaching Submission Assignment 1: R Basics Oct. 10 Oct. 14, 09:00AM-01:00PM (online)* Oct. 16, 11:59PM Assignment 2: Hypothesis testing Oct. 17 Oct. 28, 09:00AM-01:00PM (online)* Oct. 30, 11:59PM Assignment 3: Regression Oct. 31 Nov. 11, 09:00AM-01:00PM (online)* Nov. 13, 11:59PM Assignment 4: Factor and cluster analysis Nov. 14 Nov. 25, 09:00AM-01:00PM (online)* Nov. 27, 11:59PM Note: Dates and times are indicated for group A. Dates indicated with ’*’ are optional time slots for individual online video coaching sessions with Daria. If you need to schedule a meeting, please contact Daria at least one day in advance (daria.yudaeva@wu.ac.at). Assignment schedule - Group B Assignment Assigned Coaching Submission Assignment 1: R Basics Oct. 12 Oct. 14, 02:00PM-06:00PM (online)* Oct. 18, 11:59PM Assignment 2: Hypothesis testing Oct. 19 Oct. 31, 12:00PM-04:00PM (online)* Nov. 01, 11:59PM Assignment 3: Regression Nov. 2 Nov. 11, 02:00PM-06:00PM (online)* Nov. 15, 11:59PM Assignment 4: Factor and cluster analysis Nov. 16 Nov. 25, 02:00PM-06:00PM (online)* Nov. 29, 11:59PM Note: Dates and times are indicated for group B. Dates indicated with ’*’ are optional time slots for individual online video coaching sessions with Daria. If you need to schedule a meeting, please contact Daria at least one day in advance (daria.yudaeva@wu.ac.at). Group project The marketing research group project consists of multiple consecutive steps: the design of a questionnaire data collection using an online survey data handling &amp; data analysis recording of a video with a presentation of you results We will offer coaching sessions throughout this process, providing feedback and allowing you to ask questions. The submission dates and the dates and times for the coaching sessions are summarized in the table below. Your main point of contact for the group project will be Daniel Winkler (daniel.winkler@wu.ac.at). You may contact Daniel at least one week in advance to schedule individual coaching sessions for your groups (in-person or online) during the following times: Thursdays 09:00AM - 05:00PM Fridays 01:00PM - 05:00PM Again, please make sure that you have exhausted all other resources to solve a particular problem, such as the online tutorial, the forum on Learn@wu, and other web resources (see below) before you schedule a coaching session. If you feel that other students might have similar questions and would benefit from an answer to a particular question, you should post the question in the forum on Learn@wu. Group project schedule - Group A Component Date Room Intro to Questionnaire design Nov. 21, 01:00PM - 05:00PM TC.-1.61 Questionnaire coaching* Nov. 28, 12:30PM - 04:30PM TC.-1.61 Data analysis coaching* Dec. 12, 01:00PM - 05:00PM D4.0.022 (Pre-recorded) presentation submission Jan. 6, 11:59PM — Note: Dates and times are indicated for group A. Sessions indicated with ’*’ are group coaching sessions. Slots of 30 min. are assigned to each group within the indicated times. Group project schedule - Group B Component Date Room Intro to Questionnaire design Nov. 23, 12:00PM - 04:00PM TC.-1.61 Questionnaire coaching* Nov. 30, 12:00PM - 04:00PM TC.-1.61 Data analysis coaching* Dec. 14, 02:00PM - 06:00PM EA.6.032 (Pre-recorded) presentation submission Jan. 6, 11:59PM — Note: Dates and times are indicated for group B. Sessions indicated with ’*’ are group coaching sessions. Slots of 30 min. are assigned to each group within the indicated times. Grading Grading is based on the following components: Market research group project (questionnaire design, data collection &amp; analysis, reporting &amp; presentations) [weight: 30%] Individual take-home computer exercises (statistical analysis of data sets; 4 assignments accounting for 6% (A1), 8% (A2), 8% (A3), and 8% (A4)) [weight: 30%] Final online exam (concepts &amp; methods) [weight: 30%] Class participation (quantity &amp; quality of contributions during the weekly Q&amp;A sessions, contributions in the online forum, etc.) [weight: 10%] These grading components will be weighted with the respective weights to arrive at the final grade percentage. The final exam will take place online at 10:00AM on December 22, 2022. The exam covers questions about the concepts and methods (no coding) and we will provide example exams from the previous years to give you an idea about what type of questions you can expect. To ensure an equal contribution of group members for the group assignment, a peer assessment will be conducted among group members, which enters into the computation of the individual grades for the project. This means that the members of a group are required to assess other students regarding their relative contribution. To successfully pass this course, your weighted final grade needs to exceed 60%. Course materials Main reference The main reference for this course is this website along with the corresponding slides and the pre-recorded video lectures. The relevant materials for each week are indicated in the tables above. The aim of the materials is to condense the contents and direct your attention to the most relevant aspects. This should enable students to study the materials on their own and we can focus our attention during the classroom sessions on clarifying points that require further discussion. At the end of each chapter, you will find a section with references. It is highly recommended that you consult these references for further clarification in case you require additional information on a topic. Further readings           In addition to these lecture notes, there are many excellent books available (many of them for free) that focus on different aspects of R. In fact, there are so many free resources available by now that a team of R programmers has set up a website that provides an overview over the available resources by topic. You can find this overview here: Big Book of R. In case you would like to learn more about the capabilities of R related to the contents of this course, I can particularly recommend the following books: “R for Data Science” An excellent book by Hadley Wickham, which introduces you to R as a tool for doing data science, focusing on a consistent set of packages known as the tidyverse. [FREE online version] “An Introduction to Statistical Learning” This book provides an introduction to statistical learning methods and covers basic methods (e.g., linear regression) as well as more advanced methods (e.g., Support Vector Machines). [FREE online version] “R for Marketing Research and Analytics” A great book that is designed to teach R to marketing practitioners and data scientists. “Statistical Inference via Data Science” Another great book covering topics around Statistical Inference. [FREE online version] “Text Mining with R” This book explains how you can analyze unstructured data (texts) using R. [FREE online version] “Advanced R” Another great book written by Hadley Wickham. Explains more advanced R concepts. [FREE online version] “Hands-On Machine Learning with R” A great reference to learn about machine learning methods in R. The book favors a hands-on approach, growing an intuitive understanding of machine learning through concrete examples and little bit of theory.[FREE online version] “Hands-On Data Science for Marketing” Another good reference regarding Data Science for Marketing. [FREE Code exercises] “R Markdown” A great book about the reporting format ‘R Markdown’, which we will also use for the assignments in this course. [FREE Code exercises] “R Packages” A book which teaches you how to make the most of R’s fantastic package system. [FREE online version] “R Graphics Cookbook” A practical guide that provides more than 150 recipes to help you generate high-quality graphs quickly. [FREE online version] “Using R For Introductory Econometrics” This book covers a nice introduction to R with a focus on the implementation of standard tools and methods used in econometrics. [FREE online version] “Data Science in a Box” Another book covering topics around Data Science using R. [FREE online version] “Efficient R Programming” A good reference to learn efficient workflows using R. [FREE online version] “Discovering Statistics Using R” (Field, A., Miles, J., &amp; Field Zoe, 2012, 1st Edtn.) This textbook offers an accessible and comprehensive introduction to statistics. Discussion forum We strongly encourage you to ask your questions via the online forum on the course page on the WU learning platform. The purpose of the forum is to allow you to discuss questions related to the contents with your class mates and us. Please make use of this forum as much as possible and ask questions if something remained unclear. Remember that there are no stupid questions! And if you know the answer to a question that is asked in the forum, it is also a good exercise to explain the concepts to your classmates. DataCamp Please also make use of the abundance of web resources. For students who would like to further train the materials covered in class, we recommend DataCamp, an online platform that offers interactive courses in data science at different levels. To facilitate the learning process you will obtain full access to the entire DataCamp course curriculum for the duration of the course. You will receive and invitation via your WU student email address. Other web-resources “https://www.r-project.org/” official website “http://www.statmethods.net/” R reference by the author of “R in action” “http://www.rdocumentation.org/” R documentation aggregator “http://stackoverflow.com/” general discussion forum for programmers incl. R “http://stats.stackexchange.com/” discussion forum on statistics and data analytics “http://www.r-bloggers.com/” R blog aggregator “http://www.cookbook-r.com/” useful examples for all kind of R problems “https://ggplot2.tidyverse.org/reference/index.html” reference for data visualization Contact We are happy to answer your questions, so feel free to send us a short email - either to Daniel Winkler (daniel.winkler@wu.ac.at), Daria Yudaeva (daria.yudaeva@wu.ac.at), or myself (nils.wloemert@wu.ac.at). We will be available during the weekly sessions to clarify your questions. Daniel will be your point of contact for questions regarding the group project and Daria will be your point of contact for the individual assignments. However, please note that before you contact us, you should try to solve problems on your own first (e.g., by using the online tutorial, doing research online, asking questions via the online forum, or discussion with your class mates). Acknowledgements This tutorial is supported through Digital Learning Project Funding by WU Vienna. None of the materials covered in this tutorial are new. We intend to provide a summary of existing methods from a marketing research perspective and cite the corresponding sources. If you should have any comments or suggestions, please contact us through the github page of this course. "],["preliminaries.html", "1 Preliminaries 1.1 Marketing foundations (recap) 1.2 The research process Learning check References", " 1 Preliminaries This chapter provides an overview of the parameters you need to consider when planning a marketing research study. It is crucial to carefully consider these parameters before conducting your research because empirical studies can be costly and you need to make sure that you will be able to interpret the results from your research in the desired way. For example, in many cases marketing research is about measuring the effectiveness of a firm’s marketing activities. However, quantifying the return on marketing expenditures is not a trivial task. As the nineteenth century Philadelphia retailer John Wanamaker supposedly said “Half the money I spend on advertising is wasted; the trouble is I don’t know which half.” — John Wanamaker This quote underlines the high level of uncertainty marketing managers face regarding the effective allocation of marketing budgets. Because marketing budgets are allocated across different channels (TV, out-of-home, online, …) it is challenging to attribute market responses, such as an increase in sales, to one specific channel. Although in digital environments it became generally easier to measure responses to advertising (e.g., by tracing views or clicks of banner ads), other issues remain. For example, the exposure to online ads may be a function of a consumer’s browsing behavior (e.g., through targeting), which may reflect other (unobservable) user characteristics that have nothing to do with the advertising. If these characteristics are not properly controlled for, it is easy to overestimate advertising effects (i.e., advertising would appear more effective than it actually is). This chapter discusses ways to avoid such potential pitfalls through the careful planning of your research. In particular, in this chapter you will learn: Why marketing research is important What type of research design is appropriate in which situation The difference between correlation and causality Which scales of measurement to use in which situation The difference between validity and reliability 1.1 Marketing foundations (recap) You will surely have come across various definitions of the term Marketing during your studies. For example, the popular textbook by Kotler &amp; Armstrong (2009) defines Marketing as: “The process by which companies create value for customers and build strong customer relationships in order to capture value from customers in return.” — Kotler &amp; Armstrong (2009) The corresponding marketing process can be depicted by as follows: Figure 1.1: The marketing process Kotler &amp; Armstrong (2009) As the figure above shows, the goal of marketing is to capture value from customers in order to create profits and customer equity. However, in order to achieve this goal, a company needs to first build profitable relationships by creating customer value through an integrated marketing program. As you will likely also recall, a firm’s set of controllable tactical marketing tools can be described in terms of the ‘four Ps’ taxonomy, which is also referred to as the Marketing Mix, consisting of: Product (design, quality, branding, technology, services, etc.) Price (list price, discounts, payment period, payment methods, etc.) Place (trade channels, locations, logistics, e-commerce, etc.) Promotion (advertising, sales promotion, public relations, etc.) The firm blends these marketing tools to produce the desired response in the target market. As can be seen from the marketing process, the first step towards capturing customer value is to understand the marketplace and customer needs. Thus, gaining an understanding of the target customers through marketing research enables firms to design their marketing mix in accordance with the consumers needs and wants, which in turn will then lead to positive outcomes on the customer side (e.g., trust, loyalty, satisfaction, engagement) and on the firm side (e.g., revenue, sales, profit, stock prices). As such, marketing research can be seen as the foundation of the marketing process. 1.2 The research process Now that it is clear why marketing research is important, let’s have a closer look at the underlying process. The flow chart below shows a general depiction of the research process, which will be discussed subsequently. Figure 1.2: The research process (based on Field et al. 2012) 1.2.1 Research question and hypothesis The first step in the research process is to identify a management problem and to derive a research question from it. As a motivating example, imagine that you are a marketing manager at a firm and you are running online advertising campaigns to promote your products. In order to reach your target group more effectively, you make use of targeting criteria based on user profiles, which are available at an additional cost. The head of your department wonders if the extra expenditures associated with the targeting of the advertising campaigns are justified or if the advertising would be similarly effective without the targeting. As depicted in the stylized flow chart above, the research process often starts with the identification of a management problem; something that needs explaining. In our example, this would be the extra expenditures associated with the targeting of online advertising campaigns. This leads to your research question: Is advertising with behavioral targeting more effective compared to advertising without targeting? Based on this research question, you should, if possible, collect some existing data and look for initial evidence. If you have used behavioral targeting in the past, you may want to compare the performance of campaign that used targeting to campaigns that didn’t. Following this initial data screening, you should try to come up with a theory that could explain the effects of targeting. A theory can be thought of as a hypothesized general principle or set of principles that explains known findings about a topic and from which new hypotheses can be generated. In our example, we could build on a rich body of literature on tailoring communications that consistently indicates that tailoring improves communications’ performance (e.g., Lambrecht &amp; Tucker 2013, Lewis et al. 2011). Following this theory, you should formulate a prediction regarding the direction of the expected effects. This hypothesis can be thought of as a prediction from a theory, i.e., in our example: targeting online ads increases, on average, the probability of purchasing from our store. In a next step, you should identify the variables you need to consider in order to test your hypothesis. Particularly, you should clarify what your dependent variable and independent variables are. The dependent variable is the outcome variable referring to the proposed effect. If we would, for example, conduct an experiment to test our hypothesis regarding targeting of online advertising, the dependent variable would be a relevant response variable we are interested in (e.g., the number of sales). The independent variable, in contrast, is the proposed cause (a predictor variable). In our experiment, this would be the variable we manipulate, i.e., the type of advertising (targeted vs. non-targeted). 1.2.2 Choosing a research design Once you have sufficient clarity on your research hypothesis, you should specify the research design. Research designs can be classified according to different criteria, including the data source, the method of analysis, and by the research objective (Malhotra 2010). Figure 1.3: Research designs (based on Malhotra 2010) 1.2.2.1 By data source A first classification of research designs is by the data source, i.e., whether the research is based on primary data or secondary data. Primary data has the main advantage that it is collected by the researcher for the specific purpose of addressing the research problem at hand. In contrast, with secondary data, the data has been collected for some purpose other than the problem at hand and was published in the form of books, articles, and databases by governments, business sources, or market research firms. Although it may be less costly to obtain, secondary data has the disadvantage that not all details are know about the processing of the data and often the data won’t fit the research question you are trying to answer. Hence, in many cases research questions are so specific to a particular management problem that you will need to collect primary data to answer it. 1.2.2.2 By method of analysis Another high level distinction between methods of data analysis is the distinction between qualitative research and quantitative research. The differences between these two types of analysis are summarized in the table below. One of the core distinctions is that while the aim of qualitative research is to explore underlying reasons and motivations based on a small, non-representative samples, the aim of quantitative research is to generalize the results from a large, representative sample to the population of interest using statistical techniques. Thus, qualitative research is often used as a first step in the research process to gain an understanding of the research problem which is then followed by quantitative research. This is why qualitative research is also referred to as exploratory research, in line with its objective. In this course, we will not cover qualitative research methods and will focus our attention on quantitative research methods. Figure 1.4: Qualitative vs. quantitative research (based on Malhotra 2010) 1.2.2.3 By research objective One of the most important aspects you need to reflect on when choosing an appropriate research design is the nature of the research objective. That is, whether the objective you would like to achieve with your quantitative research can be classified as descriptive, predictive, or causal inference. The following table shows examples of research questions that fall in each of these categories. Description Prediction Causal Inference Example of scientific questions How can the customers of our online store be partitioned in classes defined by their characteristics? What is the probability that users who visited our online store last year will purchase from our store within the next month? Will behavioral targeting in online advertising increase, on average, the probability of purchasing from our store within the next month? Data Features: user characteristics (age, gender, location, …), product characteristics of visited pages, …; Output: making a purchases within the next month Inputs: age, gender, frequency of past purchases, recency of last purchases, monetary value of past purchases, past ad exposures, … Outcome: making a purchases within the next month Treatment: initiation of targeting campaign Confounders: for non-experimental settings (interest in product category, eligibility criteria used for targeting …) Example of analytics Cluster Anaylsis … RegressionDecision treesRandom forestsSupport vector machinesNeural networks … Experiments with random assignment Regression Instrumental variables Regression discontinuity Difference-in-differences … Note: Based on the classification of data science tasks by Hernán et al. (2019) 1.2.2.3.1 Descriptive research Descriptive research is aimed at capturing the structure of your data and representing it in a compact manner. Descriptive modeling differs from explanatory (prescriptive) modeling because an underlying causal theory is either absent or incorporated in a less formal way. This means that there is less emphasize on the theory and hypothesis building part of the research process in descriptive research. Descriptive modeling further differs from predictive modeling because it is not aimed at prediction. Having said that, fitting a regression model could be descriptive if it is used for capturing the association between the dependent and independent variables rather than for causal inference or for prediction. An example of descriptive research is the grouping a firm’s customers according to observable customer characteristics (i.e., features) using cluster analysis. This type of analysis represents the original data in a compact manner by capturing the underlying data structure using clusters. Another example would be the reduction of the dimensionality of a data set using principal component analysis. Similar to cluster analysis, this type of model captures the underlying structure of the data by grouping highly correlated input variables into so-called ‘factors’. This type of analysis can be useful, e.g., if predictors in a regression model are highly correlated as we will see later. It should be noted that the computational capacity of many firms has increased drastically over the past years due to a substantial decline of the costs associated with computational power and data storage. These developments have made it feasible for many firms to analyze very large data sets (‘big data’) with the aim of deriving managerial insights. With the rising relevance of large data sets, descriptive research has received increasing attention. The reason is that identifying patters in such vast amounts of data requires structure and often, an initial exploratory, descriptive investigation of large data sets enables the researcher to discover patterns, which then give rise to predictive or causal inference modeling tasks. This is especially true for unstructured data (social media texts, voice data) which can be analyzed using machine learning methods. 1.2.2.3.2 Predictive research Predictive research uses statistical modeling techniques with the aim of predicting new or future observations based on a training data set. That is, the goal is to predict the output value (Y) for new observations given their input values (X). Back in our motivating example, a predictive modeling task would be to predict whether a customer of our web shop will make a purchase within the next month, given a set of input variables. Different from causal inference, the focus of predictive models is on the prediction of future observations. For example, in a regression model the amount of explained variance (\\(R^2\\)) would be a relevant statistic to inspect after fitting a model. It is important to note that in predictive models, the focus in much less on causality, i.e., explaining the effect of a specific input variable (X) on the outcome (Y). This is the job of causal inference. As a consequence, theory often does not play a major role in predictive research. What matters in predictive models is that the model produces reasonable predictions of the outcome of interest (Y). One major concern in such models is overfitting. Overfitting means that a model is so highly tuned to the particularities of one specific data set that it produces very good predictions within this sample, but it doesn’t generalize to other data sets. To assess the predictive ability of a model outside the sample, it is therefore useful split the data set into a training data set and a test data set. The training data set is used to calibrate the model and the test data set (or ‘hold-out data set’) is used for validation, i.e., to assess how well the model predicts values for observations that were not used to calibrate the model. Over the past years, machine learning methods (e.g., random forests, support vector machines, neural networks) have particularly advanced the field of predictive modeling. Hence, these methods are often used in predictive modeling tasks as the table shows. 1.2.2.3.3 Causal inference (aka ‘prescriptive’ research) In many scientific fields, and especially the social sciences, the focus is almost exclusively on research that tests causal hypotheses. To stay within our motivating example, we could be interested in investigating the effect of targeting of online advertising on the effectiveness of a firm’s online marketing efforts. Notice the different focus compared to predictive modeling: in the predictive modeling example, we use observations from the past to predict the probability that a given customer will purchase in the future. In the causal inference task, we are interested in causal effect, such as ‘(By how much) Can we increase the probability that a customer will make a purchase using targeted online advertising?’ Or in other words, what should managers do differently in order to increase the purchase probability? To answer this type of question, a set of theoretically derived constructs are measured by variables X and these variables are assumed to cause an underlying effect, measured by variable Y. Since the focus here is on explaining causal effects, this type of research is also often referred to as explanatory modeling. Another alternative term you may come across is ‘prescriptive modeling’, empasizing that the goal is to make recommendations to managers or policy makers regarding the course of action. For these type of questions, theory has a much more important role compared to predictive and descriptive research. Hence, the focus when it comes to the model output is more on the coefficients associated with the explanatory variables, rather than on the predictive ability of the model. If you are interested in more details, the article ‘To Explain or to Predict?’ by Shmueli (2010) has a nice discussion regarding the difference between explanatory and predictive models. While managers and marketing researchers care most about causal research questions, finding answers to these type of questions is challenging for various reasons. Consider our targeting example. In order to estimate the effect of targeting on sales, we could, for example, compare the conversion rates between two groups of users: 1) users exposed to the targeted advertising campaign, and 2) users who were not exposed to the same targeted advertising campaign. The problem with this type of comparison is that the targeting algorithm uses unobserved variables to decide which users to show the ad. Thus, the exposed and unexposed users may be different in outcomes for reasons that have nothing to do with the advertising. If we advertise products from a particular category, it might simply mean that the users targeted with our advertising might have a stronger preference for this category and might have purchased from our store even without seeing the ad. With regard to the underlying model, the ‘interest in the product category’ can be seen as an unobserved confounder, as the following figure shows. Note that if this omitted variable is not properly controlled for, we will overestimate the advertising effect (see also Lewis et al. 2011). Figure 1.5: Unobserved confounders In other words, the correlations observed between the dependent measure and advertising are often due to unobserved variables, leading to so-called ‘spurious correlations’, i.e., a connection between two variables that appears causal but is not. There are plenty of examples for spurious correlations and you can see one of them in the figure below. Figure 1.6: Spurious correlation Although it appears from the graphic that there is an association between the Internet Explorer market share and the number of murders in the U.S., it wouldn’t really make sense to assume that one of them causes the other. The main difference between correlation and causality is that with correlation we observe changes in an input variable (X) and a change in the outcome (Y), whereas causality means that we change the input variable (X) and observe the resulting changes in the outcome variable (Y). For a causal relationship, three conditions have to be met (Field et al. 2012): Concomitant variation: A cause, X, and an effect, Y, should vary together in the way predicted by the hypothesis under consideration. Time order of occurrence: The causing event must occur before the effect; it cannot occur afterwards. Absence of other possible causal factors: The factor or variable being investigated should be the only possible causal explanation. However, with explanatory models, the existence of a spurious correlation is often less obvious and we will explore different methods of data collection to avoid such pitfalls in the next section. Another important aspect regarding the research design is to create a sampling plan. This means that we need to decide on which units (e.g., survey participants) we will include in our sample. This aspect will be discussed in chapter 5. 1.2.3 Collecting data Once you have decided on the research design, the next step is to choose 1) the methods of data collection and 2) how to measure the variables of interest, which will be discussed in this section. 1.2.3.1 Methods of data collection There are some standard ways of collecting data and two of them will be discussed here: 1) experimental research and 2) observational research. 1.2.3.1.1 Experimental research In the last section, we saw that causal research questions are the ones that matter most to marketing managers. In our example, the question we asked was ‘(By how much) Can we increase the probability that a customer will make a purchase within the next month using targeted online advertising?’. In this section, we will see that experiments are a proper way of establishing a causal relationship. Or, as the famous quote by Box, Hunter, and Hunter (1978) puts is: “To find out what happens when you change something, it is necessary to change it.” — Box, Hunter, and Hunter 1978 The counterfactual - what would have happened without the intervention? When answering these type of causal questions, we would ideally observe the world in two different states simultaneously. In our example, we would ideally observe the same customers at the same time in two states: 1) with targeted online advertising, and 2) without online advertising. Generally, if a customer is exposed to an ad, we would like to know how this customer would have behaved without seeing the ad. This is often referred to as the counterfactual. However since we can only observe the same customer in one state at a given time, we need to find other ways to get as close as possible to this ideal counterfactual. As already indicated above, experiments are a proper way of establishing a causal relationship. The procedure of conducting experiments is usually as follows: Divide test units into homogeneous subsamples Manipulate independent variables and measure dependent variable Random assignment of test units to experimental groups to control for extraneous (potentially confounding) variables Randomization helps to reduce unsystematic variation To see why this is the preferred method of data collection when the focus is on causal effects, it is useful to acknowledge that there are two types of variation in the data: Systematic variation: Differences in the dependent variable (in our example: sales) created by a specific experimental manipulation (in our example, targeted advertising) Unsystematic variation: Differences in the dependent variable created by unknown factors (age, gender, IQ, time of day, measurement error etc.) In order to measure a causal effect, our goal is to minimize the unsystematic variation while maximizing the systematic variation and the goal of randomization is to minimizes unsystematic variation. That is why running experiments is typically superior to other methods of controlling unobserved variables. Or, as Angrist and Pischke (2009) put it: “The most credible and influential research designs use random assignment.” — Angrist and Pischke 2009 Between-subsjects and within-subjects designs In the example above, different customers are assigned to the different groups and one group sees the targeted ads (test group) while the other doesn’t (control group). By assigning the customers randomly to the test and control groups, we can be fairly certain that the groups are comparable in terms of unobserved factors (assuming a large enough sample size). For example, the groups should be similar in terms of their preferences for certain product categories. Assigning different units (in our case: customers) to the test and control conditions in an experiment is also referred to as a between-subjects design as visually depicted by the following figure: Figure 1.7: Between-subjects design The counterpart of the between-subject design is the within-subject design. Using a within-subject design we would manipulate the independent variable and the same units (in our case: customers) would be exposed to both conditions. In our example, the same customers would first see no advertising and the response (purchase probability) would be recorded. Then the same customers would be exposed to the targeted add and the response would be recorded again as depicted by the figure below. Because we record multiple responses per unit, this design is also referred to as a repeated-measures designs. In some settings, this type of design my be beneficial because it helps us to reduce unsystematic variation due to the fact that different units (customers) are assigned to each group (although they have been assigned randomly to the groups, they will still be slightly different). When we compare the same units (customers) in the two conditions there is less of such unsystematic variation because we know that the units we compare are the same. However, often it is difficult to expose the same units to two experimental condition and to ensure that exposing a unit to the first condition has no effect on the measurement of the second condition (crossover effects). Figure 1.8: Within-subjects design With regard to the specification of the test and control conditions there are different options, as the following figure shows. Measures the effect of a targeted advertising on the entire customer base and compares the purchase probability vs. the historical average Disadvantage: cannot rule out alternative explanations Measures the effect of a targeted advertising on a subset of the customer base (as compared to a group with no advertising) Advantage: controls for alternative explanations using random assignment Disadvantage: can only test one version of advertising (e.g., does not include a strict control group with standard advertising) Measure the effect of multiple actions on different test groups (e.g., include a group with standard (non-targeted) ads) Advantages: controls for alternative explanations using random assignment &amp; allows to test multiple advertising strategies Disadvantage: fewer observations per test group Note that the variables we manipulate are also referred to as factors and a particular combination of factor levels is called treatment in an experimental design. In our case, we only have one factor with three levels (i.e., factor: advertising with levels i. targeted advertising, ii. standard advertising, iii. no advertising). If we would have also systematically varied prices with two levels (i.e., high and low), the variable price would be the second factor and the experimental design would be a 3 x 2 factorial design with three levels of advertising and two levels of price that can be combined in (\\(3*2= 6\\)) possible combinations. Conducting field experiments There are different types of settings for experiments. One option is to run the experiments in a lab (lab experiment), which offers a high degree of control over potentially confounding factors. However, often it is beneficial/more realistic to test marketing strategies in a real business setting using a field experiment. A visual depiction of a typical A/B test, where arriving visitors of a website are randomly assigned to one of three groups in a field experiment is shown in the figure below. Figure 1.9: Stylized depiction of A/B testing process Especially for online firms it is very typical to run a large number of field experiments per day in order to optimize their services according to a specified target (e.g., number of conversions). The figure below summarizes some important issues to consider when running field experiments. Figure 1.10: Guidelines for field experiments Decide on unit of randomization: In the first step, you should decide on the unit of randomization. In our example, the unit of randomization was on the customer level, which ensures a high granularity. This means that each customer is assigned to one of the groups and the resulting analysis could be conducted on the user level (i.e., each user represents one line in our data set). The larger the data set, the more statistical power we have to estimate the effects as we will see later. An alternative would be, for example, to assign the membership to the test and control groups according to the postcode. This would mean a lower granularity because customers with the same postcode would be grouped together. Since this would mean one postcode per line in the data set, the statistical power decreases. At the same time this could also increase the unsystematic variation (systematic error) because there might be systematic (unobserved) differences between postcodes (e.g., with respect to income). Ensure no spillover and crossover effects: When spillover effects are likely, you should consider randomizing at a lower granularity. For example, if you conduct a price experiment and your customers would exchange information that would reveal the different price points and thus, potentially jeopardize the experiment (e.g., if a person in the low price condition would order for a person in the high price condition). Randomization at the postcode level would, for example, ensure that all customers within the same area are assigned to the same condition (i.e., either low or high price). As another example, in an experiment with Uber drivers about tipping behavior, Chandar et al. (2019) randomize at the city level (low granularity) to avoid that the drivers would obtain information about the experiment when talking to their colleagues. In addition, to avoid crossover effects, you should ensure that a customer gets exposed to only one condition to avoid that the exposure to multiple treatments will jeopardize the outcome of the experiment. In an online setting you could, for example, use cookies to ensure that a website visitor will see the same version of the website - even for multiple visits. Decide on complete or stratified randomization: Stratified sampling might help to ensure that the units in each group are comparable across crucial dimensions. For example, if you expect a strong impact of household income and our dependent variable and there are systematic differences regarding this variable (e.g., by postcode), you first divide the individuals into subgroups (stratas) and then sample the units equally from these subgroups (e.g., equal number of treated and control units from one postcode). Although randomly assigning units should also ensure an approximately equal distribution of income groups, using stratified randomization it is less likely that the group composition will systematically differ by chance. 1.2.3.1.2 Observational research In contrast to experimental research, in observational research the researcher observes what happens naturally, without interfering. In the previous section we saw that experiments are a proper way of establishing causal relationships. The question then is the following: when the most interesting research questions are causal questions and experiments are the ‘gold standard’ to infer causal effects, why are researchers often confronted with observational data? As the statistician Andrew Gelman (2010) puts it: “Given the manifest virtues of experiments, why do I almost always analyze observational data? The short answer is almost all data out there are observational.” — Gelman (2010) What’s your identification strategy? The answer to this question is related to the fact that in many situations, experiments are not feasible, not appropriate, or simply too costly to conduct. Going back to the ‘four Ps’ taxonomy from the beginning of this chapter, experimentation is increasingly used to inform advertising decisions where many platforms such as the Google Ad Manager offer easy-to-use solutions for the implementation of A/B testing. However, as Goldfarb &amp; Tucker (2014) note, it is far more difficult for practitioners and researchers to run field experiments to inform channel and product development decisions because such experiments would be too time-consuming or often require a level of measurement of long-term implications that is difficult to attain. In addition, field experiments with varying prices are often challenging to conduct because customers may find them unfair. In these situations, experiments are difficult to conduct. Observational data, in contrast, are often fairly easy to obtain. Many firms, for example, keep records about prices and sales of products over time. With this retrospective observational data it is possible to calculate price elasticity, i.e., the relative change in sales due to a relative change in price. The problem with this type of data is, however, that the price setting behavior of managers may be driven by unobserved factors that could bias the estimates. As an example, consider an ice cream seller who sets her prices according to the weather - if the weather is good, she increases prices and if the weather is bad, she decreases prices. As you can image, the sales pattern reveals that, despite the higher prices, she sells more ice cream on warmer than on colder days. If you would attempt to estimate the price elasticity without controlling for weather, the analysis would suggest a positive relationship between price and sales, i.e., the higher the prices, the more ice cream she will sell. It is easy to see that the weather is an unobserved factor in the analysis that confounds the effect of price on sales. Similar issues can often be observed when estimating advertising effects in settings where managers set advertising budgets according to unobserved factors. This, among other things, is the reason why it is generally more challenging to estimate causal effects from observational data. In cases like this, researchers need to carefully consider their identification strategy, i.e., the procedure of estimating causal effects from observational data. As Angrist and Pischke (2009) put it: “Underlying this is the recognition, description, and presentation of the identification strategy, or the manner in which a researcher uses observational data (i.e., data not generated by a randomized trial) to approximate a real experiment” — Angrist and Pischke (2009), p. 7 There are different approaches available to identify causal effects with observational data. Angrist and Pischke (2009, p. 7) describe the five most common approaches as the “Furious Five methods of causal inference,” and they refer to 1) random assignment, 2) regression, 3) instrumental variables, 4) regression discontinuity, and 5) differences in differences. Varian (2016) provides a concise overview over these identification strategies. While we won’t cover all of the approaches here, we will discuss quasi-experiments and their analysis using difference-in-differences analysis in more detail because of their high practical relevance. Analyzing quasi-experiments As Goldfarb &amp; Tucker (2014) note: “Quasi-experimental tools mimic the random assignment that is inherent in lab experiments and that is often referred to as the `gold standard’ for identifying causal relationships.” — Goldfarb &amp; Tucker (2014), p. 7 Different from an experiment with random assignment of test units, in quasi-experiments the intervention occurs naturally and the units self-select into the test and control conditions without an intervention of the researcher. As an example, assume that you are interested in estimating the effect of music streaming services (e.g., Spotify) on consumers expenditures for music products in other channels (e.g., paid downloads, CDs). This is an example of a typical multi-channel distribution problem in marketing. Wlömert &amp; Papies (2016) study a panel of music consumers by tracking their music expenditures over time. The intervention occurred when a popular streaming service (i.e., Spotify) entered the market. In this study, the research had no control over who would start using the streaming service and the surveyed consumers self-selected into the test and control conditions. A data set like this where you observe multiple units (here: music consumers) over time time is called a panel data set and it has two variance components: 1) the variance across consumers at each given point in time is referred to as the cross-sectional variance, and 2) the variance for each consumer over time is the longitudinal variance. Hence, a research design that focuses on one point in time is also referred to as a cross-sectional design and a research design where the same units are observed at multiple points in time is referred to as a longitudinal design as shown in the figure below. Figure 1.11: Cross-sectional vs. longitudinal design The main advantage of a longitudinal design is that it allows researcher to observe changes over time, which is particularly helpful for the identification of causal effects. Although the observational units self-select into the test and control conditions, it is often possible to account for unobserved individual-level differences by focusing on the change over time. A method that lends itself very well for this purpose is the difference-in-differences (DiD) estimator. Continuing with the example from above, imagine we would have only conducted one cross-sectional study at T2 (after the streaming service had been introduced to the market). As can be seen from the figure below, Spotify users spend, on average, more money on music products from other channels (CDs &amp; downloads). However, you cannot conclude from this observation that Spotify causes them to spend more money on music from other channels. Rather, in the absence of random assignment, the users self-selected into the test and control conditions and it is likely that music enthusiasts (i.e., consumers with a high interest in music) started using the streaming service. The unobserved factor in this case is the ‘interest in music products’. Figure 1.12: Example of DID study design (Wlömert &amp; Papies 2016) The DiD estimator exploits the longitudinal dimension of the data and focuses on the change over time. This is shown in the following figure: Figure 1.13: Difference-In-Differences Estimation In this stylized example, we observe both groups the test group and the control group at two points in time - before the intervention (pre) and after the intervention (post). If the intervention has no effect on the outcome variable, the difference between the groups should be the same before and after (assuming, of course, that no other intervention occurred that might have induced a change in one of the groups). In the figure above, the blue dotted line represents our expectation regarding the outcome variable for the test group after the intervention and the green solid line represents the observations for the control group. We can see that the actually observed outcome (purple line) for the test group is larger then expected based on the difference before the intervention. This difference (denoted as \\(\\Delta\\)) is the difference-in-differences estimate and in this example, the intervention had a positive effect on the outcome. It can be derived as follows (see Varian 2016): \\(Yt,pre\\): outcome before intervention for treated groups \\(Yt,post\\): outcome after intervention for treated groups \\(Yc,pre\\): outcome before intervention for control groups \\(Yc,post\\): outcome after intervention for control groups As mentioned above, the counterfactual is based on the assumption that the (unobserved) change in the outcome by the treated would be the same as the (observed) change in purchases by the control group. To get the impact of the intervention, we then compare the predicted counterfactual outcome to the actual outcome base on the following table: Period Treatment Control Counterfactual Before Yt,pre Yc,pre Yt,pre After Yt,post Yc,post Yt,pre + (Yc,post - Yc,pre) Hence, the effect of the treatment on the treated is \\((Yt,post - Yt,pre) − (Yc,post - Yc,pre)\\). Going back to our music example above, the effect of the treatment on the treated can be computed as follows: \\((7.90 - 10.40) - (4.60 - 4.60) = -2.50\\). This means that the introduction of Spotify reduces the expenditures in other channels by 2.50EUR per user per month on average. There are other approaches that researchers may use to mimic random assignment using data from quasi-experiments, which we won’t discuss in detail. For example, matching procedures may be used to make the control and test groups comparable across a set of observable characteristics. In their study of the music market, Datta et al. (2017), for example, investigate whether the adoption of streaming services leads users to diversify their tastes. Similar to the example above, consumers self-selected into the conditions of Spotify users and non-users. Through statistical matching procedures they identified ‘statistical twins’, i.e., for each Spotify user they identified one person from the group of non-users who is as comparable as possible to the respective user across the set of observable characteristics. The goal is to make the two groups as comparable as possible except for the fact that users in one group adopted the music services and the users in the other group didn’t. Although causal models for observational data are often challenging to implement, there are some packages that make it easier for researchers to apply fairly complex models using just a few lines of code. One such example is the Causal Impact Package which has been developed by Google. We will cover regression models later, but if you are interested you could already have a look at the package description to see what it can do. The corresponding video summarizes the underlying intuition nicely. 1.2.3.2 Measurement and scaling After deciding on the method of data collection, you need to clarify how you will measure the specified variables. 1.2.3.2.1 Levels of measurement The first distinction you need to consider pertains to the level of measurement. This step is important because the level of measurement determines what type of analysis you will be able to apply once the data has been collected. Thus, you should make sure that your plan for the data analysis is aligned with the levels of measurement of the dependent and independent variables. There are different characteristics that a scale can have: Description: Unique labels or descriptors that are used to designate each value of the scale. Order: Relative sizes or positions of the descriptors. Described “greater than”, “less than”, and “equal to”. Distance: Absolute differences between the scale descriptors are known and may be expressed in units. Origin: Scale has a unique or fixed beginning or true zero point. These characteristics determine a variable’s level of measurement as we will see next. Categorical (non-metric) variables There are two types of categorical scales: nominal scales and ordinal scales. Nominal scales only exhibit the most basic of the characteristics above, namely description. Thus, the values we observe on a nominal scale only serve as labels for identification and categorization. If the scale values are numbers, these numbers do not reflect the amount of the characteristic possessed by the objects. As an example, consider the starting number of boats in a boat race as the picture below shows. Figure 1.14: Example: nominal scale (starting numbers) Note that for a scale with two categories, a nominal variable is also called a binary variable. The only permissible mathematical operation with nominal scales is counting. For example, you may count how many participants you have from different occupations. Besides description, ordinal scales also exhibit the characteristic of order. That is, the numbers indicate the relative position of objects. As an example, consider the order that boats cross the finish line in a boat race. Figure 1.15: Example: ordinal scale (finishing order) Besides counting, you can also order objects. However, note that while the order of objects is known, the scale does not reveal the magnitude of difference between objects. For ordinal variables, all statistics that are based on ranking the data are permissible, such as computing the median, percentiles, ranges, and minimum/maximum values. For example, if you have a 7-point Likert-scale ranging from “fully agree” to “fully disagree” you may compute the median response across objects. Continuous (metric) variables There are two types of continuous scales: interval scales and ratio scales. Besides description and order, interval scales also possess the characteristic of distance. Hence, with interval scales, the differences between objects can be compared. As an example, an expert jury might rate the design of the boats on a scale from 0 to 10. Figure 1.16: Example: interval scale (design rating 1-10) For interval scales - as the name suggests - the intervals at different levels of the scale need to be the equal. For example, the difference between, say 8 and 9 is the same as the difference between, say 3 and 4. However, the zero point for interval scales is arbitrary. In our example, the jury might have also judged the boats on a scale from 10 to 20 and the result would have been the same. Also then, the difference between, say 18 and 19 would be the same as the difference between, say 13 and 14 (1 scale point). Note, however, that it is not meaningful to take ratios of scale values. Because the zero point is arbitrary it is not meaningful, for example, to say that the second boat (rating: 8.4) is twice as good as the third boat (rating: 4.2). If you would change the scale to the range between, say 10 and 20, the ratio wouldn’t be preserved (i.e., \\(8.4/4.2 \\neq 18.4/14.2\\)) but the difference in scale points would be the same (4.2 points). Because the distance between the objects is know, we may compute statistics such as mean and standard deviation with interval level data. Lastly, ratio scales possess all properties of nominal, ordinal and interval scales. What’s more, ratio scales have an absolute zero point. As an example, consider the time it takes a boat in a race to cross the finish line as shown below. Figure 1.17: Example: ratio scale (time to finish) In this case ratios are a meaningful way fo comparing objects. For example, the first boat (7.1 sec.) is twice as fast as the second boat (14.2 sec.). A good way to check whether a variable in measure on a ratio scale is to think about the interpretation of the zero point. With ratio scales, the zero points indicates the absence of something (time in our example). All statistical techniques can be applied to ratio data. The following table summarizes which statistics may be applied to which scale type. Don’t worry if not all of it makes sense now. We will revisit this table in chapter 4 when we will go through the different statistics. Figure 1.18: Permissible statistics for different levels of measurement As already mentioned, a good understanding of scale types is important to decide which method to apply to test your hypothesis given the data at hand. There are many different flow charts like the one below that can be used as a guide to decide which method to select based on the scale types. Figure 1.19: Flow chart for test selection (McElreath 2015) There are also many web resources that are useful to determine what type of test is appropriate given the scale type of the dependent and independent variables. For example, check out this website by UCLA which not only shows which type of test is appropriate but also has R code available for each of these tests. For survey-based research, there are many different scale types to choose from. Below you can find a summary of some of the most common scaling techniques. For details regarding these scaling techniques, please refer to chapter 10, which is dedicated to the topic of questionnaire design. Figure 1.20: Scaling techniques 1.2.3.2.2 Measurement accuracy Once you have decided on which scale types to use, you should ensure that your measures accurately represent the variable you intended to measure. More precisely, the two goals of measurement are validity (truthfulness; i.e., our measure captures the variable we intended to measure), and reliability (consistency; i.e., the measure consistently measures the same variable). However, it is important to acknowledge that a measurement is not the true value of the characteristic of interest but rather an observation of it. Hence, the difference between the information sought by the researcher and the information generated by the measurement process is the measurement error. There are two types of measurement errors: 1) random error, leading to an overall less precise measurement of the variable of interest, and 2) systematic error, causing the observed value to consistently deviate from the variable of interest. Thus, the observed measurement of a variable \\(X\\) can be expressed in terms of the deviation from the true value with respect to the random and systematic measurement errors as follows: \\(X_O = X_T + X_S + X_R\\), where \\(X_O\\) = Observed value of a variable X \\(X_T\\) = True value of the variable X \\(X_S\\) = Systematic error in measuring X \\(X_R\\) = Random error in measuring X Hence, the relationship between the two types of errors and our goals of reliability and validity can be expressed as follows. Reliability (= consistency) Reliability refers to the extent to which a scale produces consistent results in repeated measurements. This implies the absence of random error: \\(X_R \\rightarrow 0\\). However, this does not necessarily imply the absence of systematic error. Thus, \\(X_0 = X_T + X_S | \\rightarrow X_R = 0\\). In the lower left corner of the figure below, you can find an example for a measurement with a high reliability that consistently misses the true value of the variable (i.e., low validity). As an example, consider you wish to measure the intelligence of a person using the head circumference. While the head circumference should produce consistent results in repeated measurements, it is probably not a good proxy for intelligence (low validity). This shows that perfect while perfect reliability requires the absence of random error, it doesn’t require the absence of systematic error. Validity (= truthfulness) Validity refer to the extent to which differences in observed scale scores reflect true differences among objects on the characteristic being measured. Hence, perfect validity requires the absence of both type of errors. Thus, \\(X_0 = X_T | \\rightarrow X_S = 0, X_R = 0\\). The figure below visualizes the to goals of reliability and validity as a function of the two types of measurement error. Figure 1.21: Validity vs. reliability Single vs. multi-item scales Related to the concept of measurement accuracy are some choices that the researcher can make to increase the reliability and validity of the measures. The first choice is between single and multi-item scales to measure a construct. A construct is a specific type of concept that exists at a higher level of abstraction than everyday concepts. The construct is unobservable (‘latent’) but can be inferred from other measurable variables (‘items’) that together comprise a scale (latent construct). A multi-item scale consists of multiple items, where an item is a single question or statement to be evaluated. The following figure depicts and example of a multi-item scales to measure the construct ‘satisfaction’. Figure 1.22: Multi-item scales Instead of using three different items, we could have also simply used one general item to measure satisfaction.The decision whether to use one or more items depends on the complexity of the construct and usually the rule of thumb is to use as few items as necessary given the complexity of a construct. Given that the empirical evidence regarding the use of single-item vs. multi-item scales is mixed (Bergkvist &amp; Rossiter 2007, Bergvist 2015, Kamakura 2015), the decision should be made on a case-by-case basis, taking the advantages and disadvantages of both approaches into account (see table below). Figure 1.23: Formative vs. reflective measurement As another example, consider the two versions for measuring a person’s statistical ability below. The first version uses a single item scale while the second uses a multi-item scale. Note that the last item of the multi-item scale is reverse-coded, meaning that while all other statements are worded positively, this item is worded negatively. This is often done as a reliability check to prevent that, for example, respondents become inattentive and always provide answers in the same response category. If the reverse-coded item shows a low correlation with the remaining items, this signals a low reliability of the scale. Figure 1.24: Single vs. multi-item scale Formative vs. reflective scales Another decision related to the concept of measurement accuracy is the choice between formative and reflective measurement. As can be see from the following example, the construct “degree of drunkenness” can be measured in two different ways. While a formative measurement uses items that cause the construct, the reflective measurement uses items that reflect the construct. One advantage of formative measurement is that managers are often interested to know which specific aspects cause a change in the underlying latent construct so that they can address these aspects. However, this approach also has a downside. Imagine in the example below that a person got drunk by drinking wine. Because our measure doesn’t include this specific item, it would have a low validity. This example shows that using formative measures it is important that you consider all possible aspects that might possibly cause the construct of interest. Because this is often difficult to ensure, reflective measurements tend to be more popular. Here, the goal is to have a set of highly correlated items and even if we would remove one of them, we would still end up with a fairly accurate measurement of the construct. Reflective measurements have the additional advantage that it is possible to test their reliability using statistical tests, as we will see later. Figure 1.25: Formative vs. reflective measurement After discussing all the steps in the research process up to the data collection, the subsequent sections will be concerned with data analysis. Learning check (LC1.1) Indicate the level of measurement of the following variables: Occupation of survey participants - nominal Willingness-to-pay for a product - ratio Your grade in the marketing research course (1, 2, 3, 4, 5) - ordinal Rank order of most important product attributes - ordinal Student registration number - nominal Gender of survey participants - nominal Consumer preferences measured on a 5-point Likert scale - ordinal; interval if you would argue that the difference between the scalepoints is the same Mileage (kilometers per liter) a car gets - ratio Age of survey participants - ratio Temperature in °C - interval Number of products sold - ratio (LC1.2) Which of the answers is correct? A nominal scale … …has an absolute zero point …possesses all properties of an ordinal scale …can have numerical values …serves as a label to classify/categorize objects None of the above (LC1.3) Which of these statements regarding formative constructs are true? Indicators (items) measure the cause for the change of the not directly observable construct Indicators (items) measure the effect of the change in a not directly observable construct The indicators (items) of the scale should be highly correlated Multi-item measurement is particularly important for the increase in the reliability of the measurement None of the above (LC1.4) In causal inference tasks, … …the main concern is to generate predictions of future outcomes …the main concern is to maximize the explained variance …observational research is the ‘gold standard’ …randomization minimizes unsystematic variation None of the above (LC1.5) True or false? Reliability refers to the consistency of a measurement. True False (LC1.6) Using a between-subjects design, we … … manipulate the independent variable (treatment) using different persons for each group … manipulate independent variable using the same participants for each group … manipulate the dependent variable (treatment) using different persons for each group … manipulate dependent variable using the same participants for each group None of the above (LC1.7) When conducting field experiments, the term crossover effect means … … that an individual who was supposed to be assigned to one treatment is accidentally exposed to another treatment … that a treated individual affects the outcomes for other untreated individuals … that individuals can be part of both the test and the control condition None of the above (LC1.8) Conditions for causality are … … a cause and an effect should vary together in the way predicted by the hypothesis under consideration … random assignment of test units … the causing event must occur before the effect … absence of other possible causal factors None of the above (LC1.9) The effect of the treatment on the treated in DID models can be written as … \\((Yt,pre - Yt,post) − (Yc,post - Yc,pre)\\) \\((Yt,post - Yt,pre) − (Yc,post - Yc,pre)\\) \\((Yt,pre - Yt,post) − (Yc,pre - Yc,post)\\) \\((Yt,post - Yt,pre) − (Yc,pre - Yc,post)\\) None of the above (LC1.10) In predictive modeling tasks … … once major concern are unobserved confounders … one major concern is overfitting … we primarily care about the predictive ability of the model … we primarily care about causal effects None of the above (LC1.11) True or false? For ordinal scales, the magnitude of difference between scale points is known True False References Angrist J.D. &amp; Pischke, J.S. (2009) Mostly Harmless Econometrics (Princeton Univ Press,Princeton). Bergkvist, L., &amp; J.R. Rossiter (2007), “The Predictive Validity of Multiple-Item Versus Single-Item Measures of the Same Constructs,” Journal of Marketing Research. Bergvist, L. (2015): Appropriate Use of Single-Item Measures is Here to Stay, Marketing Letters, 26(3). Box, Hunter, &amp; Hunter (1978). Statistics for experimenters, John Wiley &amp; Sons, Inc. Chandar, B., Gneezy, U., List, J.A., Muir, I. (2019). The Drivers of Social Preferences: Evidence from a Nationwide Tipping Field Experiment, Working Paper. Datta et al. (2017). Changing Their Tune: How Consumers’ Adoption of Online Streaming Affects Music Consumption and Discovery, Marketing Science, 37(1), 1-175. Field, A., Miles J., &amp; Field, Z. (2012). Discovering Statistics Using R. Sage Publications. Gelman (2010). Experimental Reasoning in Social Science in Field Experiments and their Critics. Yale University Press. Goldfarb, A. &amp; Tucker, C. E. (2014). Conducting Research with Quasi-Experiments: A Guide for Marketers. Working Paper. Kamakura, W. (2015): Measure twice and cut once: the carpenter’s rule still applies , Marketing Letters, 26(3). Kotler, P. &amp; Armstrong, G. (2009). Principles of Marketing (13th ed.), Prentice Hall. Lambrecht, A., &amp; Tucker, C. E. (2018). Field experiments. In: Hanssens, D M &amp; Mizik, N. (eds.), Handbook of Marketing Analytics, Edward Elgar, 32-51. Lambrecht, A. &amp; Tucker, C. E. (2013). When Does Retargeting Work? Information Specificity in Online Advertising, Journal of Markering Research 50(5), 561–576. Lewis, Randall A., Justin M. Rao, and David H. Reiley (2011). Here, There, Everywhere: Correlated Online Behaviors Can Lead to Overestimates of the Effects of Advertising,” in Proceedings of the International Conference on World Wide Web. New York: Association for Computing Machinery, 156–66. Malhotra, N. K.(2010). Marketing Research: An Applied Orientation (6th. ed.). Prentice Hall. Miguel A. Hernán, John Hsu &amp; Brian Healy (2019). A Second Chance to Get Causal Inference Right: A Classification of Data Science Tasks, CHANCE, 32:1, 42-49. Pearl, J. (2009). Causal inference in statistics: An overview. Statistics Surveys, 3, 96–146. Pearl, J. (2018). The Book of Why: The New Science of Cause and Effect, Basic Books. Shmueli, G. (2010). To Explain or to Predict?, Statistical Science, 25(3), 289-310. Varian, H.R. (2016). Causal inference in economics and marketing, Proceedings of the National Academy of Sciences, 113(27), 7310-7315. Wlömert N, Papies D (2016) On-demand streaming services and music industry revenues - Insights from Spotify’s market entry. Internat. J. Res. Marketing 33(2):314-327. "],["getting-started-with-r.html", "2 Getting started with R 2.1 How to download and install R and RStudio 2.2 The R Studio interface 2.3 Functions 2.4 Packages 2.5 A typical R session 2.6 Getting help", " 2 Getting started with R In this course, we will work with the statistical software package R. Please make sure R is already installed on your computer before the tutorials start. The Comprehensive R Archive Network (CRAN) contains compiled versions of the program that are ready to use free of charge: Download R [FREE download] RStudio provides a graphical user interface (GUI) that makes working with R easier. You can also download RStudio for free: Download R Studio (Windows, Linux, OSX, …). The R Studio software is built on top of R, which means that you can use R without R Studio, but you cannot use R Studio without R. The reason why we will use R Studio is that it provides a nicer user interface compared to the standard R interface. There are several advantages of R over other statistical software packages: It`s free A lot of free training material Runs on a variety of platforms (Windows, Linux, OSX, …) Contains statistical routines not yet available in other programs. Active global community (e.g., https://www.r-bloggers.com/). Many specialized user-written packages. It has its own journal (e.g., http://journal.r-project.org). Highly integrated and interfaces to other programs. It is becoming increasingly popular among practitioners. It is a valuable skill to have on the job market. It is not as complicated as you might think. R is powerful. … 2.1 How to download and install R and RStudio The following video gives you an overview of how to download and install the R and R Studio software. 2.2 The R Studio interface The following video gives you an introduction to the R Studio interface. 2.3 Functions You can download the corresponding R-Code here When analyzing data in R, you will access most of the functionalities by calling functions. A function is a piece of code written to carry out a specified task (e.g., the lm()-function to run a linear regression). It may or may not accept arguments or parameters and it may or may not return one or more values. Functions are generally called like this: function_name(arg1 = val1, arg2 = val2, ...) To give you an example, let’s use the built-in seq()-function to generate a sequence of numbers. RStudio has some nice features that help you when writing code. For example, when you type “se” and hit TAB, a pop-up shows you possible completions. The more letters you type in, the more precise the suggestions will become and you will notice that after typing in the third letter, a pop-up with possible completions will appear automatically and you can select the desired function using the ↑/↓ arrows and hitting ENTER. The pop-up even reminds you of the arguments that a function takes. If you require more details, you may either press the F1 key or type in ?seq and you will find the details for the function in the help tab in the lower right pane. When you have selected the desired function from the pop-up, RStudio will automatically add matching opening and closing parentheses (i.e., go from seq to seq()). Within the parentheses you may now type in the arguments that the function takes. Let’s use seq() to generate a sequence of numbers from 1 to 10. To do this, you may include the argument names (i.e., from =, to =), or just the desired values in the correct order. An important thing to note is that R is case-sensitive, meaning that Seq() and seq() are viewed as two different functions by R. # &lt;- this is a comment and is ignored by the R-interpreter seq(from = 1, to = 10) #creates sequence from 1 to 10 ## [1] 1 2 3 4 5 6 7 8 9 10 seq(1,10) #same result ## [1] 1 2 3 4 5 6 7 8 9 10 Note that if you specify the argument names, you may enter them in any order. However, if do not include the argument names you must adhere to the order that is specified for the respective function. seq(to = 10,from = 1) #produces desired results ## [1] 1 2 3 4 5 6 7 8 9 10 seq(10,1) #produces reversed sequence ## [1] 10 9 8 7 6 5 4 3 2 1 2.4 Packages Most of the R functionalities are contained in distinct modules called packages. When R is installed, a small set of packages is also installed. For example, the Base R package contains the basic functions which let R function as a language: arithmetic, input/output, basic programming support, etc.. However, a large number of packages exist that contain specialized functions that will help you to achieve specific tasks. To access the functions outside the scope of the pre-installed packages, you have to install the package first using the install.packages()-function. For example, to install the tidyverse package to manipulate data and create graphics, type in install.packages(\"tidyverse\"). Note that you only have to install a package once. After you have installed a package, you may load it to access its functionalities using the library()-function. E.g., to load the tidyverse-package, type in library(tidyverse). # Only run for the first time: # install.packages(&quot;tidyverse&quot;) # Run to load package: library(&quot;tidyverse&quot;) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ── ## ✔ ggplot2 3.4.0 ✔ purrr 0.3.5 ## ✔ tibble 3.1.8 ✔ dplyr 1.0.10 ## ✔ tidyr 1.2.1 ✔ stringr 1.5.0 ## ✔ readr 2.1.3 ✔ forcats 0.5.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() # Now we can use functionality provided by &quot;tidyverse&quot; # We will see in the coming lectures how the following code works: ggplot(economics, aes(x = date, y = pop)) + geom_line() The number of R packages is rapidly increasing and there are many specialized packages to perform different types of analytics.   2.5 A typical R session Open RStudio. Make sure that your working directory is set correctly. The working directory is the location where R will look for files you would like to load and where any files you write to disk will be saved. If you open an existing R script from a specific folder, this folder will, by default, be the working directory. You can check your working directory by using the getwd()-function. In case you wish to change your working directory, you can use the setwd()-function and specify the desired location (i.e., setwd(path_to_project_folder)). Notice that you have to use / instead of \\ to specify the path (i.e., Windows paths copied from the explorer will not work before you change the backward slashes with forward slashes). Alternatively, you can set the working directory with R-Studio by clicking on the “Sessions” tab and selecting “Set Working Directory”. Load your data that you wish to analyze (using procedures that we will cover later) Perform statistical analysis on your data (using methods that we will cover later) Save your workspace. The R workspace is your current working environment incl. any user-defined objects (e.g., data frames, functions). You can save an image of the current workspace to a file called ”.RData”. In fact, RStudio will ask you automatically if you would like to save the workspace when you close the program at the end of the session. In addition, you may save an image of the workspace at any time during the session using the save.image()-function. This saves the workspace image to the current working directory. When you re-open R from that working directory, the workspace will be loaded, and all these things will be available to you again. You may also save the image to any other location by specifying the path to the folder explicitly (i.e., save.image(path_to_project_folder)). If you open R from a different location, you may load the workspace manually using the load(\"\")-function which points to the image file in the respective directory (e.g., load(\"path_to_project_folder/.RData\"). Although it is quite common, saving your workspace is not always required. Especially when you save your work in an R script file (which is highly recommended), you will be able to restore your latest results by simply executing the code contained therein again. This also prevents you from carrying over potential mistakes from one session to the next. 2.6 Getting help Source: Allison Horst Errors &amp; warnings: because R is interactive, consider errors your friends! Most importantly: the more time you spend using R, the more comfortable you become with it and it will be easier to see its advantages Built-in R tutorial: type in “help.start()” to get to the official R tutorial Questions regarding specific functions: type in “?function_name” to get to the help page of specific functions (e.g., “?lm” gives you help on the lm() function) Video tutorials: Make use of one of the many video tutorials on YouTube (e.g., http://www.r-bloggers.com/learn-r-from-the-ground-up/) R Cheatsheets: Cheat sheets make it easy to learn about and use some popular packages (https://www.rstudio.com/resources/cheatsheets/). They can also be accessed from within RStudio under the “help” menu "],["data-handling.html", "3 Data handling 3.1 Basic data handling 3.2 Data import and export Learning check", " 3 Data handling This chapter covers the basics of data handling in R. 3.1 Basic data handling You can download the corresponding R-Code here 3.1.1 Creating objects Anything created in R is an object. You can assign values to objects using the assignment operator &lt;-: x &lt;- &quot;hello world&quot; #assigns the words &quot;hello world&quot; to the object x #this is a comment Note that comments may be included in the code after a #. The text after # is not evaluated when the code is run; they can be written directly after the code or in a separate line. To see the value of an object, simply type its name into the console and hit enter: x #print the value of x to the console ## [1] &quot;hello world&quot; You can also explicitly tell R to print the value of an object: print(x) #print the value of x to the console ## [1] &quot;hello world&quot; Note that because we assign characters in this case (as opposed to e.g., numeric values), we need to wrap the words in quotation marks, which must always come in pairs. Although RStudio automatically adds a pair of quotation marks (i.e., opening and closing marks) when you enter the opening marks it could be that you end up with a mismatch by accident (e.g., x &lt;- \"hello). In this case, R will show you the continuation character “+”. The same could happen if you did not execute the full command by accident. The “+” means that R is expecting more input. If this happens, either add the missing pair, or press ESCAPE to abort the expression and try again. To change the value of an object, you can simply overwrite the previous value. For example, you could also assign a numeric value to “x” to perform some basic operations: x &lt;- 2 #assigns the value of 2 to the object x print(x) ## [1] 2 x == 2 #checks whether the value of x is equal to 2 ## [1] TRUE x != 3 #checks whether the value of x is NOT equal to 3 ## [1] TRUE x &lt; 3 #checks whether the value of x is less than 3 ## [1] TRUE x &gt; 3 #checks whether the value of x is greater than 3 ## [1] FALSE Note that the name of the object is completely arbitrary. We could also define a second object “y”, assign it a different value and use it to perform some basic mathematical operations: y &lt;- 5 #assigns the value of 2 to the object x x == y #checks whether the value of x to the value of y ## [1] FALSE x*y #multiplication of x and y ## [1] 10 x + y #adds the values of x and y together ## [1] 7 y^2 + 3*x #adds the value of y squared and 3x the value of x together ## [1] 31 Object names Please note that object names must start with a letter and can only contain letters, numbers, as well as the ., and _ separators. It is important to give your objects descriptive names and to be as consistent as possible with the naming structure. In this tutorial we will be using lower case words separated by underscores (e.g., object_name). There are other naming conventions, such as using a . as a separator (e.g., object.name), or using upper case letters (objectName). It doesn’t really matter which one you choose, as long as you are consistent. 3.1.2 Data types The most important types of data are: Data type Description Numeric Approximations of the real numbers, \\(\\normalsize\\mathbb{R}\\) (e.g., mileage a car gets: 23.6, 20.9, etc.) Integer Whole numbers, \\(\\normalsize\\mathbb{Z}\\) (e.g., number of sales: 7, 0, 120, 63, etc.) Character Text data (strings, e.g., product names) Factor Categorical data for classification (e.g., product groups) Logical TRUE, FALSE Date Date variables (e.g., sales dates: 21-06-2015, 06-21-15, 21-Jun-2015, etc.) Variables can be converted from one type to another using the appropriate functions (e.g., as.numeric(),as.integer(),as.character(), as.factor(),as.logical(), as.Date()). For example, we could convert the object y to character as follows: y &lt;- as.character(y) print(y) ## [1] &quot;5&quot; Notice how the value is in quotation marks since it is now of type character. Entering a vector of data into R can be done with the c(x1,x2,..,x_n) (“concatenate”) command. In order to be able to use our vector (or any other variable) later on we want to assign it a name using the assignment operator &lt;-. You can choose names arbitrarily (but the first character of a name cannot be a number). Just make sure they are descriptive and unique. Assigning the same name to two variables (e.g. vectors) will result in deletion of the first. Instead of converting a variable we can also create a new one and use an existing one as input. In this case we omit the as. and simply use the name of the type (e.g. factor()). There is a subtle difference between the two: When converting a variable, with e.g. as.factor(), we can only pass the variable we want to convert without additional arguments and R determines the factor levels by the existing unique values in the variable or just returns the variable itself if it is a factor already. When we specifically create a variable (just factor(), matrix(), etc.), we can and should set the options of this type explicitly. For a factor variable these could be the labels and levels, for a matrix the number of rows and columns and so on. #Numeric: top10_track_streams &lt;- c(163608, 126687, 120480, 110022, 108630, 95639, 94690, 89011, 87869, 85599) #Character: top10_artist_names &lt;- c(&quot;Axwell /\\\\ Ingrosso&quot;, &quot;Imagine Dragons&quot;, &quot;J. Balvin&quot;, &quot;Robin Schulz&quot;, &quot;Jonas Blue&quot;, &quot;David Guetta&quot;, &quot;French Montana&quot;, &quot;Calvin Harris&quot;, &quot;Liam Payne&quot;, &quot;Lauv&quot;) # Characters have to be put in &quot;&quot; #Factor variable with two categories: top10_track_explicit &lt;- c(0,0,0,0,0,0,1,1,0,0) top10_track_explicit &lt;- factor(top10_track_explicit, levels = 0:1, labels = c(&quot;not explicit&quot;, &quot;explicit&quot;)) #Factor variable with more than two categories: top10_artist_genre &lt;- c(&quot;Dance&quot;,&quot;Alternative&quot;,&quot;Latino&quot;,&quot;Dance&quot;,&quot;Dance&quot;,&quot;Dance&quot;,&quot;Hip-Hop/Rap&quot;,&quot;Dance&quot;,&quot;Pop&quot;,&quot;Pop&quot;) top10_artist_genre &lt;- as.factor(top10_artist_genre) #Date: top_10_track_release_date &lt;- as.Date(c(&quot;2017-05-24&quot;, &quot;2017-06-23&quot;, &quot;2017-07-03&quot;, &quot;2017-06-30&quot;, &quot;2017-05-05&quot;, &quot;2017-06-09&quot;, &quot;2017-07-14&quot;, &quot;2017-06-16&quot;, &quot;2017-05-18&quot;, &quot;2017-05-19&quot;)) #Logical top10_track_explicit_1 &lt;- c(FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE) In order to “return” a vector we can now simply enter its name: top10_track_streams ## [1] 163608 126687 120480 110022 108630 95639 94690 89011 87869 85599 top_10_track_release_date ## [1] &quot;2017-05-24&quot; &quot;2017-06-23&quot; &quot;2017-07-03&quot; &quot;2017-06-30&quot; &quot;2017-05-05&quot; ## [6] &quot;2017-06-09&quot; &quot;2017-07-14&quot; &quot;2017-06-16&quot; &quot;2017-05-18&quot; &quot;2017-05-19&quot; In order to check the type of a variable the class() function is used. class(top_10_track_release_date) ## [1] &quot;Date&quot; 3.1.3 Data structures Now let’s create a table that contains the variables in columns and each observation in a row (like in SPSS or Excel). There are different data structures in R (e.g., Matrix, Vector, List, Array). In this course, we will mainly use data frames. Data frames are similar to matrices but are more flexible in the sense that they may contain different data types (e.g., numeric, character, etc.), where all values of vectors and matrices have to be of the same type (e.g. character). It is often more convenient to use characters instead of numbers (e.g. when indicating a persons sex: “F”, “M” instead of 1 for female , 2 for male). Thus we would like to combine both numeric and character values while retaining the respective desired features. This is where “data frames” come into play. Data frames can have different types of data in each column. For example, we can combine the vectors created above in one data frame using data.frame(). This creates a separate column for each vector, which is usually what we want (similar to SPSS or Excel). music_data &lt;- data.frame(top10_track_streams, top10_artist_names, top10_track_explicit, top10_artist_genre, top_10_track_release_date, top10_track_explicit_1) 3.1.3.1 Accessing data in data frames When entering the name of a data frame, R returns the entire data frame: music_data # Returns the entire data frame Hint: You may also use the View()-function to view the data in a table format (like in SPSS or Excel), i.e. enter the command View(data). Note that you can achieve the same by clicking on the small table icon next to the data frame in the “Environment”-window on the right in RStudio. Sometimes it is convenient to return only specific values instead of the entire data frame. There are a variety of ways to identify the elements of a data frame. One easy way is to explicitly state, which rows and columns you wish to view. The general form of the command is data.frame[rows,columns]. By leaving one of the arguments of data.frame[rows,columns] blank (e.g., data.frame[rows,]) we tell R that we want to access either all rows or columns, respectively. Note that a:b (where a and b are numbers and a &lt; b) is short hand notation for seq(from = a, to = b, by = 1). Here are some examples: music_data[ , 2:4] # all rows and columns 2,3,4 music_data[5:7, ] # rows 5,6,7 and all columns Typically we don’t want to remember which row or column number is needed but use names and conditions (e.g, all explicit tracks). In order to make that easier we will add more functions to R by installing a package (sometimes also referred to as “library”) called tidyverse. We only have to install it once (per computer) and subsequently we can add the functions the package provides by calling library(tidyverse). Typically library(PACKAGENAME) has to be called again whenever you restart R/RStudio. If you see the error message could not find function ... make sure you have loaded all the required packages. The tidyverse provides us with convenient tools to manipulate data. You may create subsets of the data frame, e.g., using mathematical expressions using the filter function: library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ── ## ✔ ggplot2 3.4.0 ✔ purrr 0.3.5 ## ✔ tibble 3.1.8 ✔ dplyr 1.0.10 ## ✔ tidyr 1.2.1 ✔ stringr 1.5.0 ## ✔ readr 2.1.3 ✔ forcats 0.5.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() filter(music_data, top10_track_explicit == &quot;explicit&quot;) # show only tracks with explicit lyrics filter(music_data, top10_track_streams &gt; 100000) # show only tracks with more than 100,000 streams filter(music_data, top10_artist_names == &#39;Robin Schulz&#39;) # returns all observations from artist &quot;Robin Schulz&quot; explicit_tracks &lt;- filter(music_data, top10_track_explicit == &quot;explicit&quot;) # assign a new data.frame for explicit tracs only You may also change the order of the rows in a data.frame by using the arrange()-function #Arrange by genre (ascending: A - Z) and streams (descending: maximum - minimum) arrange(music_data, top10_artist_genre, desc(top10_track_streams)) 3.1.3.2 Inspecting the content of a data frame The head() function displays the first X elements/rows of a vector, matrix, table, data frame or function. head(music_data, 3) # returns the first X rows (here, the first 3 rows) The tail() function is similar, except it displays the last elements/rows. tail(music_data, 3) # returns the last X rows (here, the last 3 rows) names() returns the names of an R object. When, for example, it is called on a data frame, it returns the names of the columns. names(music_data) # returns the names of the variables in the data frame ## [1] &quot;top10_track_streams&quot; &quot;top10_artist_names&quot; ## [3] &quot;top10_track_explicit&quot; &quot;top10_artist_genre&quot; ## [5] &quot;top_10_track_release_date&quot; &quot;top10_track_explicit_1&quot; str() displays the internal structure of an R object. In the case of a data frame, it returns the class (e.g., numeric, factor, etc.) of each variable, as well as the number of observations and the number of variables. str(music_data) # returns the structure of the data frame ## &#39;data.frame&#39;: 10 obs. of 6 variables: ## $ top10_track_streams : num 163608 126687 120480 110022 108630 ... ## $ top10_artist_names : chr &quot;Axwell /\\\\ Ingrosso&quot; &quot;Imagine Dragons&quot; &quot;J. Balvin&quot; &quot;Robin Schulz&quot; ... ## $ top10_track_explicit : Factor w/ 2 levels &quot;not explicit&quot;,..: 1 1 1 1 1 1 2 2 1 1 ## $ top10_artist_genre : Factor w/ 5 levels &quot;Alternative&quot;,..: 2 1 4 2 2 2 3 2 5 5 ## $ top_10_track_release_date: Date, format: &quot;2017-05-24&quot; &quot;2017-06-23&quot; ... ## $ top10_track_explicit_1 : logi FALSE FALSE FALSE FALSE FALSE FALSE ... nrow() and ncol() return the rows and columns of a data frame or matrix, respectively. dim() displays the dimensions of an R object. nrow(music_data) # returns the number of rows ## [1] 10 ncol(music_data) # returns the number of columns ## [1] 6 dim(music_data) # returns the dimensions of a data frame ## [1] 10 6 ls() can be used to list all objects that are associated with an R object. ls(music_data) # list all objects associated with an object ## [1] &quot;top_10_track_release_date&quot; &quot;top10_artist_genre&quot; ## [3] &quot;top10_artist_names&quot; &quot;top10_track_explicit&quot; ## [5] &quot;top10_track_explicit_1&quot; &quot;top10_track_streams&quot; 3.1.3.3 Select, append and delete variables to/from data frames To return a single column in a data frame, use the $ notation. For example, this returns all values associated with the variable “top10_track_streams”: music_data$top10_track_streams ## [1] 163608 126687 120480 110022 108630 95639 94690 89011 87869 85599 If you want to select more than one variable you can use the select function. It takes the data.frame containing the data as its first argument and the variables that you need after it: select(music_data, top10_artist_names, top10_track_streams, top10_track_explicit) select can also be used to remove columns by prepending a - to their name: select(music_data, -top_10_track_release_date, -top10_track_explicit_1) Assume that you wanted to add an additional variable to the data frame. You may use the $ notation to achieve this: # Create new variable as the log of the number of streams music_data$log_streams &lt;- log(music_data$top10_track_streams) # Create an ascending count variable which might serve as an ID music_data$obs_number &lt;- 1:nrow(music_data) head(music_data) In order to add a function (e.g., log) of multiple existing variables to the data.frame use mutate. Multiple commands can be chained using so called pipes - operators that can be read as “then”. Since R version 4.1 there are native pipes (|&gt;) as well as the ones provided by the tidyverse (%&gt;%): mutate(music_data, sqrt_streams = sqrt(top10_track_streams), # &quot;%Y&quot; extracts the year, format returns a character release_year = as.integer(format(top_10_track_release_date, &quot;%Y&quot;)) ) |&gt; select(top10_artist_names, sqrt_streams, release_year) You can also rename variables in a data frame, e.g., using the rename()-function. In the following code “::” signifies that the function “rename” should be taken from the package “dplyr” (note: this package is part of the tidyverse). This can be useful if multiple packages have a function with the same name. Calling a function this way also means that you can access a function without loading the entire package via library(). music_data &lt;- dplyr::rename(music_data, genre = top10_artist_genre, release_date = top_10_track_release_date) head(music_data) Note that the same can be achieved using: names(music_data)[names(music_data)==&quot;genre&quot;] &lt;- &quot;top10_artist_genre&quot; head(music_data) Or by referring to the index of the variable: names(music_data)[4] &lt;- &quot;genre&quot; head(music_data) Note that the data handling approach explained in this chapter touches on the so-called ‘base R’ and ‘tidyverse’ dialects. There are other dialects in R, which are basically different ways of achieving the same thing. Another popular dialect in R is ‘data.table’, see e.g., here and here. Once you become more advanced, you may want to look into the other dialects to achieve certain tasks more efficiently. For now, it is sufficient to be aware that there are other approaches to data handling and each dialect has it’s strengths and weaknesses. We will be mostly using ‘base R’ for the tutorial on this website. 3.2 Data import and export You can download the corresponding R-Code here Before you can start your analysis in R, you first need to import the data you wish to perform the analysis on. You will often be faced with different types of data formats (usually produced by some other statistical software like SPSS or Excel or a text editor). Fortunately, R is fairly flexible with respect to the sources from which data may be imported and you can import the most common data formats into R with the help of a few packages. R can, among others, handle data from the following sources: In the previous chapter, we saw how we may use the keyboard to input data in R. In the following sections, we will learn how to import data from text files and other statistical software packages. 3.2.1 Getting data for this course Most of the data sets we will be working with in this course will be stored in text files (i.e., .dat, .txt, .csv). All data sets we will be working with are stored in a repository on GitHub (similar to other cloud storage services such as Dropbox). You can directly import these data sets from GitHub without having to copy data sets from one place to another. If you know the location, where the files are stored, you may conveniently load the data directly from GitHub into R using the read.csv() function. To figure out the structure of the data you can read the first couple of lines of a file using the readLines function. The header=TRUE argument in the read.csv function indicates that the first line of data represents the header, i.e., it contains the names of the columns. The sep=\";\"-argument specifies the delimiter (the character used to separate the columns), which is a “;” in this case. readLines(&quot;https://short.wu.ac.at/ma22_musicdata&quot;, n = 3) ## [1] &quot;\\&quot;isrc\\&quot;;\\&quot;artist_id\\&quot;;\\&quot;streams\\&quot;;\\&quot;weeks_in_charts\\&quot;;\\&quot;n_regions\\&quot;;\\&quot;danceability\\&quot;;\\&quot;energy\\&quot;;\\&quot;speechiness\\&quot;;\\&quot;instrumentalness\\&quot;;\\&quot;liveness\\&quot;;\\&quot;valence\\&quot;;\\&quot;tempo\\&quot;;\\&quot;song_length\\&quot;;\\&quot;song_age\\&quot;;\\&quot;explicit\\&quot;;\\&quot;n_playlists\\&quot;;\\&quot;sp_popularity\\&quot;;\\&quot;youtube_views\\&quot;;\\&quot;tiktok_counts\\&quot;;\\&quot;ins_followers_artist\\&quot;;\\&quot;monthly_listeners_artist\\&quot;;\\&quot;playlist_total_reach_artist\\&quot;;\\&quot;sp_fans_artist\\&quot;;\\&quot;shazam_counts\\&quot;;\\&quot;artistName\\&quot;;\\&quot;trackName\\&quot;;\\&quot;release_date\\&quot;;\\&quot;genre\\&quot;;\\&quot;label\\&quot;;\\&quot;top10\\&quot;;\\&quot;expert_rating\\&quot;&quot; ## [2] &quot;\\&quot;BRRGE1603547\\&quot;;3679;11944813;141;1;50,9;80,3;4;0,05;46,3;65,1;166,018;3,11865;228,285714285714;0;450;51;145030723;9740;29613108;4133393;24286416;3308630;73100;\\&quot;Luan Santana\\&quot;;\\&quot;Eu, Você, O Mar e Ela\\&quot;;\\&quot;2016-06-20\\&quot;;\\&quot;other\\&quot;;\\&quot;Independent\\&quot;;1;\\&quot;excellent\\&quot;&quot; ## [3] &quot;\\&quot;USUM71808193\\&quot;;5239;8934097;51;21;35,3;75,5;73,3;0;39;43,7;191,153;3,228;144,285714285714;0;768;54;13188411;358700;3693566;18367363;143384531;465412;588550;\\&quot;Alessia Cara\\&quot;;\\&quot;Growing Pains\\&quot;;\\&quot;2018-06-14\\&quot;;\\&quot;Pop\\&quot;;\\&quot;Universal Music\\&quot;;0;\\&quot;good\\&quot;&quot; test_data &lt;- read.csv(&quot;https://short.wu.ac.at/ma22_musicdata&quot;, sep = &quot;;&quot;, header = TRUE) head(test_data) Note that it is also possible to download the data, placing it in the working directory and importing it from there. However, this requires an additional step to download the file manually first. If you chose this option, please remember to put the data file in the working directory first. If the import is not working, check your working directory setting using getwd(). Once you placed the file in the working directory, you can import it using the same command as above. Note that the file must be given as a character string (i.e., in quotation marks) and has to end with the file extension (e.g., .csv, .tsv, etc.). test_data &lt;- read.csv(&quot;data/music_data_fin.csv&quot;, header = TRUE, sep = &quot;;&quot;) head(test_data) 3.2.2 Import data created by other software packages Sometimes, you may need to import data files created by other software packages, such as Excel or SPSS. In this section we will use the readxl and haven packages to do this. To import a certain file you should first make sure that the file is stored in your current working directory. You can list all file names in your working directory using the list.files() function. If the file is not there, either copy it to your current working directory, or set your working directory to the folder where the file is located using setwd(\"/path/to/file\"). This tells R the folder you are working in. Remember that you have to use / instead of \\ to specify the path (if you use Windows paths copied from the explorer they will not work). When your file is in your working directory you can simply enter the filename into the respective import command. The import commands offer various options. For more details enter ?read_excel, ?read_spss after loading the packages. # import excel files library(readxl) #load package to import Excel files excel_sheets(&quot;test_data.xlsx&quot;) survey_data_xlsx &lt;- read_excel(&quot;test_data.xlsx&quot;, sheet = &quot;mrda_2016_survey&quot;) # &#39;sheet=x&#39;&#39; specifies which sheet to import head(survey_data_xlsx) library(haven) #load package to import SPSS files # import SPSS files survey_data_spss &lt;- read_sav(&quot;test_data.sav&quot;) head(survey_data_spss) The import of other file formats works in a very similar way (e.g., Stata, SAS). Please refer to the respective help-files (e.g., ?read_dta, ?read_sas …) if you wish to import data created by other software packages. 3.2.3 Import data from Qualtrics There is also a dedicated package ‘qualtRics’ which lets you conveniently import data from surveys you conducted via Qualtrics. Simply export your data from Qualtrics as a .csv file (standard option) and you can read it into R as follows: library(qualtRics) qualtrics &lt;- read_survey(&quot;qualtrics_survey.csv&quot;) head(qualtrics) When you inspect the data frame in R after you imported the data, you will find that it has some additional information compared to a standard .csv file. For example, each question (column) has the question number that you assigned in Qualtrics but also the Question text as an additional label. 3.2.4 Export data Exporting to different formats is also easy, as you can just replace “read” with “write” in many of the previously discussed functions (e.g. write.csv(object, \"file_name\")). This will save the data file to the working directory. To check what the current working directory is you can use getwd(). By default, the write.csv(object, \"file_name\")function includes the row number as the first variable. By specifying row.names = FALSE, you may exclude this variable since it doesn’t contain any useful information. write.csv(music_data, &quot;musicData.csv&quot;, row.names = FALSE) #writes to a comma-separated value file write_sav(music_data, &quot;musicData.sav&quot;) 3.2.5 Import data from the Web 3.2.5.1 Scraping data from websites Sometimes you may come across interesting data on websites that you would like to analyze. Reading data from websites is possible in R, e.g., using the rvest package. Let’s assume you would like to read a table that lists the population of different countries from this Wikipedia page. It helps to first inspect the structure of the website (e.g., using tools like SelectorGadget), so you know which elements you would like to extract. In this case it is fairly obvious that the data are stored in a table for which the associated html-tag is &lt;table&gt;. So let’s read the entire website using read_html(url) and filter all tables using read_html(html_nodes(...,\"table\")). library(rvest) url &lt;- &quot;https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population&quot; population &lt;- read_html(url) population &lt;- html_nodes(population, &quot;table.wikitable&quot;) print(population) ## {xml_nodeset (1)} ## [1] &lt;table class=&quot;wikitable sortable&quot;&gt;&lt;tbody&gt;\\n&lt;tr&gt;\\n&lt;th&gt;Rank&lt;/th&gt;\\n&lt;th&gt;\\n&lt;a ... The output shows that there are two tables on the website and the first one appears to contain the relevant information. So let’s read the first table using the html_table() function. Note that population is of class “list”. A list is a vector that has other R objects (e.g., other vectors, data frames, matrices, etc.) as its elements. If we want to access the data of one of the elements, we have to use two square brackets on each side instead of just one (e.g., population[[1]] gets us the first table from the list of tables on the website; the argument fill = TRUE ensures that empty cells are replaced with missing values when reading the table). population &lt;- population[[1]] %&gt;% html_table(fill = TRUE) head(population) #checks if we scraped the desired data You can see that population is read as a character variable because of the commas. class(population$Population) ## [1] &quot;character&quot; If we wanted to use this variable for some kind of analysis, we would first need to convert it to numeric format using the as.numeric() function. However, before we can do this, we can use the str_replace_all() function from the stringr package, which replaces all matches of a string. In our case, we would like to replace the commas (\",\") with nothing (\"\"). library(stringr) population$Population &lt;- as.numeric(str_replace_all(population$Population, pattern = &quot;,&quot;, replacement = &quot;&quot;)) #convert to numeric head(population) #checks if we scraped the desired data Now the variable is of type “numeric” and could be used for analysis. class(population$Population) ## [1] &quot;numeric&quot; 3.2.5.2 Scraping data from APIs 3.2.5.2.1 Scraping data from APIs directly Reading data from websites can be tricky since you need to analyze the page structure first. Many web-services (e.g., Facebook, Twitter, YouTube) actually have application programming interfaces (API’s), which you can use to obtain data in a pre-structured format. JSON (JavaScript Object Notation) is a popular lightweight data-interchange format in which data can be obtained. The process of obtaining data is visualized in the following graphic: Obtaining data from APIs The process of obtaining data from APIs consists of the following steps: Identify an API that has enough data to be relevant and reliable (e.g., www.programmableweb.com has &gt;12,000 open web APIs in 63 categories). Request information by calling (or, more technically speaking, creating a request to) the API (e.g., R, python, php or JavaScript). Receive response messages, which is usually in JavaScript Object Notation (JSON) or Extensible Markup Language (XML) format. Write a parser to pull out the elements you want and put them into a of simpler format Store, process or analyze data according the marketing research question. Let’s assume that you would like to obtain population data again. The World Bank has an API that allows you to easily obtain this kind of data. The details are usually provided in the API reference, e.g., here. You simply “call” the API for the desired information and get a structured JSON file with the desired key-value pairs in return. For example, the population for Austria from 1960 to 2019 can be obtained using this call. The file can be easily read into R using the fromJSON()-function from the jsonlite-package. Again, the result is a list and the second element ctrydata[[2]] contains the desired data, from which we select the “value” and “data” columns using the square brackets as usual [,c(\"value\",\"date\")] library(jsonlite) url &lt;- &quot;http://api.worldbank.org/v2/countries/AT/indicators/SP.POP.TOTL/?date=1960:2019&amp;format=json&amp;per_page=100&quot; #specifies url ctrydata &lt;- fromJSON(url) #parses the data str(ctrydata) ## List of 2 ## $ :List of 7 ## ..$ page : int 1 ## ..$ pages : int 1 ## ..$ per_page : int 100 ## ..$ total : int 60 ## ..$ sourceid : chr &quot;2&quot; ## ..$ sourcename : chr &quot;World Development Indicators&quot; ## ..$ lastupdated: chr &quot;2022-09-16&quot; ## $ :&#39;data.frame&#39;: 60 obs. of 8 variables: ## ..$ indicator :&#39;data.frame&#39;: 60 obs. of 2 variables: ## .. ..$ id : chr [1:60] &quot;SP.POP.TOTL&quot; &quot;SP.POP.TOTL&quot; &quot;SP.POP.TOTL&quot; &quot;SP.POP.TOTL&quot; ... ## .. ..$ value: chr [1:60] &quot;Population, total&quot; &quot;Population, total&quot; &quot;Population, total&quot; &quot;Population, total&quot; ... ## ..$ country :&#39;data.frame&#39;: 60 obs. of 2 variables: ## .. ..$ id : chr [1:60] &quot;AT&quot; &quot;AT&quot; &quot;AT&quot; &quot;AT&quot; ... ## .. ..$ value: chr [1:60] &quot;Austria&quot; &quot;Austria&quot; &quot;Austria&quot; &quot;Austria&quot; ... ## ..$ countryiso3code: chr [1:60] &quot;AUT&quot; &quot;AUT&quot; &quot;AUT&quot; &quot;AUT&quot; ... ## ..$ date : chr [1:60] &quot;2019&quot; &quot;2018&quot; &quot;2017&quot; &quot;2016&quot; ... ## ..$ value : int [1:60] 8879920 8840521 8797566 8736668 8642699 8546356 8479823 8429991 8391643 8363404 ... ## ..$ unit : chr [1:60] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ... ## ..$ obs_status : chr [1:60] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ... ## ..$ decimal : int [1:60] 0 0 0 0 0 0 0 0 0 0 ... head(ctrydata[[2]][, c(&quot;value&quot;, &quot;date&quot;)]) #checks if we scraped the desired data 3.2.5.2.2 Scraping data from APIs via R packages An even more convenient way to obtain data from web APIs is to use existing R packages that someone else has already created. There are R packages available for various web-services. For example, the gtrendsR package can be used to conveniently obtain data from the Google Trends page. The gtrends() function is easy to use and returns a list of elements (e.g., “interest over time”, “interest by city”, “related topics”), which can be inspected using the ls() function. The following example can be used to obtain data for the search term “data science” in the US between September 1 and October 6: library(gtrendsR) # specify search term, area, source and time # frame google_trends &lt;- gtrends(&quot;data science&quot;, geo = c(&quot;US&quot;), gprop = c(&quot;web&quot;), time = &quot;2012-09-01 2020-10-06&quot;) # inspect trend over time data frame head(google_trends$interest_over_time) Although we haven’t covered data visualization yet (see chapter 5), you could also easily plot the data to see the increasing trend for the search term we selected using the plot()-function. Note that the argument type = \"b\" indicates that both - a combination of line and points - should be used. # plot data plot(google_trends$interest_over_time[, c(&quot;date&quot;, &quot;hits&quot;)], type = &quot;b&quot;) Another advantage of R is that it is open to user contributions. This often means that packages that allow users to collect data to investigate timely issues are available fairly quickly. As an example, consider the recent pandemic where many resources were made available via R packages to researchers (see here for an overview). For example, we might want to get information on the number of daily confirmed cases in the US on the state level. We could obtain this information in just one line of code using the ‘COVID19’ package. library(COVID19) covid_data &lt;- covid19(country = &quot;US&quot;, level = 2, start = &quot;2020-01-01&quot;) ## We have invested a lot of time and effort in creating COVID-19 Data Hub, please cite the following when using it: ## ## To cite package &#39;COVID19&#39; in publications use: ## ## Guidotti, E., Ardia, D., (2020), &quot;COVID-19 Data Hub&quot;, Journal of Open ## Source Software 5(51):2376, doi: 10.21105/joss.02376. ## ## A BibTeX entry for LaTeX users is ## ## @Article{, ## title = {COVID-19 Data Hub}, ## year = {2020}, ## doi = {10.21105/joss.02376}, ## author = {Emanuele Guidotti and David Ardia}, ## journal = {Journal of Open Source Software}, ## volume = {5}, ## number = {51}, ## pages = {2376}, ## } ## ## To hide this message use &#39;verbose = FALSE&#39;. head(covid_data) Again, we could plot this data easily. In the following example, we first subset the data to the state of New York and then plot the development over time using the plot()-function. The argument type = \"l\" indicates that a line plot should be produced. # plot data plot(covid_data[covid_data$administrative_area_level_2 == &quot;New York&quot;, c(&quot;date&quot;, &quot;confirmed&quot;)], type = &quot;l&quot;) Learning check (LC3.1) Which of the following are data types are recognized by R? Factor Date Decimal Vector None of the above (LC3.2) What function should you use to check if an object is a data frame? type() str() class() object.type() None of the above (LC3.3) You would like to combine three vectors (student, grade, date) in a data frame. What would happen when executing the following code? student &lt;- c(&quot;Max&quot;, &quot;Jonas&quot;, &quot;Saskia&quot;, &quot;Victoria&quot;) grade &lt;- c(3, 2, 1, 2) date &lt;- as.Date(c(&quot;2020-10-06&quot;, &quot;2020-10-08&quot;, &quot;2020-10-09&quot;)) df &lt;- data.frame(student, grade, date) Error because a data frame can not have different data types Error because you should use as.data.frame() instead of data.frame() Error because all vectors need to have the same length Error because the column names are not specified This code should not report an error You would like to analyze the following data frame (LC3.4) How can you obtain Christina’s grade from the data frame? df[4,2] df[2,4] filter(df, student = Christina) %&gt;% select(grade) filter(df, student == \"Christina\") %&gt;% select(grade) None of the above (LC3.5) How can you add a new variable ‘student_id’ to the data frame that assigns numbers to students in an ascending order? df$student_id &lt;- 1:nrow(df) df&amp;student_id &lt;- 1:nrow(df) mutate(df, student_id = 1:nrow(df)) mutate(df, student_id = 1:length(df)) None of the above (LC3.6) How could you obtain all rows with students who obtained a 1? filter(df, grade == 1) filter(df, grade == min(df$grade, na.rm = TRUE)) select(df, grade == 1) filter(df, grade == min(df$grade)) None of the above (LC3.7) How could you create a subset of observations where the grade is not missing (NA) df_subset &lt;- filter(df, !is.na(grade)) df_subset &lt;- filter(df, isnot.na(grade)) df_subset &lt;- filter(df, grade != NA) df_subset &lt;- filter(df, grade != \"NA\") None of the above (LC3.8) What is the share of students with a grade better than 3? filter(df, grade &lt; 3)/nrow(df) nrow(filter(df, grade &lt; 3))/length(df) nrow(filter(df, grade &lt; 3))/nrow(df) filter(df, grade &lt; 3)/length(df) None of the above (LC3.9) You would like to load a .csv file from your working directory. What function would you use do it? read.table(file_name.csv) load.csv(\"file.csv\") read.table(\"file.csv\") get.table(file_name.csv) None of the above (LC3.10) After you loaded the file, you would like to inspect the types of data contained in it. How would you do it? ncol(df) nrow(df) dim(df) str(df) None of the above "],["summarizing-data.html", "4 Summarizing data 4.1 Summary statistics 4.2 Data visualization Learning check References", " 4 Summarizing data 4.1 Summary statistics You can download the corresponding R-Code here This section discusses how to produce and analyze basic summary statistics. Summary statistics are often used to describe variables in terms of 1) the central tendency of the frequency distribution, and 2) the dispersion of values. A measure of central tendency is a single value that attempts to describe the data by identifying the central position within the data. There are various measures of central tendency as the following table shows. Statistic Description Definition Mean The average value when you sum up all elements and divide by the number of elements \\(\\bar{X}=\\frac{\\sum_{i=1}^{n}{X_i}}{n}\\) Mode The value that occurs most frequently (i.e., the highest peak of the frequency distribution) Median The middle value when the data are arranged in ascending or descending order (i.e., the 50th percentile) The dispersion refers to the degree to which the data is distributed around the central tendency and can be described in terms of the range, interquartile range, variance, and standard deviation. Statistic Description Definition Range The difference between the largest and smallest values in the sample \\(Range=X_{largest}-X_{smallest}\\) Interquartile range The range of the middle 50% of scores \\(IQR=Q_3-Q_1\\) Variance The mean squared deviation of all the values of the mean \\(s^2=\\frac{1}{n-1}*\\sum_{i=1}^{n}{(X_i-\\bar{X})^2}\\) Standard deviation The square root of the variance \\(s_x=\\sqrt{s^2}\\) The answer to the question which measures to use depends on the level of measurement. Based on the discussion in chapter 1, we make a distinction between categorical and continuous variables, for which different statistics are permissible as summarized in the following table. OK to compute… Nominal Ordinal Interval Ratio frequency distribution Yes Yes Yes Yes median and percentiles No Yes Yes Yes mean, standard deviation, standard error of the mean No No Yes Yes ratio, or coefficient of variation No No No Yes As an example data set, we will be using a data set containing music streaming data from a popular streaming service. Let’s load and inspect the data first. # read.csv2 is shorthand for read.csv(file, sep = # &#39;;&#39;) music_data &lt;- read.csv2(&quot;https://short.wu.ac.at/ma22_musicdata&quot;) dim(music_data) ## [1] 66796 31 head(music_data) names(music_data) ## [1] &quot;isrc&quot; &quot;artist_id&quot; ## [3] &quot;streams&quot; &quot;weeks_in_charts&quot; ## [5] &quot;n_regions&quot; &quot;danceability&quot; ## [7] &quot;energy&quot; &quot;speechiness&quot; ## [9] &quot;instrumentalness&quot; &quot;liveness&quot; ## [11] &quot;valence&quot; &quot;tempo&quot; ## [13] &quot;song_length&quot; &quot;song_age&quot; ## [15] &quot;explicit&quot; &quot;n_playlists&quot; ## [17] &quot;sp_popularity&quot; &quot;youtube_views&quot; ## [19] &quot;tiktok_counts&quot; &quot;ins_followers_artist&quot; ## [21] &quot;monthly_listeners_artist&quot; &quot;playlist_total_reach_artist&quot; ## [23] &quot;sp_fans_artist&quot; &quot;shazam_counts&quot; ## [25] &quot;artistName&quot; &quot;trackName&quot; ## [27] &quot;release_date&quot; &quot;genre&quot; ## [29] &quot;label&quot; &quot;top10&quot; ## [31] &quot;expert_rating&quot; The data set contains information about all songs that appeared in the Top200 charts of a popular streaming service between 2017 and 2020. The dim()-function returns the dimensions of the data frame (i.e., the number of rows and columns). As can be seen, the data set comprises information for 66,796 songs and 31 variables. The variables in the data set are: isrc: unique song id artist_id: unique artist ID streams: the number of streams of the song received globally between 2017-2021 weeks_in_charts: the number of weeks the song was in the top200 charts in this period n_regions: the number of markets where the song appeared in the top200 charts audio features, see: (see: https://developer.spotify.com/documentation/web-api/reference/*category-tracks) danceability energy speechiness instrumentalness liveness valence tempo song_length: the duration of the song (in minutes) song_age: the age of the song (in weeks since release) explicit: indicator for explicit lyrics n_playlists: number of playlists a song is featured on sp_popularity: the Spotify popularity index of an artist youtube_views: the number of views the song received on YouTube tiktok_counts: the number of Tiktok views the song received on TikTok ins_followers_artist: the number of Instagram followers of the artist monthly_listeners_artist: the number of monthly listeners of an artist playlist_total_reach_artist: the number of playlist followers of the playlists the song is on sp_fans_artist: the number of fans of the artist on Spotify shazam_counts: the number of times a song is shazamed artistName: name of the artist trackName: name of the song release_date: release date of song genre: genre associated with the song label: music label associated with the song top10: indicator whether the song was in the top 10 expert_rating: 5-scale rating by a music expert (poor, fair, good, excellent, masterpiece) In a first step, we need to make sure all variables are in the correct format, according to these variable definitions: library(tidyverse) music_data &lt;- music_data |&gt; # pipe music data into mutate mutate(release_date = as.Date(release_date), # convert to date explicit = factor(explicit, levels = 0:1, labels = c(&quot;not explicit&quot;, &quot;explicit&quot;)), # convert to factor w. new labels label = as.factor(label), # convert to factor with values as labels genre = as.factor(genre), top10 = as.logical(top10), # Create an ordered factor for the ratings (e.g., for arranging the data) expert_rating = factor(expert_rating, levels = c(&quot;poor&quot;, &quot;fair&quot;, &quot;good&quot;, &quot;excellent&quot;, &quot;masterpiece&quot;), ordered = TRUE) ) head(music_data) In the following sections, we will inspect the data in more detail. 4.1.1 Categorical variables Categorical variables contain a finite number of categories or distinct groups and are also known as qualitative or non-metric variables. There are different types of categorical variables: Nominal variables: variables that have two or more categories but no logical order (e.g., music genres). A dichotomous variable (also referred to as dummy variable or binary variable) is simply a nominal variable that only has two categories (e.g., indicator for explicit lyrics). Ordinal variables: variables that have two or more categories that can also be ordered or ranked (e.g., expert ratings). Let’s now start to investigate the nominal variables in our data set (i.e., explicit, genre, label). As the table above shows, the only permissible operation with nominal variables is counting. That is, we can inspect the frequency distribution, which tells us how many observations we have per category. The table() function creates a frequency table that counts how many observations we have in each category. table(music_data$genre) #absolute frequencies ## ## Classics/Jazz Country Electro/Dance German Folk HipHop/Rap ## 80 504 2703 539 21131 ## other Pop R&amp;B Reggae Rock ## 5228 30069 1881 121 4214 ## Soundtrack ## 326 table(music_data$label) #absolute frequencies ## ## Independent Sony Music Universal Music Warner Music ## 22570 12390 21632 10204 table(music_data$explicit) #absolute frequencies ## ## not explicit explicit ## 58603 8193 The numbers associated with the factor level in the output tell you, how many observations there are per category. For example, there are 21131 songs from the HipHop &amp; Rap genre. Often, we are interested in the relative frequencies, which can be obtained by using the prop.table() function. prop.table(table(music_data$genre)) #relative frequencies ## ## Classics/Jazz Country Electro/Dance German Folk HipHop/Rap ## 0.001197677 0.007545362 0.040466495 0.008069345 0.316351279 ## other Pop R&amp;B Reggae Rock ## 0.078268160 0.450161686 0.028160369 0.001811486 0.063087610 ## Soundtrack ## 0.004880532 prop.table(table(music_data$label)) #relative frequencies ## ## Independent Sony Music Universal Music Warner Music ## 0.3378945 0.1854901 0.3238517 0.1527636 prop.table(table(music_data$explicit)) #relative frequencies ## ## not explicit explicit ## 0.877343 0.122657 Now the output gives you the relative frequencies. For example, the market share of Warner Music in the Top200 charts is ~15.3%, ~6.3% of songs are from the Rock genre, and ~12.3% of the songs have explicit lyrics. Note that the above output shows the overall relative frequencies. In many cases, it is meaningful to consider conditional relative frequencies. This can be achieved by adding a ,1 to the prop.table() command, which tells R to compute the relative frequencies by row (which is in our case the genre variable). The following code can be used to show the relative frequency of songs with explicit lyrics by genre. prop.table(table(select(music_data, genre, explicit)), 1) #conditional relative frequencies ## explicit ## genre not explicit explicit ## Classics/Jazz 0.82500000 0.17500000 ## Country 0.98015873 0.01984127 ## Electro/Dance 0.66000740 0.33999260 ## German Folk 0.70129870 0.29870130 ## HipHop/Rap 0.94846434 0.05153566 ## other 0.92214996 0.07785004 ## Pop 0.84472380 0.15527620 ## R&amp;B 0.92238171 0.07761829 ## Reggae 0.90909091 0.09090909 ## Rock 0.82819174 0.17180826 ## Soundtrack 0.86809816 0.13190184 As can be seen, the presence of explicit lyrics greatly varies across genres. While in the Electro/Dance genre ~34% of songs have explicit lyrics, in the Country genre, this share is only ~2%. The ‘expert_rating’ variable is an example of an ordinal variable. Although we can now rank order the songs with respect to their rating, this variable doesn’t contain information about the distance between two songs. To get a measure of central tendency, we could, for example, compute the median of this variable using the quantile()-function (recall that the 50th percentile is the median). For ordinal factors we also have to set the algorithm that calculates the percentiles to type=1 (see ?quantile for more details). median_rating &lt;- quantile(music_data$expert_rating, 0.5, type = 1) median_rating ## 50% ## good ## Levels: poor &lt; fair &lt; good &lt; excellent &lt; masterpiece This means that the “middle” value when the data are arranged is expert rating “good” (median = 50th percentile). Note that you could also compute other percentiles using the quanile()-function. For example, to get the median and the interquartile range, we could compute the 25th, 50th, and 75th percentile. quantile(music_data$expert_rating, c(0.25, 0.5, 0.75), type = 1) ## 25% 50% 75% ## fair good excellent ## Levels: poor &lt; fair &lt; good &lt; excellent &lt; masterpiece This means that the interquartile range is between “fair” and “excellent”. If you wanted to compare different genres according to these statistics, you could do this using the group_by()-function as follows: percentiles &lt;- c(0.25, 0.5, 0.75) rating_percentiles &lt;- music_data |&gt; group_by(explicit) |&gt; summarize(percentile = percentiles, value = quantile(expert_rating, percentiles, type = 1)) rating_percentiles In this case, we don’t observe any differences in the first, second, or third quantile of expert ratings between explicit and non-explicit songs. 4.1.2 Continuous variables 4.1.2.1 Descriptive statistics Continuous variables (also know as metric variables) are numeric variables that can take on any value on a measurement scale (i.e., there is an infinite number of values between any two values). There are different types of continuous variables as we have seen in chapter 1: Interval variables: while the zero point is arbitrary, equal intervals on the scale represent equal differences in the property being measured. E.g., on a temperature scale measured in Celsius the difference between a temperature of 15 degrees and 25 degrees is the same difference as between 25 degrees and 35 degrees but the zero point is arbitrary (there are different scales to measure temperature, such as Fahrenheit or Celsius, and zero in this case doesn’t indicate the absence of temperature). Ratio variables: has all the properties of an interval variable, but also has an absolute zero point. When the variable equals 0.0, it means that there is none of that variable (e.g., the number of streams or duration variables in our example). For interval and ratio variables we can also compute the mean as a measure of central tendency, as well as the variance and the standard deviation as measures of dispersion. Computing descriptive statistics for continuous variables is easy and there are many functions from different packages that let you calculate summary statistics (including the summary() function from the base package). In this tutorial, we will use the describe() function from the psych package. Note that you could just as well use other packages to compute the descriptive statistics (e.g., the stat.desc() function from the pastecs package). Which one you choose depends on what type of information you seek (the results provide slightly different information) and on personal preferences. We could, for example, compute the summary statistics for the variables “streams”, “danceability”, and “valence” in our data set as follows: library(psych) psych::describe(select(music_data, streams, danceability, valence)) ## vars n mean sd median trimmed mad ## streams 1 66796 7314673.94 39956263.68 333335.5 1309559.27 471342.26 ## danceability 2 66796 66.32 14.71 68.0 67.15 14.83 ## valence 3 66796 50.42 22.26 50.0 50.16 25.35 ## min max range skew kurtosis se ## streams 1003 2165692479.0 2165691476.0 16.74 452.05 154600.05 ## danceability 0 98.3 98.3 -0.53 0.03 0.06 ## valence 0 99.0 99.0 0.08 -0.84 0.09 You can see that the output contains measures of central tendency (e.g., the mean) and dispersion (e.g., sd) for the selected variables. It can be seen, for example, that the mean of the streams variable is 7,314,674 while the median is 333,336. This already tells us something about the distribution of the data. Because the mean is substantially higher than the median, we can conclude that there are a few songs with many streams, resulting in a right skew of the distribution. The median as a measure of central tendency is generally less susceptible to outliers. In the above command, we used the psych:: prefix to avoid confusion and to make sure that R uses the describe() function from the psych package since there are many other packages that also contain a desribe() function. Note that you could also compute these statistics separately by using the respective functions (e.g., mean(), sd(), median(), min(), max(), etc.). There are many options for additional statistics for this function. For example, you could add the argument IQR = TRUE to add the interquartile range to the output. The psych package also contains the describeBy() function, which lets you compute the summary statistics by sub-groups separately. For example, we could compute the summary statistics by genre as follows: describeBy(select(music_data, streams, danceability, valence), music_data$genre, skew = FALSE, range = FALSE) ## ## Descriptive statistics by group ## group: Classics/Jazz ## vars n mean sd se ## streams 1 80 735685.05 2590987.28 289681.18 ## danceability 2 80 46.00 18.34 2.05 ## valence 3 80 38.24 24.30 2.72 ## ------------------------------------------------------------ ## group: Country ## vars n mean sd se ## streams 1 504 15029908.45 43603853.23 1942269.99 ## danceability 2 504 59.67 11.98 0.53 ## valence 3 504 58.90 21.08 0.94 ## ------------------------------------------------------------ ## group: Electro/Dance ## vars n mean sd se ## streams 1 2703 12510460.33 56027266.04 1077646.71 ## danceability 2 2703 66.55 11.87 0.23 ## valence 3 2703 47.50 21.49 0.41 ## ------------------------------------------------------------ ## group: German Folk ## vars n mean sd se ## streams 1 539 2823274.57 10037803.62 432358.81 ## danceability 2 539 63.03 15.36 0.66 ## valence 3 539 56.07 24.07 1.04 ## ------------------------------------------------------------ ## group: HipHop/Rap ## vars n mean sd se ## streams 1 21131 6772815.16 37100200.64 255220.90 ## danceability 2 21131 73.05 12.30 0.08 ## valence 3 21131 49.04 20.73 0.14 ## ------------------------------------------------------------ ## group: other ## vars n mean sd se ## streams 1 5228 12615232.06 38126472.04 527301.29 ## danceability 2 5228 64.53 15.39 0.21 ## valence 3 5228 60.16 22.73 0.31 ## ------------------------------------------------------------ ## group: Pop ## vars n mean sd se ## streams 1 30069 5777165.76 36618010.00 211171.47 ## danceability 2 30069 63.74 14.46 0.08 ## valence 3 30069 50.33 22.57 0.13 ## ------------------------------------------------------------ ## group: R&amp;B ## vars n mean sd se ## streams 1 1881 15334008.40 54013527.81 1245397.95 ## danceability 2 1881 67.97 13.43 0.31 ## valence 3 1881 52.83 23.01 0.53 ## ------------------------------------------------------------ ## group: Reggae ## vars n mean sd se ## streams 1 121 6413030.64 20384605.84 1853145.99 ## danceability 2 121 75.06 9.33 0.85 ## valence 3 121 69.73 18.38 1.67 ## ------------------------------------------------------------ ## group: Rock ## vars n mean sd se ## streams 1 4214 6902054.06 54383538.37 837761.11 ## danceability 2 4214 54.75 13.98 0.22 ## valence 3 4214 45.65 22.53 0.35 ## ------------------------------------------------------------ ## group: Soundtrack ## vars n mean sd se ## streams 1 326 12676756.22 71865892.69 3980283.67 ## danceability 2 326 52.82 16.25 0.90 ## valence 3 326 37.99 22.44 1.24 In this example, we used the arguments skew = FALSE and range = FALSE to exclude some statistics from the output. R is open to user contributions and various users have contributed packages that aim at making it easier for researchers to summarize statistics. For example, the summarytools package can be used to summarize the variables. If you would like to use this package and you are a Mac user, you may need to also install XQuartz (X11) too. To do this, go to this page and download the XQuartz-2.7.7.dmg, then open the downloaded folder and click XQuartz.pkg and follow the instruction on screen and install XQuartz. If you still encouter an error after installing XQuartz, you may find a solution &lt;a href=“href=”https://www.xquartz.org/” target=“_blank”&gt;here. img { background-color: transparent; border: 0; } .st-table td, .st-table th { padding: 8px; } .st-table > thead > tr { background-color: #eeeeee; } .st-cross-table td { text-align: center; } .st-descr-table td { text-align: right; } table.st-table th { text-align: center; } table.st-table > thead > tr { background-color: #eeeeee; } table.st-table td span { display: block; } table.st-table > tfoot > tr > td { border:none; } .st-container { width: 100%; padding-right: 15px; padding-left: 15px; margin-right: auto; margin-left: auto; margin-top: 15px; } .st-multiline { white-space: pre; } .st-table { width: auto; table-layout: auto; margin-top: 20px; margin-bottom: 20px; max-width: 100%; background-color: transparent; border-collapse: collapse; } .st-table > thead > tr > th, .st-table > tbody > tr > th, .st-table > tfoot > tr > th, .st-table > thead > tr > td, .st-table > tbody > tr > td, .st-table > tfoot > tr > td { vertical-align: middle; } .st-table-bordered { border: 1px solid #bbbbbb; } .st-table-bordered > thead > tr > th, .st-table-bordered > tbody > tr > th, .st-table-bordered > thead > tr > td, .st-table-bordered > tbody > tr > td { border: 1px solid #cccccc; } .st-table-bordered > thead > tr > th, .st-table-bordered > thead > tr > td, .st-table thead > tr > th { border-bottom: none; } .st-freq-table > thead > tr > th, .st-freq-table > tbody > tr > th, .st-freq-table > tfoot > tr > th, .st-freq-table > thead > tr > td, .st-freq-table > tbody > tr > td, .st-freq-table > tfoot > tr > td, .st-freq-table-nomiss > thead > tr > th, .st-freq-table-nomiss > tbody > tr > th, .st-freq-table-nomiss > tfoot > tr > th, .st-freq-table-nomiss > thead > tr > td, .st-freq-table-nomiss > tbody > tr > td, .st-freq-table-nomiss > tfoot > tr > td, .st-cross-table > thead > tr > th, .st-cross-table > tbody > tr > th, .st-cross-table > tfoot > tr > th, .st-cross-table > thead > tr > td, .st-cross-table > tbody > tr > td, .st-cross-table > tfoot > tr > td { padding-left: 20px; padding-right: 20px; } .st-table-bordered > thead > tr > th, .st-table-bordered > tbody > tr > th, .st-table-bordered > thead > tr > td, .st-table-bordered > tbody > tr > td { border: 1px solid #cccccc; } .st-table-striped > tbody > tr:nth-of-type(odd) { background-color: #ffffff; } .st-table-striped > tbody > tr:nth-of-type(even) { background-color: #f9f9f9; } .st-descr-table > thead > tr > th, .st-descr-table > tbody > tr > th, .st-descr-table > thead > tr > td, .st-descr-table > tbody > tr > td { padding-left: 24px; padding-right: 24px; word-wrap: break-word; } .st-freq-table, .st-freq-table-nomiss, .st-cross-table { border: medium none; } .st-freq-table > thead > tr:nth-child(1) > th:nth-child(1), .st-cross-table > thead > tr:nth-child(1) > th:nth-child(1), .st-cross-table > thead > tr:nth-child(1) > th:nth-child(3) { border: none; background-color: #ffffff; text-align: center; } .st-protect-top-border { border-top: 1px solid #cccccc !important; } .st-ws-char { display: inline; color: #999999; letter-spacing: 0.2em; } /* Optional classes */ .st-small { font-size: 13px; } .st-small td, .st-small th { padding: 8px; } .st-small > thead > tr > th, .st-small > tbody > tr > th, .st-small > thead > tr > td, .st-small > tbody > tr > td { padding-left: 12px; padding-right: 12px; } library(summarytools) print(dfSummary(select(music_data, streams, valence, genre, label, explicit), plain.ascii = FALSE, style = &quot;grid&quot;, valid.col = FALSE, tmp.img.dir = &quot;tmp&quot;, graph.magnif = 0.65), method = &quot;render&quot;, headings = FALSE, footnote = NA) No Variable Stats / Values Freqs (% of Valid) Graph Missing 1 streams [numeric] Mean (sd) : 7314674 (39956264)min &le; med &le; max:1003 &le; 333335.5 &le; 2165692479IQR (CV) : 2125326 (5.5) 63462 distinct values 0 (0.0%) 2 valence [numeric] Mean (sd) : 50.4 (22.3)min &le; med &le; max:0 &le; 50 &le; 99IQR (CV) : 34.2 (0.4) 1420 distinct values 0 (0.0%) 3 genre [factor] 1. Classics/Jazz2. Country3. Electro/Dance4. German Folk5. HipHop/Rap6. other7. Pop8. R&B9. Reggae10. Rock11. Soundtrack 80(0.1%)504(0.8%)2703(4.0%)539(0.8%)21131(31.6%)5228(7.8%)30069(45.0%)1881(2.8%)121(0.2%)4214(6.3%)326(0.5%) 0 (0.0%) 4 label [factor] 1. Independent2. Sony Music3. Universal Music4. Warner Music 22570(33.8%)12390(18.5%)21632(32.4%)10204(15.3%) 0 (0.0%) 5 explicit [factor] 1. not explicit2. explicit 58603(87.7%)8193(12.3%) 0 (0.0%) The ‘Missing’ column in the output above gives us information about missing values. It this case, there are no missing values; however, in reality there are usually at least a couple of lost or not recorded values. To get more precise analysis results, we might want to exclude these observations by creating a “complete” subset of our data. Imagine that we have a missing value in the variable “valence”; we would create a subset by filtering that hypothetical observation out: music_data_valence &lt;- filter(music_data, !is.na(valence)) In the command above, !is.na() is used to filter the rows for observations where the respective variable does not have missing values. The “!” in this case translates to “is not” and the function is.na() checks for missing values. Hence, the entire statement can be read as “select the rows from the ‘music_data’ data set where the values of the ‘valence’ and ‘duration_ms’ variables are not missing”. As you can see, the output also includes a visualization of the frequency distribution using a histogram for the continuous variables and a bar chart for the categorical variables. The frequency distribution is an important element that allows us to assign probabilities to observed values if the observations come from a known probability distribution. How to derive these probability statements will be discussed next. 4.1.2.2 Using frequency distributions to go beyond the data The frequency distribution can be used to make statements about the probability that a certain observed value will occur if the observations come from a known probability distribution. For normally distributed data, the following table can be used to look up the probability that a certain value will occur. For example, the value of -1.96 has a probability of 2.5% (i.e., .0250). Figure 1.14: Standard normal table There are two things worth noting. First, the normal distribution has two tails as the following figure shows and we need to take the probability mass at each side of the distribution into account. Hence, there is a 2.5% probability of observing a value of -1.96 or smaller and a 2.5% of observing a value of 1.96 or larger. Hence, the probability mass within this interval is 0.95. Figure 1.15: Standard normal distribution The second point is related to the scale of the distribution. Since the variables that we will collect can be measured at many different scales (e.g., number of streams, duration in milliseconds), we need a way to convert the scale into a standardized measure that would allow us to compare the observations against the values from the probability table. The standardized variate, or z-score, allows us to do exactly that. It is computed as follows: \\[\\begin{align} Z=\\frac{X_i-\\bar{X}}{s} \\end{align} \\] By subtracting the mean of the variable from each observation and dividing by the standard deviation, the data is converted to a scale with mean = 0 and SD = 1, so we can use the tables of probabilities for the normal distribution to see how likely it is that a particular score will occur in the data. In other words, the z-score tells us how many standard deviations above or below the mean a particular x-value is. To see how this works in practice, let’s inspect the distribution of the ‘tempo’ variable from the music data set, which is defined as the overall estimated tempo of a track in beats per minute (BPM). The hist()-function can be used to draw the corresponding histogram. hist(music_data$tempo) Figure 1.16: Histogram of tempo variable In this case, the variable is measured on the scale “beats per minute”. To standardize this variable, we will subtract the mean of this variable from each observation and then divide by the standard deviation. We can compute the standardized variable by hand as follows: music_data$tempo_std &lt;- (music_data$tempo - mean(music_data$tempo))/sd(music_data$tempo) If we create the histogram again, we can see that the scale has changed and now we can compare the standardized values to the values we find in the probability table. hist(music_data$tempo_std) Figure 1.18: Histogram of standardized tempo variable Note that you could have also used the scale()-function instead of computing the z-scores manually, which leads to the same result: music_data$tempo_std &lt;- scale(music_data$tempo) Instead of manually comparing the observed values to the values in the table, it is much easier to use the in-built functions to obtain the probabilities. The pnorm()-function gives the probability of obtaining values lower than the indicated values (i.e., the probability mass left of that value). For the value of 1.96, this probability mass is ~0.025, in line with the table above. pnorm(-1.96) ## [1] 0.0249979 To also take the other end of the distribution into consideration, we would need to multiply this value by to. This way, we arrive at a value of 5%. pnorm(-1.96) * 2 ## [1] 0.04999579 Regarding the standard normal distribution, it is helpful to remember the following numbers, indicating the points on the standard normal distribution, where the sum of the probability mass to the left at the lower end and to the right of the upper end exceed a certain threshold: +/-1.645 - 10% of probability mass outside this region +/-1.960 - 5% of probability mass outside this region +/-2.580 - 1% of probability mass outside this region Going back to our example, we could also ask: what is the probability of obtaining the minimum (or maximum) observed value in our data? The minimum value on the standardized scale is: min(music_data$tempo_std) ## [1] -4.253899 And the associated probability is: pnorm(min(music_data$tempo_std)) * 2 ## [1] 0.00002100803 Although the probability of observing this minimum value is very low, there are very few observations in the extreme regions at each end of the histogram, so this doesn’t seem too unusual. As a rule of thumb, you can remember that 68% of the observations of a normally distributed variable should be within 1 standard deviation of the mean, 95% within 2 standard deviations, and 99.7% within 3 standard deviations. This is also shown in the following plot: Figure 1.24: The 68, 95, 99.7 rule (source: Wikipedia) In case of our ‘tempo’ variable, we do not observe values that are more than 3 standard deviations away from the mean. In other instances, checking the standardized values of a variable may help you to identify outliers. For example, if you conducted a survey and you would like to exclude respondents who answered the survey too fast, you may exclude cases with a low probability based on the distribution of the duration variable. 4.2 Data visualization You can download the corresponding R-Code here This section discusses the important topic of data visualization and how to produce appropriate graphics to describe your data visually. You should always visualize your data first. Figure 1.2: source: https://twitter.com/heyblake/status/1432070055949258752?s=20 The plots we created in the previous chapters used R’s in-built functions. In this section, we will be using the ggplot2 package by Hadley Wickham. It has the advantage of being fairly straightforward to learn and being very flexible when it comes to building more complex plots. For a more in depth discussion you can refer to chapter 4 of the book “Discovering Statistics Using R” by Andy Field et al. or read the following chapter from the book “R for Data science” by Hadley Wickham as well as “R Graphics Cookbook” by Winston Chang. ggplot2 is built around the idea of constructing plots by stacking layers on top of one another. Every plot starts with the ggplot(data) function, after which layers can be added with the “+” symbol. The following figures show the layered structure of creating plots with ggplot.     4.2.1 Categorical variables 4.2.1.1 Bar plot To give you an example of how the graphics are composed, let’s go back to the frequency table from the previous chapter, where we created a table showing the relative frequencies of songs in the Austrian streaming charts by genre. library(tidyverse) music_data &lt;- read.csv2(&quot;https://short.wu.ac.at/ma22_musicdata&quot;) |&gt; # pipe music data into mutate mutate(release_date = as.Date(release_date), # convert to date explicit = factor(explicit, levels = 0:1, labels = c(&quot;not explicit&quot;, &quot;explicit&quot;)), # convert to factor w. new labels label = as.factor(label), # convert to factor with values as labels genre = as.factor(genre), top10 = as.logical(top10), # Create an ordered factor for the ratings (e.g., for arranging the data) expert_rating = factor(expert_rating, levels = c(&quot;poor&quot;, &quot;fair&quot;, &quot;good&quot;, &quot;excellent&quot;, &quot;masterpiece&quot;), ordered = TRUE) ) |&gt; filter(!is.na(valence)) head(music_data) How can we plot this kind of data? Since we have a categorical variable, we will use a bar plot. However, to be able to use the table for your plot, you first need to assign it to an object as a data frame using the as.data.frame()-function. table_plot_rel &lt;- as.data.frame(prop.table(table(music_data$genre))) #relative frequencies head(table_plot_rel) Since Var1 is not a very descriptive name, let’s rename the variable to something more meaningful table_plot_rel &lt;- rename(table_plot_rel, Genre = Var1) head(table_plot_rel) Once we have our data set we can begin constructing the plot. As mentioned previously, we start with the ggplot() function, with the argument specifying the data set to be used. Within the function, we further specify the scales to be used using the aesthetics argument, specifying which variable should be plotted on which axis. In our example, we would like to plot the categories on the x-axis (horizontal axis) and the relative frequencies on the y-axis (vertical axis). bar_chart &lt;- ggplot(table_plot_rel, aes(x = Genre, y = Freq)) bar_chart Figure 1.5: Bar chart (step 1) You can see that the coordinate system is empty. This is because so far, we have told R only which variables we would like to plot but we haven’t specified which geometric figures (points, bars, lines, etc.) we would like to use. This is done using the geom_xxx() function. ggplot includes many different geoms, for a wide range of plots (e.g., geom_line, geom_histogram, geom_boxplot, etc.). A good overview of the various geom functions can be found here. In our case, we would like to use a bar chart for which geom_col is appropriate. bar_chart + geom_col() Figure 1.6: Bar chart (step 2) Now we have specified the data, the scales and the shape. Specifying this information is essential for plotting data using ggplot. Everything that follows now just serves the purpose of making the plot look nicer by modifying the appearance of the plot. How about some more meaningful axis labels? We can specify the axis labels using the ylab() and xlab() functions: bar_chart + geom_col() + ylab(&quot;Relative frequency&quot;) + xlab(&quot;Genre&quot;) Figure 1.7: Bar chart (step 3) How about adding some value labels to the bars? This can be done using geom_text(). Note that the sprintf() function is not mandatory and is only added to format the numeric labels here. The function takes two arguments: the first specifies the format wrapped in two % signs. Thus, %.0f means to format the value as a fixed point value with no digits after the decimal point, and %% is a literal that prints a “%” sign. The second argument is simply the numeric value to be used. In this case, the relative frequencies multiplied by 100 to obtain the percentage values. Using the vjust = argument, we can adjust the vertical alignment of the label. In this case, we would like to display the label slightly above the bars. bar_chart + geom_col() + ylab(&quot;Relative frequency&quot;) + xlab(&quot;Genre&quot;) + geom_text(aes(label = sprintf(&quot;%.0f%%&quot;, Freq * 100)), vjust = -0.2) Figure 1.8: Bar chart (step 4) We could go ahead and specify the appearance of every single element of the plot now. However, there are also pre-specified themes that include various formatting steps in one singe function. For example theme_bw() would make the plot appear like this: bar_chart + geom_col() + ylab(&quot;Relative frequency&quot;) + xlab(&quot;Genre&quot;) + geom_text(aes(label = sprintf(&quot;%.1f%%&quot;, Freq/sum(Freq) * 100)), vjust = -0.2) + theme_bw() Figure 1.9: Bar chart (step 5) and theme_minimal() looks like this: bar_chart + geom_col() + ylab(&quot;Relative frequency&quot;) + xlab(&quot;Genre&quot;) + geom_text(aes(label = sprintf(&quot;%.1f%%&quot;, Freq/sum(Freq) * 100)), vjust = -0.2) + theme_minimal() Figure 1.10: Bar chart (options 1) In a next step, let’s prevent the axis labels from overlapping by rotating the labels. bar_chart + geom_col() + ylab(&quot;Relative frequency&quot;) + xlab(&quot;Genre&quot;) + geom_text(aes(label = sprintf(&quot;%.1f%%&quot;, Freq/sum(Freq) * 100)), vjust = -0.2) + theme_minimal() + theme(axis.text.x = element_text(angle = 45, vjust = 0.75)) Figure 1.11: Bar chart (options 1) We could also add a title and combine all labels using the labs function. bar_chart + geom_col() + labs(x = &quot;Genre&quot;, y = &quot;Relative frequency&quot;, title = &quot;Chart songs by genre&quot;) + geom_text(aes(label = sprintf(&quot;%.1f%%&quot;, Freq/sum(Freq) * 100)), vjust = -0.2) + theme_minimal() + theme(axis.text.x = element_text(angle = 45, vjust = 0.75), plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) Figure 1.12: Bar chart (options 1) We could also add some color to the bars using the colorspace library, which comes with a range of color palettes. For example the shading of the bar could reflect the frequency: library(colorspace) bar_chart + geom_col(aes(fill = Freq)) + labs(x = &quot;Genre&quot;, y = &quot;Relative frequency&quot;, title = &quot;Chart share by genre&quot;) + geom_text(aes(label = sprintf(&quot;%.1f%%&quot;, Freq/sum(Freq) * 100)), vjust = -0.2) + theme_minimal() + ylim(0, 0.5) + scale_fill_continuous_sequential(palette = &quot;Blues&quot;) + theme(axis.text.x = element_text(angle = 45, vjust = 0.75), plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;), legend.title = element_blank()) Figure 1.13: Bar chart (options 1) Finally, we can reorder the bars by size using fct_reorder. The first argument to the function is the factor we want to reorder (genre) and the second the variable by which we want to order it (frequency): bar_chart + geom_col(aes(x = fct_reorder(Genre, Freq), fill = Freq)) + labs(x = &quot;Genre&quot;, y = &quot;Relative frequency&quot;, title = &quot;Chart share by genre&quot;) + geom_text(aes(label = sprintf(&quot;%.1f%%&quot;, Freq/sum(Freq) * 100)), vjust = -0.2) + theme_minimal() + ylim(0, 0.5) + scale_fill_continuous_sequential(palette = &quot;Blues&quot;) + theme(axis.text.x = element_text(angle = 45, vjust = 0.75), plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;), legend.title = element_blank()) The default theme in ggplot is theme_classic(). For even more options, check out the ggthemes package, which includes formats for specific publications. You can check out the different themes here. For example theme_economist() uses the formatting of the journal “The Economist”: library(ggthemes) bar_chart + geom_col(aes(x = fct_reorder(Genre, Freq))) + labs(x = &quot;Genre&quot;, y = &quot;Relative frequency&quot;, title = &quot;Chart songs by genre&quot;) + geom_text(aes(label = sprintf(&quot;%.1f%%&quot;, Freq/sum(Freq) * 100)), vjust = -0.2) + theme_economist() + ylim(0, 0.5) + theme(axis.text.x = element_text(angle = 45, vjust = 0.55), plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) Figure 1.14: Bar chart (options 2) There are various similar packages with pre-specified themes, like the ggthemr package, the ggtech package, the rockthemes package, or the tvthemes package. In a next step, we might want to investigate whether the relative frequencies differ between songs with explicit and song without explicit lyrics. For this purpose we first construct the conditional relative frequency table from the previous chapter again. Recall that the latter gives us the relative frequency within a group (in our case genres), as compared to the relative frequency within the entire sample. table_plot_cond_rel &lt;- as.data.frame(prop.table(table(select(music_data, genre, explicit)), 2)) #conditional relative frequencies table_plot_cond_rel We can now take these tables to construct plots grouped by explicitness. To achieve this we simply need to add the facet_wrap() function, which replicates a plot multiple times, split by a specified grouping factor. Note that the grouping factor has to be supplied in R’s formula notation, hence it is preceded by a “~” symbol. ggplot(table_plot_cond_rel, aes(x = fct_reorder(genre, Freq), y = Freq)) + geom_col(aes(fill = Freq)) + facet_wrap(~explicit) + labs(x = &quot;&quot;, y = &quot;Relative frequency&quot;, title = &quot;Distribution of genres for explicit and non-explicit songs&quot;) + geom_text(aes(label = sprintf(&quot;%.0f%%&quot;, Freq * 100)), vjust = -0.2) + theme_minimal() + ylim(0, 1) + scale_fill_continuous_sequential(palette = &quot;Blues&quot;) + theme(axis.text.x = element_text(angle = 45, vjust = 1.1, hjust = 1), plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;), legend.position = &quot;none&quot;) Figure 1.16: Grouped bar chart (facet_wrap) Alternatively, we might be interested to investigate the relative frequencies of explicit and non-explicit lyrics for each genre. To achieve this, we can also use the fill argument, which tells ggplot to fill the bars by a specified variable (in our case “explicit”). The position = “dodge” argument causes the bars to be displayed next to each other (as opposed to stacked on top of one another). table_plot_cond_rel_1 &lt;- as.data.frame(prop.table(table(select(music_data, genre, explicit)),1)) #conditional relative frequencies ggplot(table_plot_cond_rel_1, aes(x = genre, y = Freq, fill = explicit)) + #use &quot;fill&quot; argument for different colors geom_col(position = &quot;dodge&quot;) + #use &quot;dodge&quot; to display bars next to each other (instead of stacked on top) geom_text(aes(label = sprintf(&quot;%.0f%%&quot;, Freq * 100)),position=position_dodge(width=0.9), vjust=-0.25) + scale_fill_discrete_qualitative(palette = &quot;Dynamic&quot;) + labs(x = &quot;Genre&quot;, y = &quot;Relative frequency&quot;, title = &quot;Explicit lyrics share by genre&quot;) + theme_minimal() + theme(axis.text.x = element_text(angle=45,vjust=1.1,hjust=1), plot.title = element_text(hjust = 0.5,color = &quot;#666666&quot;), legend.position = &quot;none&quot; ) Figure 1.17: Grouped bar chart (fill) 4.2.2 Continuous variables 4.2.2.1 Histogram Histograms can be created for continuous data using the geom_histogram() function. Note that the aes() function only needs one argument here, since a histogram is a plot of the distribution of only one variable. As an example, let’s consider our data set containing the music data: head(music_data) Now we can create the histogram using geom_histogram(). The argument binwidth specifies the range that each bar spans, col = \"black\" specifies the border to be black and fill = \"darkblue\" sets the inner color of the bars to dark blue. For brevity, we have now also started naming the x and y axis with the single function labs(), instead of using the two distinct functions xlab() and ylab(). Let’s look at the distribution of streams of R&amp;B songs: music_data |&gt; filter(genre == &quot;R&amp;B&quot;) |&gt; ggplot(aes(streams)) + geom_histogram(binwidth = 20000000, col = &quot;black&quot;, fill = &quot;darkblue&quot;) + labs(x = &quot;Number of streams&quot;, y = &quot;Frequency&quot;, title = &quot;Distribution of streams&quot;) + theme_bw() Figure 1.19: Histogram If you would like to highlight certain points of the distribution, you can use the geom_vline (short for vertical line) function to do this. For example, we may want to highlight the mean and the median of the distribution. music_data |&gt; filter(genre == &quot;R&amp;B&quot;) |&gt; ggplot(aes(streams)) + geom_histogram(binwidth = 20000000, col = &quot;black&quot;, fill = &quot;darkblue&quot;) + labs(x = &quot;Number of streams&quot;, y = &quot;Frequency&quot;, title = &quot;Distribution of streams&quot;, subtitle = &quot;Red vertical line = mean, green vertical line = median&quot;) + geom_vline(aes(xintercept = mean(streams)), color = &quot;red&quot;, size = 1) + geom_vline(aes(xintercept = median(streams)), color = &quot;green&quot;, size = 1) + theme_bw() Figure 1.20: Histogram 2 In this case, you should indicate what the lines refer to. In the plot above, the ‘subtitle’ argument was used to add this information to the plot. Note the difference between a bar chart and the histogram. While a bar chart is used to visualize the frequency of observations for categorical variables, the histogram shows the frequency distribution for continuous variables. 4.2.2.2 Boxplot Another common way to display the distribution of continuous variables is through boxplots. ggplot will construct a boxplot if given the geom geom_boxplot(). In our case we might want to show the difference in streams between the genres. For this analysis, we will transform the streaming variable using a logarithmic transformation, which is common with such data (as we will see later). So let’s first create a new variable by taking the logarithm of the streams variable. music_data$log_streams &lt;- log(music_data$streams) Now, let’s create a boxplot based on these variables and plot the log-transformed number of streams by genre. ggplot(music_data, aes(x = fct_reorder(genre, log_streams), y = log_streams)) + geom_boxplot(coef = 3) + labs(x = &quot;Genre&quot;, y = &quot;Number of streams (log-scale)&quot;) + theme_minimal() + theme(axis.text.x = element_text(angle = 45, vjust = 1.1, hjust = 1), plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;), legend.position = &quot;none&quot;) Figure 1.22: Boxplot by group The following graphic shows you how to interpret the boxplot: Information contained in a Boxplot Note that you could also flip the boxplot. To do this, you only need to exchange the x- and y-variables. If we provide the categorical variable to the y-axis as follows, the axis will be flipped. ggplot(music_data, aes(x = log_streams, y = fct_reorder(genre, log_streams))) + geom_boxplot(coef = 3) + labs(x = &quot;Number of streams (log-scale)&quot;, y = &quot;Genre&quot;) + theme_minimal() + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;), legend.position = &quot;none&quot;) Figure 1.23: Boxplot by group It is often meaningful to augment the boxplot with the data points using geom_jitter(). This way, differences in the distribution of the variable between the genres become even more apparent. ggplot(music_data, aes(x = log_streams, y = fct_reorder(genre, log_streams))) + geom_jitter(colour = &quot;red&quot;, alpha = 0.1) + geom_boxplot(coef = 3, alpha = 0.1) + labs(x = &quot;Number of streams (log-scale)&quot;, y = &quot;Genre&quot;) + theme_minimal() Figure 1.24: Boxplot by group In case you would like to create the boxplot on the total data (i.e., not by group), just leave the y = argument within the aes() function empty: ggplot(music_data, aes(x = log_streams, y = &quot;&quot;)) + geom_boxplot(coef = 3, width = 0.3) + labs(x = &quot;Number of streams (log-scale)&quot;, y = &quot;&quot;) Figure 1.25: Single Boxplot 4.2.2.3 Plot of means Another way to get an overview of the difference between two groups is to plot their respective means with confidence intervals. The mean and confidence intervals will enter the plot separately, using the geoms geom_bar() and geom_errorbar(). Don’t worry if you don’t know exactly how to interpret the confidence interval at this stage - we will cover this topic in the next chapter. Let’s assume we would like to plot the difference in streams between the HipHop &amp; Rap genre and all other genres. For this, we first need to create a dummy variable (i.e., a categorical variable with two levels) that indicates if a song is from the HipHop &amp; Rap genre or from any of the other genres. We can use the ifelse() function to do this, which takes 3 arguments, namely 1) the if-statement, 2) the returned value if this if-statement is true, and 3) the value if the if-statement is not true. music_data$genre_dummy &lt;- as.factor(ifelse(music_data$genre == &quot;HipHop/Rap&quot;, &quot;HipHop &amp; Rap&quot;, &quot;other&quot;)) To make plotting the desired comparison easier, we can compute all relevant statistics first, using the summarySE() function from the Rmisc package. library(Rmisc) mean_data &lt;- summarySE(music_data, measurevar = &quot;streams&quot;, groupvars = c(&quot;genre_dummy&quot;)) mean_data The output tells you how many observations there are per group, the mean number of streams per group, as well as the group-specific standard deviation, the standard error, and the confidence interval (more on this in the next chapter). You can now create the plot as follows: ggplot(mean_data, aes(x = genre_dummy, y = streams)) + geom_bar(position = position_dodge(0.9), colour = &quot;black&quot;, fill = &quot;#CCCCCC&quot;, stat = &quot;identity&quot;, width = 0.65) + geom_errorbar(position = position_dodge(0.9), width = 0.15, aes(ymin = streams - ci, ymax = streams + ci)) + theme_bw() + labs(x = &quot;Genre&quot;, y = &quot;Average number of streams&quot;, title = &quot;Average number of streams by genre&quot;) + theme_bw() + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) Figure 4.1: Plot of means As can be seen, there is a large difference between the genres with respect to the average number of streams. 4.2.2.4 Grouped plot of means We might also be interested to investigate a second factor. Say, we would like to find out if there is a difference between genres with respect to the lyrics (i.e., whether the lyrics are explicit or not). Can we find evidence that explicit lyrics affect streams of songs from the HipHop &amp; Rap genre differently compared to other genres. We can compute the statistics using the summarySE() function by simply adding the second variable to the ‘groupvars’ argument. mean_data2 &lt;- summarySE(music_data, measurevar = &quot;streams&quot;, groupvars = c(&quot;genre_dummy&quot;, &quot;explicit&quot;)) mean_data2 Now we obtained the results for four different groups (2 genres x 2 lyric types) and we can amend the plot easily by adding the ‘fill’ argument to the ggplot() function. The scale_fill_manual() function is optional and specifies the color of the bars manually. ggplot(mean_data2, aes(x = genre_dummy, y = streams, fill = explicit)) + geom_bar(position = position_dodge(0.9), colour = &quot;black&quot;, stat = &quot;identity&quot;) + geom_errorbar(position = position_dodge(0.9), width = 0.2, aes(ymin = streams - ci, ymax = streams + ci)) + scale_fill_manual(values = c(&quot;#CCCCCC&quot;, &quot;#FFFFFF&quot;)) + theme_bw() + labs(x = &quot;Genre&quot;, y = &quot;Average number of streams&quot;, title = &quot;Average number of streams by genre and lyric type&quot;) + theme_bw() + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) Figure 4.2: Grouped plot of means The results of the analysis show that also in the HipHop &amp; Rap genre, songs with non-explicit lyrics obtain more streams on average, contrary to our expectations. 4.2.2.5 Scatter plot The most common way to show the relationship between two continuous variables is a scatterplot. As an example, let’s investigate if there is an association between the number of streams a song receives and the speechiness of the song. The following code creates a scatterplot with some additional components. The geom_smooth() function creates a smoothed line from the data provided. In this particular example we tell the function to draw the best possible straight line (i.e., minimizing the distance between the line and the points) through the data (via the argument method = \"lm\"). Note that the “shape = 1” argument passed to the geom_point() function produces hollow circles (instead of solid) and the “fill” and “alpha” arguments passed to the geom_smooth() function specify the color and the opacity of the confidence interval, respectively. ggplot(music_data, aes(speechiness, log_streams)) + geom_point(shape = 1) + labs(x = &quot;Speechiness&quot;, y = &quot;Streams (log scale)&quot;) + geom_smooth(method = &quot;lm&quot;, fill = &quot;blue&quot;, alpha = 0.1) + labs(x = &quot;Speechiness&quot;, y = &quot;Number of streams (log-scale)&quot;, title = &quot;Scatterplot of streams and speechiness&quot;) + theme_bw() + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) Figure 4.3: Scatter plot As you can see, there appears to be a positive relationship between the speechiness and number of streams. 4.2.2.5.1 Grouped scatter plot It could be that customers from different store respond differently to advertising. We can visually capture such differences with a grouped scatter plot. By adding the argument colour = store to the aesthetic specification, ggplot automatically treats the two stores as distinct groups and plots accordingly. ggplot(music_data, aes(speechiness, log_streams, colour = explicit)) + geom_point(shape = 1) + geom_smooth(method = &quot;lm&quot;, alpha = 0.1) + labs(x = &quot;Speechiness&quot;, y = &quot;Number of streams (log-scale)&quot;, title = &quot;Scatterplot of streams and speechiness by lyric type&quot;, colour = &quot;Explicit&quot;) + scale_color_manual(values = c(&quot;lightblue&quot;, &quot;darkblue&quot;)) + theme_bw() + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) Figure 4.4: Grouped scatter plot It appears from the plot that the association between speechiness and the number of streams is stronger for songs without explicit lyrics. 4.2.2.6 Line plot Another important type of plot is the line plot used if, for example, you have a variable that changes over time and you want to plot how it develops over time. To demonstrate this we will investigate a data set that show the development of the number of streams of the Top200 songs on a popular music streaming service for different region. Let’s investigate the data first and bring all variables to the correct format. music_data_ctry &lt;- read.table(&quot;https://raw.githubusercontent.com/IMSMWU/Teaching/master/MRDA2017/streaming_charts_ctry.csv&quot;, sep = &quot;,&quot;, header = TRUE) |&gt; mutate(week = as.Date(week), region = as.factor(region)) head(music_data_ctry) In a first step, let’s investigate the development for Austria, by filtering the data to region ‘at’. music_data_at &lt;- filter(music_data_ctry, region == &quot;at&quot;) Given the correct aes() and geom specification ggplot constructs the correct plot for us. In order to make large numbers more readable we use the label_comma function from the scales package in the scale_y_continuous layer. ggplot(music_data_at, aes(x = week, y = streams)) + geom_line() + labs(x = &quot;&quot;, y = &quot;Total streams in Austria&quot;, title = &quot;Weekly number of streams in Austria&quot;) + theme_bw() + scale_y_continuous(labels = scales::label_comma()) + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) Figure 4.5: Line plot There appears to be a positive trend in the market. Now let’s compare Austria to other countries. Note that the %in% operator checks for us if any of the region names specified in the vector are included in the region column. music_data_at_compare &lt;- filter(music_data_ctry, region %in% c(&quot;at&quot;, &quot;de&quot;, &quot;ch&quot;, &quot;se&quot;, &quot;dk&quot;, &quot;nl&quot;)) We can now include the other specified countries in the plot by using the ‘color’ argument. ggplot(music_data_at_compare, aes(x = week, y = streams, color = region)) + geom_line() + labs(x = &quot;Week&quot;, y = &quot;Total streams&quot;, title = &quot;Weekly number of streams by country&quot;) + theme_bw() + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) + scale_y_continuous(labels = scales::label_comma()) Figure 4.6: Line plot (by region) One issue in plot like this can be that the scales between countries is very different (i.e., in Germany there are many more streams because Germany is larger than the other countries). You could also use the facet_wrap() function to create one individual plot by region and specify ‘scales = “free_y”’ so that each individual plot has its own scale on the y-axis. We should also indicate the number of streams in millions by dividing the number of streams. ggplot(music_data_at_compare, aes(x = week, y = streams/1000000)) + geom_line() + facet_wrap(~region, scales = &quot;free_y&quot;) + labs(x = &quot;Week&quot;, y = &quot;Total streams (in million)&quot;, title = &quot;Weekly number of streams by country&quot;) + theme_bw() + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) Figure 4.7: Line plot (facet wrap) Now it’s easier to see that the trends are different between countries. While Sweden and Denmark appear to be saturated, the other market show strong growth. 4.2.2.7 Area plots A slightly different way to plot this data is through area plot using the geom_area() function. ggplot(music_data_at_compare, aes(x = week, y = streams/1000000)) + geom_area(fill = &quot;steelblue&quot;, color = &quot;steelblue&quot;, alpha = 0.5) + facet_wrap(~region, scales = &quot;free_y&quot;) + labs(x = &quot;Week&quot;, y = &quot;Total streams (in million)&quot;, title = &quot;Weekly number of streams by country&quot;) + theme_bw() + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) Figure 4.8: Line plot (facet wrap) If the relative share of the overall streaming volume is of interest, you could use a stacked area plot to visualize this. ggplot(music_data_at_compare, aes(x = week, y = streams/1000000, group = region, fill = region, color = region)) + geom_area(position = &quot;stack&quot;, alpha = 0.65) + labs(x = &quot;Week&quot;, y = &quot;Total streams (in million)&quot;, title = &quot;Weekly number of streams by country&quot;) + theme_bw() + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) Figure 4.9: Line plot (facet wrap) In this type of plot it is easy to spot the relative size of the regions. In some cases it could also make sense to add a secondary y-axis, for example, if you would like to compare two regions with very different scales in one plot. Let’s assume, we would like to compare Austria and Sweden and take the corresponding subset. music_data_at_se_compare &lt;- filter(music_data_ctry, region %in% c(&quot;at&quot;, &quot;se&quot;)) In order to add the secondary y-axis, we need the data in a slightly different format where we have one column for each country. This is called the ‘wide format’ as opposed to the ‘long format’ where the data is stacked on top of each other for all regions. We can easily convert the data to the wide format by using the pivot_wider() function from the tidyr package. library(tidyr) data_wide &lt;- pivot_wider(music_data_at_se_compare, names_from = region, values_from = streams) data_wide As another intermediate step, we need to compute the ratio between the two variables we would like to plot on the two axis, since the scale of the second axis is determined based on the ratio with the other variable. ratio &lt;- mean(data_wide$at/1000000)/mean(data_wide$se/1000000) Now we can create the plot with the secondary y-axis as follows: ggplot(data_wide) + geom_area(aes(x = week, y = at/1000000, colour = &quot;Austria&quot;, fill = &quot;Austria&quot;), alpha = 0.5) + geom_area(aes(x = week, y = (se/1000000) * ratio, colour = &quot;Sweden&quot;, fill = &quot;Sweden&quot;), alpha = 0.5) + scale_y_continuous(sec.axis = sec_axis(~./ratio, name = &quot;Total streams SE (in million)&quot;)) + scale_fill_manual(values = c(&quot;#999999&quot;, &quot;#E69F00&quot;)) + scale_colour_manual(values = c(&quot;#999999&quot;, &quot;#E69F00&quot;), guide = FALSE) + theme_minimal() + labs(x = &quot;Week&quot;, y = &quot;Total streams AT (in million)&quot;, title = &quot;Weekly number of streams by country&quot;) + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;), legend.title = element_blank(), legend.position = &quot;bottom&quot;) Figure 4.10: Secondary y-axis In this plot it is easy to see the difference in trends between the countries. 4.2.3 Saving plots To save the last displayed plot, simply use the function ggsave(), and it will save the plot to your working directory. Use the arguments heightand width to specify the size of the file. You may also choose the file format by adjusting the ending of the file name. E.g., file_name.jpg will create a file in JPG-format, whereas file_name.png saves the file in PNG-format, etc.. ggsave(&quot;test_plot.jpg&quot;, height = 5, width = 8.5) 4.2.4 ggplot extensions As the ggplot2 package became more and more popular over the past years, more and more extensions have been developed by users that can be used for specific purposes that are not yet covered by the standard functionality of ggplot2. You can find a list of the extensions here. Below, you can find some example for the additional options. 4.2.4.1 Results of statistical tests (ggstatsplot) You may use the ggstatplot package to augment your plots with the results from statistical tests, such as an ANOVA. You can find a presentation about the capabilities of this package here. The boxplot below shows an example. library(ggstatsplot) music_data_subs &lt;- filter(music_data, genre %in% c(&quot;HipHop/Rap&quot;, &quot;Soundtrack&quot;,&quot;Pop&quot;,&quot;Rock&quot;)) ggbetweenstats( data = music_data_subs, title = &quot;Number of streams by genre&quot;, # title for the plot plot.type = &quot;box&quot;, x = genre, # 4 groups y = log_streams, type = &quot;p&quot;, # default messages = FALSE, bf.message = FALSE, pairwise.comparisons = TRUE # display results from pairwise comparisons ) Figure 4.11: Boxplot using ggstatsplot package 4.2.4.1.1 Combination of plots (ggExtra) Using the ggExtra() package, you may combine two type of plots. For example, the following plot combines a scatterplot with a histogram: library(ggExtra) p &lt;- ggplot(music_data, aes(x = speechiness, y = log_streams)) + geom_point() + labs(x = &quot;Speechiness&quot;, y = &quot;Number of streams (log-scale)&quot;, title = &quot;Scatterplot &amp; histograms of streams and speechiness&quot;) + theme_bw() + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) ggExtra::ggMarginal(p, type = &quot;histogram&quot;) Figure 4.12: Scatter plot with histogram In this case, the type = \"histogram\" argument specifies that we would like to plot a histogram. However, you could also opt for type = \"boxplot\" or type = \"density\" to use a boxplot or density plot instead. 4.2.4.2 Appendix 4.2.4.2.1 Covariation plots To visualize the co-variation between categorical variables, you’ll need to count the number of observations for each combination stored in the frequency table. Say, we wanted to investigate the association between the popularity of a song and the level of ‘speechiness’. For this exercise, let’s assume we have both variables measured as categorical (factor) variables. We can use the quantcut() function to create categorical variables based on the continuous variables. All we need to do is tell the function how many categories we would like to obtain and it will divide the data based on the percentiles equally. library(gtools) music_data$streams_cat &lt;- as.numeric(quantcut(music_data$streams, 5, na.rm = TRUE)) music_data$speech_cat &lt;- as.numeric(quantcut(music_data$speechiness, 3, na.rm = TRUE)) music_data$streams_cat &lt;- factor(music_data$streams_cat, levels = 1:5, labels = c(&quot;low&quot;, &quot;low-med&quot;, &quot;medium&quot;, &quot;med-high&quot;, &quot;high&quot;)) #convert to factor music_data$speech_cat &lt;- factor(music_data$speech_cat, levels = 1:3, labels = c(&quot;low&quot;, &quot;medium&quot;, &quot;high&quot;)) #convert to factor Now we have multiple ways to visualize a relationship between the two variables with ggplot. One option would be to use a variation of the scatterplot which counts how many points overlap at any given point and increases the dot size accordingly. This can be achieved with geom_count() as the example below shows where the stat(prop) argument assures that we get relative frequencies and with the group argument we tell R to compute the relative frequencies by speechiness. ggplot(data = music_data) + geom_count(aes(x = speech_cat, y = streams_cat, size = stat(prop), group = speech_cat)) + ylab(&quot;Popularity&quot;) + xlab(&quot;Speechiness&quot;) + labs(size = &quot;Proportion&quot;) + theme_bw() Figure 4.13: Covariation between categorical data (1) The plot shows that there appears to be a positive association between the popularity of a song and its level of speechiness. Another option would be to use a tile plot that changes the color of the tile based on the frequency of the combination of factors. To achieve this, we first have to create a dataframe that contains the relative frequencies of all combinations of factors. Then we can take this dataframe and pass it to geom_tile(), while specifying that the fill of each tile should be dependent on the observed frequency of the factor combination, which is done by specifying the fill in the aes() function. table_plot_rel &lt;- prop.table(table(music_data[, c(&quot;speech_cat&quot;, &quot;streams_cat&quot;)]), 1) table_plot_rel &lt;- as.data.frame(table_plot_rel) ggplot(table_plot_rel, aes(x = speech_cat, y = streams_cat)) + geom_tile(aes(fill = Freq)) + ylab(&quot;Populartiy&quot;) + xlab(&quot;Speechiness&quot;) + theme_bw() Figure 4.14: Covariation between categorical data (2) 4.2.4.2.2 Location data (ggmap) Now that we have covered the most important plots, we can look at what other type of data you may come across. One type of data that is increasingly available is the geo-location of customers and users (e.g., from app usage data). The following data set contains the app usage data of Shazam users from Germany. The data contains the latitude and longitude information where a music track was “shazamed”. library(ggmap) library(dplyr) geo_data &lt;- read.table(&quot;https://raw.githubusercontent.com/IMSMWU/Teaching/master/MRDA2017/geo_data.dat&quot;, sep = &quot;\\t&quot;, header = TRUE) head(geo_data) There is a package called “ggmap”, which is an augmentation for the ggplot packages. It lets you load maps from different web services (e.g., Google maps) and maps the user location within the coordination system of ggplot. With this information, you can create interesting plots like heat maps. We won’t go into detail here but you may go through the following code on your own if you are interested. However, please note that you need to register an API with Google in order to make use of this package. # register_google(key = &#39;your_api_key&#39;) # Download the base map de_map_g_str &lt;- get_map(location = c(10.018343, 51.133481), zoom = 6, scale = 2) # results in below map (wohoo!) # Draw the heat map ggmap(de_map_g_str, extent = &quot;device&quot;) + geom_density2d(data = geo_data, aes(x = lon, y = lat), size = 0.3) + stat_density2d(data = geo_data, aes(x = lon, y = lat, fill = ..level.., alpha = ..level..), size = 0.01, bins = 16, geom = &quot;polygon&quot;) + scale_fill_gradient(low = &quot;green&quot;, high = &quot;red&quot;) + scale_alpha(range = c(0, 0.3), guide = FALSE) Learning check (LC4.1) For which data types is it meaningful to compute the mean? Nominal Ordinal Interval Ratio (LC4.2) How can you compute the standardized variate of a variable X? \\(Z=\\frac{X_i-\\bar{X}}{s}\\) \\(Z=\\frac{\\bar{X}+X_i}{s}\\) \\(Z=\\frac{s}{\\bar{X}+X_i}\\) \\(Z=s*({\\bar{X}+X_i)}\\) None of the above You wish to analyze the following data frame ‘df’ containing information about cars (LC4.3) How could you add a new variable containing the z-scores of the variable ‘mpg’ in R? df$mpg_std &lt;- zscore(df$mpg) df$mpg_std &lt;- stdv(df$mpg) df$mpg_std &lt;- std.scale(df$mpg) df$mpg_std &lt;- scale(df$mpg) None of the above (LC4.4) How could you produce the below output? describe(select(mtcars, hp, mpg, qsec)) summary(select(mtcars, hp, mpg, qsec)) table(select(mtcars, hp, mpg, qsec)) str(select(mtcars, hp, mpg, qsec)) None of the above (LC4.5) The last column “carb” indicates the number of carburetors each model has. By using a function we got to know the number of car models that have a certain number carburetors. Which function helped us to obtain this information? ## ## 1 2 3 4 6 8 ## 7 10 3 10 1 1 describe(mtcars$carb) table(mtcars$carb) str(mtcars$carb) prop.table(mtcars$carb) None of the above (LC4.6) What type of data can be meaningfully depicted in a scatter plot? Two categorical variables One categorical and one continuous variable Two continuous variables One continuous variable None of the above (LC4.7) Which statement about the graph below is true? This is a bar chart This is a histogram It shows the frequency distribution of a continuous variable It shows the frequency distribution of a categorical variable None of the above (LC4.8) Which statement about the graph below is true? This is a bar chart 50% of observations are contained in the gray area The horizontal black line indicates the mean This is a boxplot None of the above (LC4.9) Which function can help you to save a graph made with ggplot()? ggsave() write.plot() save.plot() export.plot() (LC4.10) For a variable that follows a normal distribution, within how many standard deviations of the mean are 95% of values? 1.645 1.960 2.580 3.210 None of the above References Field, A., Miles J., &amp; Field, Z. (2012). Discovering Statistics Using R. Sage Publications. Chang, W. (2020). R Graphics Cookbook, 2nd edition (https://r-graphics.org/) Grolemund, G. &amp; Wickham, H. (2020). R for Data Science (https://r4ds.had.co.nz/) "],["statistical-inference.html", "5 Statistical inference 5.1 If we knew it all 5.2 The Central Limit Theorem 5.3 Using what we actually know 5.4 Confidence Intervals for the Sample Mean Learning check References", " 5 Statistical inference You can download the corresponding R-Code here This chapter will provide you with a basic intuition on statistical inference. As marketing researchers we are usually faced with “imperfect” data in the sense that we cannot collect all the data we would like. Imagine you are interested in the average amount of time WU students spend listening to music every month. Ideally, we could force all WU students to fill out our survey. Realistically we will only be able to observe a small fraction of students (maybe 500 out of the \\(25.000+\\)). With the data from this small fraction at hand, we want to make an inference about the true average listening time of all WU students. We are going to start with the assumption that we know everything. That is, we first assume that we know all WU students’ listening times and analyze the distribution of the listening time in the entire population. Subsequently, we are going to look at the uncertainty that is introduced by only knowing some of the students’ listening times (i.e., a sample from the population) and how that influences our analysis. 5.1 If we knew it all Assume there are \\(25,000\\) students at WU and every single one has kindly provided us with the hours they listened to music in the past month. Using the code below, the rnorm() function will be used to generate 25,000 observations from a normal distribution with a mean of 50 and a standard deviation of 10. Although you might not be used to working with this type of simulated (i.e., synthetic) data, it is useful when explaining statistical concepts because the properties of the data are known. In this case, for example, we know the true mean (\\(49.93\\) hours) and the true standard deviation (SD = \\(10.02\\)) and thus we can easily summarize the entire distribution. Since the data follows a normal distribution, roughly 95% of the values lie within 2 standard deviations from the mean, as the following plot shows: library(tidyverse) library(ggplot2) library(latex2exp) set.seed(321) hours &lt;- rnorm(n = 25000, mean = 50, sd = 10) ggplot(data.frame(hours)) + geom_histogram(aes(hours), bins = 50, fill = &#39;white&#39;, color = &#39;black&#39;) + labs(title = &quot;Histogram of listening times&quot;, subtitle = TeX(sprintf(&quot;Population mean ($\\\\mu$) = %.2f; population standard deviation ($\\\\sigma$) = %.2f&quot;,round(mean(hours),2),round(sd(hours),2))), y = &#39;Number of students&#39;, x = &#39;Hours&#39;) + theme_bw() + geom_vline(xintercept = mean(hours), size = 1) + geom_vline(xintercept = mean(hours)+2*sd(hours), colour = &quot;red&quot;, size = 1) + geom_vline(xintercept = mean(hours)-2*sd(hours), colour = &quot;red&quot;, size = 1) + geom_segment(aes(x = mean(hours), y = 1100, yend = 1100, xend = (mean(hours) - 2*sd(hours))), lineend = &quot;butt&quot;, linejoin = &quot;round&quot;, size = 0.5, arrow = arrow(length = unit(0.2, &quot;inches&quot;))) + geom_segment(aes(x = mean(hours), y = 1100, yend = 1100, xend = (mean(hours) + 2*sd(hours))), lineend = &quot;butt&quot;, linejoin = &quot;round&quot;, size = 0.5, arrow = arrow(length = unit(0.2, &quot;inches&quot;))) + annotate(&quot;text&quot;, x = mean(hours) + 28, y = 1100, label = &quot;Mean + 2 * SD&quot; )+ annotate(&quot;text&quot;, x = mean(hours) -28, y = 1100, label = &quot;Mean - 2 * SD&quot; ) Notice the set.seed() function we used in the code above. By specifying the seed, we can make sure that the results will be the same as here on the website when you execute the code on your computer. Otherwise, you would end up with a slightly different data set since the observations are generated randomly from the normal distribution. In this case, we refer to all WU students as the population. In general, the population is the entire group we are interested in. This group does not have to necessarily consist of people, but could also be companies, stores, animals, etc.. The parameters of the distribution of population values (in hour case: “hours”) are called population parameters. As already mentioned, we do not usually know population parameters but use inferential statistics to infer them based on our sample from the population, i.e., we measure statistics from a sample (e.g., the sample mean \\(\\bar x\\)) to estimate population parameters (the population mean \\(\\mu\\)). Here, we will use the following notation to refer to either the population parameters or the sample statistic: Variable Sample statistic Population parameter Size n N Mean \\(\\bar{x} = {1 \\over n}\\sum_{i=1}^n x_i\\) \\(\\mu = {1 \\over N}\\sum_{i=1}^N x_i\\) Variance \\(s^2 = {1 \\over n-1}\\sum_{i=1}^n (x_i-\\bar{x})^2\\) \\(\\sigma^2 = {1 \\over N}\\sum_{i=1}^N (x_i-\\mu)^2\\) Standard deviation \\(s = \\sqrt{s^2}\\) \\(\\sigma = \\sqrt{\\sigma^2}\\) Standard error \\(SE_{\\bar x} = {s \\over \\sqrt{n}}\\) \\(\\sigma_{\\bar x} = {\\sigma \\over \\sqrt{n}}\\) Using this notation, \\(N\\) refers to the number of observations in the entire population (i.e., 25,000 in our example) and \\(n\\) refers to a subset of the population (i.e., a sample). As you can see, we will use different Greek letters to denote the sample statistics and the population parameters. Another difference, you might have noticed is that in the computation of the sample variance, we divide by \\(n-1\\), not \\(n\\). This is also know as the ‘Bessel’s correction’ and it corrects the bias in the estimation of the population variance based on a sample. More specifically, due to the correction, the corrected variance will be larger, since the denominator gets smaller by subtracting 1. This is done because the variance will most of the time be smaller when calculated using the sum of squared deviations from the sample mean, compared to using the sum of deviations from the population mean. The intuition is that, the larger your sample is, the more likely it is to get more population-representative points. Or, to put it another way, it is less likely to get a sample mean which results in differences which are too small. Thus, the larger your sample size \\(n\\), the less of a correction you need and, hence, the smaller the impact the correction component will be. 5.1.1 Sampling from a known population In the first step towards a realistic research setting, let us take one sample from this population and calculate the mean listening time. We can simply sample the row numbers of students and then subset the hours vector with the sampled row numbers. The sample() function will be used to draw a sample of size 100 from the population of 25,000 students, and one student can only be drawn once (i.e., replace = FALSE). The following plot shows the distribution of listening times for our sample. student_sample &lt;- sample(1:25000, size = 100, replace = FALSE) sample_1 &lt;- hours[student_sample] ggplot(data.frame(sample_1)) + geom_histogram(aes(x = sample_1), bins = 30, fill=&#39;white&#39;, color=&#39;black&#39;) + theme_bw() + xlab(&quot;Hours&quot;) + geom_vline(aes(xintercept = mean(sample_1)), size=1) + ggtitle(TeX(sprintf(&quot;Distribution of listening times ($\\\\bar{x}$ = %.2f)&quot;,round(mean(sample_1),2)))) Observe that in this first draw the mean (\\(\\bar x =\\) 49.67) is quite close to the actual mean (\\(\\mu =\\) 49.93). It seems like the sample mean is a decent estimate of the population mean. However, we could just be lucky this time and the next sample could turn out to have a different mean. Let us continue by looking at four additional random samples, consisting of 100 students each. The following plot shows the distribution of listening times for the four different samples from the population. It becomes clear that the mean is slightly different for each sample. This is referred to as sampling variation and it is completely fine to get a slightly different mean every time we take a sample. We just need to find a way of expressing the uncertainty associated with the fact that we only have data from one sample, because in a realistic setting you are most likely only going to have access to a single sample. So in order to make sure that the first draw is not just pure luck and the sample mean is in fact a good estimate for the population mean, let us take many (e.g., \\(20,000\\)) different samples from the population. That is, we repeatedly draw 100 students randomly from the population without replacement (that is, once a student has been drawn she or he is removed from the pool and cannot be drawn again) and calculate the mean of each sample. This will show us a range within which the sample mean of any sample we take is likely going to be. We are going to store the means of all the samples in a matrix and then plot a histogram of the means to observe the likely values. As you can see, on average the sample mean (“mean of sample means”) is extremely close to the population mean, despite only sampling \\(100\\) people at a time. This distribution of sample means is also referred to as sampling distribution of the sample mean. However, there is some uncertainty, and the means are slightly different for the different samples and range from 45.95 to 54.31. 5.1.2 Standard error of the mean Due to the variation in the sample means shown in our simulation, it is never possible to say exactly what the population mean is based on a single sample. However, even with a single sample we can infer a range of values within which the population mean is likely contained. In order to do so, notice that the sample means are approximately normally distributed. Another interesting fact is that the mean of sample means (i.e., 49.94) is roughly equal to the population mean (i.e., 49.93). This tells us already that generally the sample mean is a good approximation of the population mean. However, in order to make statements about the expected range of possible values, we would need to know the standard deviation of the sampling distribution. The formal representation of the standard deviation of the sample means is \\[ \\sigma_{\\bar x} = {\\sigma \\over \\sqrt{n}} \\] where \\(\\sigma\\) is the population SD and \\(n\\) is the sample size. \\(\\sigma_{\\bar{x}}\\) is referred to as the Standard Error of the mean and it expresses the variation in sample means we should expect given the number of observations in our sample and the population SD. That is, it provides a measure of how precisely we can estimate the population mean from the sample mean. 5.1.2.1 Sample size The first thing to notice here is that an increase in the number of observations per sample \\(n\\) decreases the range of possible sample means (i.e., the standard error). This makes intuitive sense. Think of the two extremes: sample size \\(1\\) and sample size \\(25,000\\). With a single person in the sample we do not gain a lot of information and our estimate is very uncertain, which is expressed through a larger standard deviation. Looking at the histogram at the beginning of this chapter showing the number of students for each of the listening times, clearly we would get values below \\(25\\) or above \\(75\\) for some samples. This is way farther away from the population mean than the minimum and the maximum of our \\(100\\) person samples. On the other hand, if we sample every student we get the population mean every time and thus we do not have any uncertainty (assuming the population does not change). Even if we only sample, say \\(24,000\\) people every time, we gain a lot of information about the population and the sample means would not be very different from each other since only up to \\(1,000\\) people are potentially different in any given sample. Thus, with larger (smaller) samples, there is less (more) uncertainty that the sample is a good approximation of the entire population. The following plot shows the relationship between the sample size and the standard error. Samples of increasing size are randomly drawn from the population of WU students. You can see that the standard error is decreasing with the number of observations. Figure 5.1: Relationship between the sample size and the standard error The following plots show the relationship between the sample size and the standard error in a slightly different way. The plots show the range of sample means resulting from the repeated sampling process for different sample sizes. Notice that the more students are contained in the individual samples, the less uncertainty there is when estimating the population mean from a sample (i.e., the possible values are more closely centered around the mean). So when the sample size is small, the sample mean can expected to be very different the next time we take a sample. When the sample size is large, we can expect the sample means to be more similar every time we take a sample. As you can see, the standard deviation of the sample means (\\(\\sigma_{\\bar x}\\)) decreases as the sample size increases as a consequence of the reduced uncertainty about the true sample mean when we take larger samples. 5.1.2.2 Population standard deviation A second factor determining the standard deviation of the distribution of sample means (\\(\\sigma_{\\bar x}\\)) is the standard deviation associated with the population parameter (\\(\\sigma\\)). Again, looking at the extremes illustrates this well. If all WU students listened to music for approximately the same amount of time, the samples would not differ much from each other. In other words, if the standard deviation in the population is lower, we expect the standard deviation of the sample means to be lower as well. This is illustrated by the following plots. In the first plot (panel A), we assume a much smaller population standard deviation (e.g., \\(\\sigma\\) = 1 instead of \\(\\sigma\\) = 10). Notice how the smaller (larger) the population standard deviation, the less (more) uncertainty there is when estimating the population mean from a sample (i.e., the possible values are more closely centered around the mean). So when the population SD is large, the sample mean can expected to be very different the next time we take a sample. When the population SD is small, we can expect the sample means to be more similar. 5.2 The Central Limit Theorem The attentive reader might have noticed that the population above was generated using a normal distribution function. It would be very restrictive if we could only analyze populations whose values are normally distributed. Furthermore, we are unable in reality to check whether the population values are normally distributed since we do not know the entire population. However, it turns out that the results generalize to many other distributions. This is described by the Central Limit Theorem. The central limit theorem states that if (1) the population distribution has a mean (there are examples of distributions that don’t have a mean , but we will ignore these here), and (2) we take a large enough sample, then the sampling distribution of the sample mean is approximately normally distributed. What exactly “large enough” means depends on the setting, but the interactive element at the end of this chapter illustrates how the sample size influences how accurately we can estimate the population parameters from the sample statistics. To illustrate this, let’s repeat the analysis above with a population from a gamma distribution. In the previous example, we assumed a normal distribution so it was more likely for a given student to spend around 50 hours per week listening to music. The following example depicts the case in which most students spend a similar amount of time listening to music, but there are a few students who very rarely listen to music, and some music enthusiasts with a very high level of listening time. In the following code, we will use the rgamma() function to generate 25,000 random observations from the gamma distribution. The gamma distribution is specified by shape and scale parameters instead of the mean and standard deviation of the normal distribution. Here is a histogram of the listening times in the population: set.seed(321) hours &lt;- rgamma(n = 25000, shape = 2, scale = 10) ggplot(data.frame(hours)) + geom_histogram(aes(x = hours), bins = 30, fill=&#39;white&#39;, color=&#39;black&#39;) + geom_vline(xintercept = mean(hours), size = 1) + theme_bw() + labs(title = &quot;Histogram of listening times&quot;, subtitle = TeX(sprintf(&quot;Population mean ($\\\\mu$) = %.2f; population standard deviation ($\\\\sigma$) = %.2f&quot;,round(mean(hours),2),round(sd(hours),2))), y = &#39;Number of students&#39;, x = &#39;Hours&#39;) The vertical black line represents the population mean (\\(\\mu\\)), which is 19.98 hours. The following plot depicts the histogram of listening times of four random samples from the population, each consisting of 100 students: As in the previous example, the mean is slightly different every time we take a sample due to sampling variation. Also note that the distribution of listening times no longer follows a normal distribution as a result of the fact that we now assume a gamma distribution for the population with a positive skew (i.e., lower values more likely, higher values less likely). Let’s see what happens to the distribution of sample means if we take an increasing number of samples, each drawn from the same gamma population: Two things are worth noting: (1) The more (hypothetical) samples we take, the more the sampling distribution approaches a normal distribution. (2) The mean of the sampling distribution of the sample mean (\\(\\mu_{\\bar x}\\)) is very similar to the population mean (\\(\\mu\\)). From this we can see that the mean of a sample is a good estimate of the population mean. In summary, it is important to distinguish two types of variation: (1) For each individual sample that we may take in real life, the standard deviation (\\(s\\)) is used to describe the natural variation in the data and the data may follow a non-normal distribution. (2) If we would (hypothetically!) repeat the study many times, the sampling distribution of the sample mean follows a normal distribution for large samples sizes (even if data from each individual study are non-normal), and the standard error (\\(\\sigma_{\\bar x}\\)) is used to describe the variation between study results. This is an important feature, since many statistical tests assume that the sampling distribution is normally distributed. As we have seen, this does not mean that the data from one particular sample needs to follow a normal distribution. 5.3 Using what we actually know So far we have assumed to know the population standard deviation (\\(\\sigma\\)). This an unrealistic assumption since we do not know the entire population. The best guess for the population standard deviation we have is the sample standard deviation, denoted \\(s\\). Thus, the standard error of the mean is usually estimated from the sample standard deviation: \\[ \\sigma_{\\bar x} \\approx SE_{\\bar x}={s \\over \\sqrt{n}} \\] Note that \\(s\\) itself is a sample estimate of the population parameter \\(\\sigma\\). This additional estimation introduces further uncertainty. You can see in the interactive element below that the sample SD, on average, provides a good estimate of the population SD. That is, the distribution of sample SDs that we get by drawing many samples is centered around the population value. Again, the larger the sample, the closer any given sample SD is going to be to the population parameter and we introduce less uncertainty. One conclusion is that your sample needs to be large enough to provide a reliable estimate of the population parameters. What exactly “large enough” means depends on the setting, but the interactive element illustrates how the remaining values change as a function of the sample size. We will not go into detail about the importance of random samples but basically the correctness of your estimate depends crucially on having a sample at hand that actually represents the population. Unfortunately, we will usually not notice if the sample is non-random. Our statistics are still a good approximation of “a” population parameter, namely the one for the population that we actually sampled but not the one we are interested in. To illustrate this uncheck the “Random Sample” box below. The new sample will be only from the top \\(50\\%\\) music listeners (but this generalizes to different types of non-random samples). 5.4 Confidence Intervals for the Sample Mean When we try to estimate parameters of populations (e.g., the population mean \\(\\mu\\)) from a sample, the average value from a sample (e.g., the sample mean \\(\\bar x\\)) only provides an estimate of what the real population parameter is. The next time you collect a sample of the same size, you could get a different average. This is sampling variation and it is completely fine to get a slightly different sample mean every time we take a sample as we have seen above. However, this inherent uncertainty about the true population parameter means that coming up with an exact estimate (i.e., a point estimate) for a particular population parameter is really difficult. That is why it is often informative to construct a range around that statistic (i.e., an interval estimate) that likely contains the population parameter with a certain level of confidence. That is, we construct an interval such that for a large share (say 95%) of the sample means we could potentially get, the population mean is within that interval. Let us consider one random sample of 100 students from our population above. set.seed(321) hours &lt;- rgamma(25000, shape = 2, scale = 10) set.seed(6789) sample_size &lt;- 100 student_sample &lt;- sample(1:25000, size = sample_size, replace = FALSE) hours_s &lt;- hours[student_sample] plot2 &lt;- ggplot(data.frame(hours_s)) + geom_histogram(aes(x = hours_s), bins = 30, fill=&#39;white&#39;, color=&#39;black&#39;) + theme_bw() + xlab(&quot;Hours&quot;) + geom_vline(aes(xintercept = mean(hours_s)), size=1) + ggtitle(TeX(sprintf(&quot;Random sample; $n$ = %d; $\\\\bar{x}$ = %.2f; $s$ = %.2f&quot;,sample_size,round(mean(hours_s),2),round(sd(hours_s),2)))) plot2 From the central limit theorem we know that the sampling distribution of the sample mean is approximately normal and we know that for the normal distribution, 95% of the values lie within about 2 standard deviations from the mean. Actually, it is not exactly 2 standard deviations from the mean. To get the exact number, we can use the quantile function for the normal distribution qnorm(): qnorm(0.975) ## [1] 1.959964 We use 0.975 (and not 0.95) to account for the probability at each end of the distribution (i.e., 2.5% at the lower end and 2.5% at the upper end). We can see that 95% of the values are roughly within 1.96 standard deviations from the mean. Since we know the sample mean (\\(\\bar x\\)) and we can estimate the standard deviation of the sampling distribution (\\(\\sigma_{\\bar x} \\approx {s \\over \\sqrt{n}}\\)), we can now easily calculate the lower and upper boundaries of our confidence interval as: \\[ CI_{lower} = {\\bar x} - z_{1-{\\alpha \\over 2}} * \\sigma_{\\bar x} \\\\ CI_{upper} = {\\bar x} + z_{1-{\\alpha \\over 2}} * \\sigma_{\\bar x} \\] Here, \\(\\alpha\\) refers to the significance level. You can find a detailed discussion of this point at the end of the next chapter. For now, we will adopt the widely accepted significance level of 5% and set \\(\\alpha\\) to 0.05. Thus, \\(\\pm z_{1-{\\alpha \\over 2}}\\) gives us the z-scores (i.e., number of standard deviations from the mean) within which range 95% of the probability density lies. Plugging in the values from our sample, we get: sample_mean &lt;- mean(hours_s) se &lt;- sd(hours_s)/sqrt(sample_size) ci_lower &lt;- sample_mean - qnorm(0.975)*se ci_upper &lt;- sample_mean + qnorm(0.975)*se ci_lower ## [1] 17.67089 ci_upper ## [1] 23.1592 such that if we collected 100 samples and computed the mean and confidence interval for each of them, in \\(95\\%\\) of the cases, the true population mean is going to be within this interval between 17.67 and 23.16. Note the correct interpretation of the confidence interval: If we’d collected 100 samples, calculated the mean and then calculated a confidence interval for that mean, then, for 95 of these samples, the confidence intervals we constructed would contain the true value of the mean in the population. This is illustrated in the plot below that shows the mean of the first 100 samples and their confidence intervals: Note that this does not mean that for a specific sample there is a \\(95\\%\\) chance that the population mean lies within its confidence interval. The statement depends on the large number of samples we do not actually draw in a real setting. You can view the set of all possible confidence intervals similarly to the sides of a coin or a die. If we throw a coin many times, we are going to observe head roughly half of the times. This does not, however, exclude the possibility of observing tails for the first 10 throws. Similarly, any specific confidence interval might or might not include the population mean but if we take many samples on average \\(95\\%\\) of the confidence intervals are going to include the population mean. Learning check (LC5.1) What is the correct interpretation of a confidence interval for a significance level of \\(\\alpha\\)=0.05? If we take 100 samples and calculate mean and confidence interval for each one of them, then the true population mean would be included in 95% of these intervals. If we take 100 samples and calculate mean and confidence interval for each one of them, then the true population mean would be included in 5% of these intervals. If we take 100 samples and calculate mean and confidence interval for each one of them, then the true population mean would be included in 100% of these intervals. For a given sample, there is a 95% chance that the true population mean lies within the confidence interval. (LC5.2) Which statements regarding standard error are TRUE? There is no connection between the standard deviation and the standard error. The standard error is a function of the sample size and the standard deviation. The standard error of the mean decreases as the sample size increases. The standard error of the mean increases as the standard deviation increases. None of the above (LC5.3) What is the correct definition for the standard error (\\(SE_{\\bar x}\\))? \\({s \\over \\sqrt{n}}\\) \\({s * \\sqrt{n}}\\) \\({\\sqrt{s^2} \\over \\sqrt{n}}\\) \\({\\sqrt{s} \\over n}\\) None of the above (LC5.4) Which of the following do you need to compute a confidence interval around a sample mean? The critical value of the test statistic given a certain level of confidence A continuous variable (i.e., at least measured at the interval level) The sample the mean The standard error None of the above (LC5.5) What is the correct definition for the confidence interval? \\(CI=\\bar{x} \\pm \\frac{z_{1-\\frac{a}{n}}}{\\sigma_{\\bar{x}}}\\) \\(CI=\\bar{x} * z_{1-\\frac{a}{n}}*\\sigma_{\\bar{x}}\\) \\(CI= z_{1-\\frac{a}{n}}*\\sigma_{\\bar{x}}-\\bar{x}\\) \\(CI=\\bar{x} \\pm z_{1-\\frac{a}{n}}*\\sigma_{\\bar{x}}\\) None of the above As a marketing manager at Spotify you wish to find the average listening time of your users. Based on a random sample of 180 users you found that the mean listening time for the sample is 7.34 hours per week and the standard deviation is 6.87 hours. (LC5.6) What is the 95% confidence interval for the mean listening time (the corresponding z-value for the 95% CI is 1.96)? [6.34;8.34] [7.15;7.55] [6.25;8.15] [6.54;8.54] None of the above References Field, A., Miles J., &amp; Field, Z. (2012). Discovering Statistics Using R. Sage Publications. Malhotra, N. K.(2010). Marketing Research: An Applied Orientation (6th. ed.). Prentice Hall. Vasishth, S. (2014). An introduction to statistical data analysis (lecture notes) "],["hypothesis-testing.html", "6 Hypothesis testing 6.1 Introduction 6.2 One sample t-test 6.3 Comparing two means 6.4 NHST considerations 6.5 Comparing several means 6.6 Non-parametric tests 6.7 Categorical data Learning check References", " 6 Hypothesis testing 6.1 Introduction You can download the corresponding R-Code here We test hypotheses because we are confined to taking samples – we rarely work with the entire population. In the previous chapter, we introduced the standard error (i.e., the standard deviation of a large number of hypothetical samples) as an estimate of how well a particular sample represents the population. We also saw how we can construct confidence intervals around the sample mean \\(\\bar x\\) by computing \\(SE_{\\bar x}\\) as an estimate of \\(\\sigma_{\\bar x}\\) using \\(s\\) as an estimate of \\(\\sigma\\) and calculating the 95% CI as \\(\\bar x \\pm 1.96 * SE_{\\bar x}\\). Although we do not know the true population mean (\\(\\mu\\)), we might have an hypothesis about it and this would tell us how the corresponding sampling distribution looks like. Based on the sampling distribution of the hypothesized population mean, we could then determine the probability of a given sample assuming that the hypothesis is true. Let us again begin by assuming we know the entire population using the example of music listening times among students from the previous example. As a reminder, the following plot shows the distribution of music listening times in the population of WU students. library(tidyverse) library(ggplot2) library(latex2exp) set.seed(321) hours &lt;- rgamma(n = 25000, shape = 2, scale = 10) ggplot(data.frame(hours)) + geom_histogram(aes(x = hours), bins = 30, fill = &quot;white&quot;, color = &quot;black&quot;) + geom_vline(xintercept = mean(hours), size = 1) + theme_bw() + labs(title = &quot;Histogram of listening times&quot;, subtitle = TeX(sprintf(&quot;Population mean ($\\\\mu$) = %.2f; population standard deviation ($\\\\sigma$) = %.2f&quot;, round(mean(hours), 2), round(sd(hours), 2))), y = &quot;Number of students&quot;, x = &quot;Hours&quot;) In this example, the population mean (\\(\\mu\\)) is equal to 19.98, and the population standard deviation \\(\\sigma\\) is equal to 14.15. 6.1.1 The null hypothesis Let us assume that we were planning to take a random sample of 50 students from this population and our hypothesis was that the mean listening time is equal to some specific value \\(\\mu_0\\), say \\(10\\). This would be our null hypothesis. The null hypothesis refers to the statement that is being tested and is usually a statement of the status quo, one of no difference or no effect. In our example, the null hypothesis would state that there is no difference between the true population mean \\(\\mu\\) and the hypothesized value \\(\\mu_0\\) (in our example \\(10\\)), which can be expressed as follows: \\[ H_0: \\mu = \\mu_0 \\] When conducting research, we are usually interested in providing evidence against the null hypothesis. If we then observe sufficient evidence against it and our estimate is said to be significant. If the null hypothesis is rejected, this is taken as support for the alternative hypothesis. The alternative hypothesis assumes that some difference exists, which can be expressed as follows: \\[ H_1: \\mu \\neq \\mu_0 \\] Accepting the alternative hypothesis in turn will often lead to changes in opinions or actions. Note that while the null hypothesis may be rejected, it can never be accepted based on a single test. If we fail to reject the null hypothesis, it means that we simply haven’t collected enough evidence against the null hypothesis to disprove it. In classical hypothesis testing, there is no way to determine whether the null hypothesis is true. Hypothesis testing provides a means to quantify to what extent the data from our sample is in line with the null hypothesis. In order to quantify the concept of “sufficient evidence” we look at the theoretical distribution of the sample means given our null hypothesis and the sample standard error. Using the available information we can infer the sampling distribution for our null hypothesis. Recall that the standard deviation of the sampling distribution (i.e., the standard error of the mean) is given by \\(\\sigma_{\\bar x}={\\sigma \\over \\sqrt{n}}\\), and thus can be computed as follows: mean_pop &lt;- mean(hours) sigma &lt;- sd(hours) #population standard deviation n &lt;- 50 #sample size standard_error &lt;- sigma/sqrt(n) #standard error standard_error ## [1] 2.001639 Since we know from the central limit theorem that the sampling distribution is normal for large enough samples, we can now visualize the expected sampling distribution if our null hypothesis was in fact true (i.e., if the was no difference between the true population mean and the hypothesized mean of 10). We also know that 95% of the probability is within 1.96 standard deviations from the mean. Values higher than that are rather unlikely, if our hypothesis about the population mean was indeed true. This is shown by the shaded area, also known as the “rejection region”. To test our hypothesis that the population mean is equal to \\(10\\), let us take a random sample from the population. set.seed(12567) H_0 &lt;- 10 student_sample &lt;- sample(1:25000, size = 50, replace = FALSE) music_listening_sample &lt;- data.frame(hours = hours[student_sample]) mean_sample &lt;- mean(music_listening_sample$hours) ggplot(music_listening_sample) + geom_histogram(aes(x = hours), fill = &quot;white&quot;, color = &quot;black&quot;, bins = 20) + theme_bw() + geom_vline(xintercept = mean_sample, color = &quot;black&quot;, size = 1) + labs(title = TeX(sprintf(&quot;Distribution of values in the sample ($n =$ %.0f, $\\\\bar{x} = $ %.2f, s = %.2f)&quot;, n, mean_sample, sd(music_listening_sample$hours))), x = &quot;Hours&quot;, y = &quot;Frequency&quot;) The mean listening time in the sample (black line) \\(\\bar x\\) is 18.59. We can already see from the graphic above that such a value is rather unlikely under the hypothesis that the population mean is \\(10\\). Intuitively, such a result would therefore provide evidence against our null hypothesis. But how could we quantify specifically how unlikely it is to obtain such a value and decide whether or not to reject the null hypothesis? Significance tests can be used to provide answers to these questions. 6.1.2 Statistical inference on a sample 6.1.2.1 Test statistic 6.1.2.1.1 z-scores Let’s go back to the sampling distribution above. We know that 95% of all values will fall within 1.96 standard deviations from the mean. So if we could express the distance between our sample mean and the null hypothesis in terms of standard deviations, we could make statements about the probability of getting a sample mean of the observed magnitude (or more extreme values). Essentially, we would like to know how many standard deviations (\\(\\sigma_{\\bar x}\\)) our sample mean (\\(\\bar x\\)) is away from the population mean if the null hypothesis was true (\\(\\mu_0\\)). This can be formally expressed as follows: \\[ \\bar x- \\mu_0 = z \\sigma_{\\bar x} \\] In this equation, z will tell us how many standard deviations the sample mean \\(\\bar x\\) is away from the null hypothesis \\(\\mu_0\\). Solving for z gives us: \\[ z = {\\bar x- \\mu_0 \\over \\sigma_{\\bar x}}={\\bar x- \\mu_0 \\over \\sigma / \\sqrt{n}} \\] This standardized value (or “z-score”) is also referred to as a test statistic. Let’s compute the test statistic for our example above: z_score &lt;- (mean_sample - H_0)/(sigma/sqrt(n)) z_score ## [1] 4.292454 To make a decision on whether the difference can be deemed statistically significant, we now need to compare this calculated test statistic to a meaningful threshold. In order to do so, we need to decide on a significance level \\(\\alpha\\), which expresses the probability of finding an effect that does not actually exist (i.e., Type I Error). You can find a detailed discussion of this point at the end of this chapter. For now, we will adopt the widely accepted significance level of 5% and set \\(\\alpha\\) to 0.05. The critical value for the normal distribution and \\(\\alpha\\) = 0.05 can be computed using the qnorm() function as follows: z_crit &lt;- qnorm(0.975) z_crit ## [1] 1.959964 We use 0.975 and not 0.95 since we are running a two-sided test and need to account for the rejection region at the other end of the distribution. Recall that for the normal distribution, 95% of the total probability falls within 1.96 standard deviations of the mean, so that higher (absolute) values provide evidence against the null hypothesis. Generally, we speak of a statistically significant effect if the (absolute) calculated test statistic is larger than the (absolute) critical value. We can easily check if this is the case in our example: abs(z_score) &gt; abs(z_crit) ## [1] TRUE Since the absolute value of the calculated test statistic is larger than the critical value, we would reject \\(H_0\\) and conclude that the true population mean \\(\\mu\\) is significantly different from the hypothesized value \\(\\mu_0 = 10\\). 6.1.2.1.2 t-statistic You may have noticed that the formula for the z-score above assumes that we know the true population standard deviation (\\(\\sigma\\)) when computing the standard deviation of the sampling distribution (\\(\\sigma_{\\bar x}\\)) in the denominator. However, the population standard deviation is usually not known in the real world and therefore represents another unknown population parameter which we have to estimate from the sample. We saw in the previous chapter that we usually use \\(s\\) as an estimate of \\(\\sigma\\) and \\(SE_{\\bar x}\\) as and estimate of \\(\\sigma_{\\bar x}\\). Intuitively, we should be more conservative regarding the critical value that we used above to assess whether we have a significant effect to reflect this uncertainty about the true population standard deviation. That is, the threshold for a “significant” effect should be higher to safeguard against falsely claiming a significant effect when there is none. If we replace \\(\\sigma_{\\bar x}\\) by it’s estimate \\(SE_{\\bar x}\\) in the formula for the z-score, we get a new test statistic (i.e, the t-statistic) with its own distribution (the t-distribution): \\[ t = {\\bar x- \\mu_0 \\over SE_{\\bar x}}={\\bar x- \\mu_0 \\over s / \\sqrt{n}} \\] Here, \\(\\bar X\\) denotes the sample mean and \\(s\\) the sample standard deviation. The t-distribution has more probability in its “tails”, i.e. farther away from the mean. This reflects the higher uncertainty introduced by replacing the population standard deviation by its sample estimate. Intuitively, this is particularly relevant for small samples, since the uncertainty about the true population parameters decreases with increasing sample size. This is reflected by the fact that the exact shape of the t-distribution depends on the degrees of freedom, which is the sample size minus one (i.e., \\(n-1\\)). To see this, the following graph shows the t-distribution with different degrees of freedom for a two-tailed test and \\(\\alpha = 0.05\\). The grey curve shows the normal distribution. Notice that as \\(n\\) gets larger, the t-distribution gets closer and closer to the normal distribution, reflecting the fact that the uncertainty introduced by \\(s\\) is reduced. To summarize, we now have an estimate for the standard deviation of the distribution of the sample mean (i.e., \\(SE_{\\bar x}\\)) and an appropriate distribution that takes into account the necessary uncertainty (i.e., the t-distribution). Let us now compute the t-statistic according to the formula above: SE &lt;- (sd(music_listening_sample$hours)/sqrt(n)) t_score &lt;- (mean_sample - H_0)/SE t_score ## [1] 4.84204 Notice that the value of the t-statistic is higher compared to the z-score (4.29). This can be attributed to the fact that by using the \\(s\\) as and estimate of \\(\\sigma\\), we underestimate the true population standard deviation. Hence, the critical value would need to be larger to adjust for this. This is what the t-distribution does. Let us compute the critical value from the t-distribution with n - 1degrees of freedom. df = n - 1 t_crit &lt;- qt(0.975, df = df) t_crit ## [1] 2.009575 Again, we use 0.975 and not 0.95 since we are running a two-sided test and need to account for the rejection region at the other end of the distribution. Notice that the new critical value based on the t-distributionis larger, to reflect the uncertainty when estimating \\(\\sigma\\) from \\(s\\). Now we can see that the calculated test statistic is still larger than the critical value. abs(t_score) &gt; abs(t_crit) ## [1] TRUE The following graphics shows that the calculated test statistic (red line) falls into the rejection region so that in our example, we would reject the null hypothesis that the true population mean is equal to \\(10\\). Decision: Reject \\(H_0\\), given that the calculated test statistic is larger than critical value. Something to keep in mind here is the fact the test statistic is a function of the sample size. This, as \\(n\\) gets large, the test statistic gets larger as well and we are more likely to find a significant effect. This reflects the decrease in uncertainty about the true population mean as our sample size increases. 6.1.2.2 P-values In the previous section, we computed the test statistic, which tells us how close our sample is to the null hypothesis. The p-value corresponds to the probability that the test statistic would take a value as extreme or more extreme than the one that we actually observed, assuming that the null hypothesis is true. It is important to note that this is a conditional probability: we compute the probability of observing a sample mean (or a more extreme value) conditional on the assumption that the null hypothesis is true. The pnorm()function can be used to compute this probability. It is the cumulative probability distribution function of the `normal distribution. Cumulative probability means that the function returns the probability that the test statistic will take a value less than or equal to the calculated test statistic given the degrees of freedom. However, we are interested in obtaining the probability of observing a test statistic larger than or equal to the calculated test statistic under the null hypothesis (i.e., the p-value). Thus, we need to subtract the cumulative probability from 1. In addition, since we are running a two-sided test, we need to multiply the probability by 2 to account for the rejection region at the other side of the distribution. p_value &lt;- 2 * (1 - pt(abs(t_score), df = df)) p_value ## [1] 0.00001326885 This value corresponds to the probability of observing a mean equal to or larger than the one we obtained from our sample, if the null hypothesis was true. As you can see, this probability is very low. A small p-value signals that it is unlikely to observe the calculated test statistic under the null hypothesis. To decide whether or not to reject the null hypothesis, we would now compare this value to the level of significance (\\(\\alpha\\)) that we chose for our test. For this example, we adopt the widely accepted significance level of 5%, so any test results with a p-value &lt; 0.05 would be deemed statistically significant. Note that the p-value is directly related to the value of the test statistic. The relationship is such that the higher (lower) the value of the test statistic, the lower (higher) the p-value. Decision: Reject \\(H_0\\), given that the p-value is smaller than 0.05. 6.1.2.3 Confidence interval For a given statistic calculated for a sample of observations (e.g., listening times), a 95% confidence interval can be constructed such that in 95% of samples, the true value of the true population mean will fall within its limits. If the parameter value specified in the null hypothesis (here \\(10\\)) does not lie within the bounds, we reject \\(H_0\\). Building on what we learned about confidence intervals in the previous chapter, the 95% confidence interval based on the t-distribution can be computed as follows: \\[ CI_{lower} = {\\bar x} - t_{1-{\\alpha \\over 2}} * SE_{\\bar x} \\\\ CI_{upper} = {\\bar x} + t_{1-{\\alpha \\over 2}} * SE_{\\bar x} \\] It is easy to compute this interval manually: ci_lower &lt;- (mean_sample) - qt(0.975, df = df) * SE ci_upper &lt;- (mean_sample) + qt(0.975, df = df) * SE ci_lower ## [1] 15.02606 ci_upper ## [1] 22.15783 The interpretation of this interval is as follows: if we would (hypothetically) take 100 samples and calculated the mean and confidence interval for each of them, then the true population mean would be included in 95% of these intervals. The CI is informative when reporting the result of your test, since it provides an estimate of the uncertainty associated with the test result. From the test statistic or the p-value alone, it is not easy to judge in which range the true population parameter is located. The CI provides an estimate of this range. Decision: Reject \\(H_0\\), given that the parameter value from the null hypothesis (\\(10\\)) is not included in the interval. To summarize, you can see that we arrive at the same conclusion (i.e., reject \\(H_0\\)), irrespective if we use the test statistic, the p-value, or the confidence interval. However, keep in mind that rejecting the null hypothesis does not prove the alternative hypothesis (we can merely provide support for it). Rather, think of the p-value as the chance of obtaining the data we’ve collected assuming that the null hypothesis is true. You should report the confidence interval to provide an estimate of the uncertainty associated with your test results. 6.1.3 Choosing the right test The test statistic, as we have seen, measures how close the sample is to the null hypothesis and often follows a well-known distribution (e.g., normal, t, or chi-square). To select the correct test, various factors need to be taken into consideration. Some examples are: On what scale are your variables measured (categorical vs. continuous)? Do you want to test for relationships or differences? If you test for differences, how many groups would you like to test? For parametric tests, are the assumptions fulfilled? The previous discussion used a one sample t-test as an example, which requires that variable is measured on an interval or ratio scale. If you are confronted with other settings, the following flow chart provides a rough guideline on selecting the correct test: Flowchart for selecting an appropriate test (source: McElreath, R. (2016): Statistical Rethinking, p. 2) For a detailed overview over the different type of tests, please also refer to this overview by the UCLA. 6.1.3.1 Parametric vs. non-parametric tests A basic distinction can be made between parametric and non-parametric tests. Parametric tests require that variables are measured on an interval or ratio scale and that the sampling distribution follows a known distribution. Non-Parametric tests on the other hand do not require the sampling distribution to be normally distributed (a.k.a. “assumption free tests”). These tests may be used when the variable of interest is measured on an ordinal scale or when the parametric assumptions do not hold. They often rely on ranking the data instead of analyzing the actual scores. By ranking the data, information on the magnitude of differences is lost. Thus, parametric tests are more powerful if the sampling distribution is normally distributed. In this chapter, we will first focus on parametric tests and cover non-parametric tests later. 6.1.3.2 One-tailed vs. two-tailed test For some tests you may choose between a one-tailed test versus a two-tailed test. The choice depends on the hypothesis you specified, i.e., whether you specified a directional or a non-directional hypotheses. In the example above, we used a non-directional hypothesis. That is, we stated that the mean is different from the comparison value \\(\\mu_0\\), but we did not state the direction of the effect. A directional hypothesis states the direction of the effect. For example, we might test whether the population mean is smaller than a comparison value: \\[ H_0: \\mu \\ge \\mu_0 \\\\ H_1: \\mu &lt; \\mu_0 \\] Similarly, we could test whether the population mean is larger than a comparison value: \\[ H_0: \\mu \\le \\mu_0 \\\\ H_1: \\mu &gt; \\mu_0 \\] Connected to the decision of how to phrase the hypotheses (directional vs. non-directional) is the choice of a one-tailed test versus a two-tailed test. Let’s first think about the meaning of a one-tailed test. Using a significance level of 0.05, a one-tailed test means that 5% of the total area under the probability distribution of our test statistic is located in one tail. Thus, under a one-tailed test, we test for the possibility of the relationship in one direction only, disregarding the possibility of a relationship in the other direction. In our example, a one-tailed test could test either if the mean listening time is significantly larger or smaller compared to the control condition, but not both. Depending on the direction, the mean listening time is significantly larger (smaller) if the test statistic is located in the top (bottom) 5% of its probability distribution. The following graph shows the critical values that our test statistic would need to surpass so that the difference between the population mean and the comparison value would be deemed statistically significant. It can be seen that under a one-sided test, the rejection region is at one end of the distribution or the other. In a two-sided test, the rejection region is split between the two tails. As a consequence, the critical value of the test statistic is smaller using a one-tailed test, meaning that it has more power to detect an effect. Having said that, in most applications, we would like to be able catch effects in both directions, simply because we can often not rule out that an effect might exist that is not in the hypothesized direction. For example, if we would conduct a one-tailed test for a mean larger than some specified value but the mean turns out to be substantially smaller, then testing a one-directional hypothesis ($H_0: _0 $) would not allow us to conclude that there is a significant effect because there is not rejection at this end of the distribution. As we have seen, the process of hypothesis testing consists of various steps: Formulate null and alternative hypotheses Select an appropriate test Choose the level of significance (\\(\\alpha\\)) Descriptive statistics and data visualization Conduct significance test Report results and draw a marketing conclusion In the following, we will go through the individual steps using examples for different tests. 6.2 One sample t-test The example we used in the introduction was an example of the one sample t-test and we computed all statistics by hand to explain the underlying intuition. When you conduct hypothesis tests using R, you do not need to calculate these statistics by hand, since there are build-in routines to conduct the steps for you. Let us use the same example again to see how you would conduct hypothesis tests in R. 1. Formulate null and alternative hypotheses The null hypothesis states that there is no difference between the true population mean \\(\\mu\\) and the hypothesized value (i.e., \\(10\\)), while the alternative hypothesis states the opposite: \\[ H_0: \\mu = 10 \\\\ H_1: \\mu \\neq 10 \\] 2. Select an appropriate test Because we would like to test if the mean of a variable is different from a specified threshold, the one-sample t-test is appropriate. The assumptions of the test are 1) that the variable is measured using an interval or ratio scale, and 2) that the sampling distribution is normal. Both assumptions are met since 1) listening time is a ratio scale, and 2) we deem the sample size (n = 50) large enough to assume a normal sampling distribution according to the central limit theorem. 3. Choose the level of significance We choose the conventional 5% significance level. 4. Descriptive statistics and data visualization Provide descriptive statistics using the describe() function: library(psych) psych::describe(student_sample) From this, we can already see that the mean is different from the hypothesized value. The question however remains, whether this difference is significantly different, given the sample size and the variability in the data. Since we only have one continuous variable, we can visualize the distribution in a histogram. ggplot(music_listening_sample) + geom_histogram(aes(x = hours), fill = &quot;white&quot;, color = &quot;black&quot;, bins = 20) + theme_bw() + labs(title = &quot;Distribution of values in the sample&quot;, x = &quot;Hours&quot;, y = &quot;Frequency&quot;) 5. Conduct significance test In the beginning of the chapter, we saw, how you could conduct significance test by hand. However, R has built-in routines that you can use to conduct the analyses. The t.test() function can be used to conduct the test. To test if the listening time among WU students was 10, you can use the following code: H_0 &lt;- 10 t.test(music_listening_sample$hours, mu = H_0, alternative = &quot;two.sided&quot;) ## ## One Sample t-test ## ## data: music_listening_sample$hours ## t = 4.842, df = 49, p-value = 0.00001327 ## alternative hypothesis: true mean is not equal to 10 ## 95 percent confidence interval: ## 15.02606 22.15783 ## sample estimates: ## mean of x ## 18.59194 Note that if you would have stated a directional hypothesis (i.e., the mean is either greater or smaller than 10 hours), you could easily amend the code to conduct a one sided test by changing the argument alternativefrom 'two.sided' to either 'less' or 'greater'. Note that you could also combine the results from the statistical test and the visualization using the ggstatsplot package as follows. library(ggstatsplot) gghistostats( data = music_listening_sample, # dataframe from which variable is to be taken x = hours, # numeric variable whose distribution is of interest title = &quot;Distribution of listening times&quot;, # title for the plot caption = &quot;Notes: Test based on a random sample of 50 students.&quot;, type = &quot;parametric&quot;, # one sample t-test conf.level = 0.95, # changing confidence level for effect size bar.measure = &quot;mix&quot;, # what does the bar length denote test.value = 10, # default value is 0 test.value.line = TRUE, # display a vertical line at test value effsize.type = &quot;d&quot;, # display effect size (Cohen&#39;s d in output) test.value.color = &quot;#0072B2&quot;, # color for the line for test value centrality.para = &quot;mean&quot;, # which measure of central tendency is to be plotted centrality.color = &quot;darkred&quot;, # decides color for central tendency line binwidth = 2, # binwidth value (experiment) messages = FALSE, # turn off the messages bf.message = FALSE ) You may nice some additional output in this plot related to the measure of effect size (Cohen’s d). Don’t worry about it at this stage, we will come back to this later in this chapter. 6. Report results and draw a marketing conclusion Note that the results are the same as above, when we computed the test by hand. You could summarize the results as follows: On average, the listening times in our sample were different form 10 hours per month (Mean = 18.59 hours, SE = 1.77). This difference was significant t(49) = 4.842, p &lt; .05 (95% CI = [15.03; 22.16]). Based on this evidence, we can conclude that the mean in our sample is significantly lower compared to the hypothesized population mean of \\(10\\) hours, providing evidence against the null hypothesis. Note that in the reporting above, the number 49 in parenthesis refers to the degrees of freedom that are available from the output. 6.3 Comparing two means In the one-sample test above, we tested the hypothesis that the population mean has some specific value \\(\\mu_0\\) using data from only one sample. In marketing (as in many other disciplines), you will often be confronted with a situation where you wish to compare the means of two groups. For example, you may conduct an experiment and randomly split your sample into two groups, one of which receives a treatment (experimental group) while the other doesn’t (control group). In this case, the units (e.g., participants, products) in each group are different (‘between-subjects design’) and the samples are said to be independent. Hence, we would use a independent-means t-test. If you run an experiment with two experimental conditions and the same units (e.g., participants, products) were observed in both experimental conditions, the sample is said to be dependent in the sense that you have the same units in each group (‘within-subjects design’). In this case, we would need to conduct an dependent-means t-test. Both tests are described in the following sections, beginning with the independent-means t-test. 6.3.1 Independent-means t-test Using an independent-means t-test, we can compare the means of two possibly different populations. It is, for example, quite common for online companies to test new service features by running an experiment and randomly splitting their website visitors into two groups: one is exposed to the website with the new feature (experimental group) and the other group is not exposed to the new feature (control group). This is a typical A/B-Test scenario. As an example, imagine that a music streaming service would like to introduce a new playlist feature that let’s their users access playlists created by other users. The goal is to analyze how the new service feature impacts the listening time of users. The service randomly splits a representative subset of their users into two groups and collects data about their listening times over one month. Let’s create a data set to simulate such a scenario. hours_a_b &lt;- read.table(&quot;https://raw.githubusercontent.com/IMSMWU/Teaching/master/MRDA2017/hours_a_b.csv&quot;, sep = &quot;,&quot;, header = TRUE) head(hours_a_b) This data set contains two variables: the variable hours indicates the music listening times (in hours) and the variable group indicates from which group the observation comes, where ‘A’ refers to the control group (with the standard service) and ‘B’ refers to the experimental group (with the new playlist feature). Let’s first look at the descriptive statistics by group using the describeBy function: library(psych) describeBy(hours_a_b$hours, hours_a_b$group) ## ## Descriptive statistics by group ## group: A ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 98 18.11 12.1 15 16.88 10.38 2 65 63 1.08 1.21 1.22 ## ------------------------------------------------------------ ## group: B ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 112 28.5 17.97 24.5 26.56 15.57 1 83 82 0.96 0.82 1.7 From this, we can already see that there is a difference in means between groups A and B. We can also see that the number of observations is different, as is the standard deviation. The question that we would like to answer is whether there is a significant difference in mean listening times between the groups. Remember that different users are contained in each group (‘between-subjects design’) and that the observations in one group are independent of the observations in the other group. Before we will see how you can easily conduct an independent-means t-test, let’s go over some theory first. 6.3.1.1 Theory As a starting point, let us label the unknown population mean of group A (control group) in our experiment \\(\\mu_1\\), and that of group B (experimental group) \\(\\mu_2\\). In this setting, the null hypothesis would state that the mean in group A is equal to the mean in group B: \\[ H_0: \\mu_1=\\mu_2 \\] This is equivalent to stating that the difference between the two groups (\\(\\delta\\)) is zero: \\[ H_0: \\mu_1 - \\mu_2=0=\\delta \\] That is, \\(\\delta\\) is the new unknown population parameter, so that the null and alternative hypothesis become: \\[ H_0: \\delta = 0 \\\\ H_1: \\delta \\ne 0 \\] Remember that we usually don’t have access to the entire population so that we can not observe \\(\\delta\\) and have to estimate is from a sample statistic, which we define as \\(d = \\bar x_1-\\bar x_2\\), i.e., the difference between the sample means from group a (\\(\\bar x_1\\)) and group b (\\(\\bar x_2\\)). But can we really estimate \\(d\\) from \\(\\delta\\)? Remember from the previous chapter, that we could estimate \\(\\mu\\) from \\(\\bar x\\), because if we (hypothetically) take a larger number of samples, the distribution of the means of these samples (the sampling distribution) will be normally distributed and its mean will be (in the limit) equal to the population mean. It turns out that we can use the same underlying logic here. The above samples were drawn from two different populations with \\(\\mu_1\\) and \\(\\mu_2\\). Let us compute the difference in means between these two populations: delta_pop &lt;- mean(hours_population_1) - mean(hours_population_2) delta_pop ## [1] -7.422855 This means that the true difference between the mean listening times of groups a and b is -7.42. Let us now repeat the exercise from the previous chapter: let us repeatedly draw a large number of \\(20,000\\) random samples of 100 users from each of these populations, compute the difference (i.e., \\(d\\), our estimate of \\(\\delta\\)), store the difference for each draw and create a histogram of \\(d\\). set.seed(321) hours_population_1 &lt;- rgamma(25000, shape = 2, scale = 10) hours_population_2 &lt;- rgamma(25000, shape = 2.5, scale = 11) samples &lt;- 20000 mean_delta &lt;- matrix(NA, nrow = samples) for (i in 1:samples) { student_sample &lt;- sample(1:25000, size = 100, replace = FALSE) mean_delta[i, ] &lt;- mean(hours_population_1[student_sample]) - mean(hours_population_2[student_sample]) } ggplot(data.frame(mean_delta)) + geom_histogram(aes(x = mean_delta), bins = 30, fill = &quot;white&quot;, color = &quot;black&quot;) + theme_bw() + theme(legend.title = element_blank()) + geom_vline(aes(xintercept = mean(mean_delta)), size = 1) + xlab(&quot;d&quot;) + ggtitle(TeX(sprintf(&quot;%d samples; $d_{\\\\bar{x}}$ = %.2f&quot;, samples, round(mean(mean_delta), 2)))) This gives us the sampling distribution of the mean differences between the samples. You will notice that this distribution follows a normal distribution and is centered around the true difference between the populations. This means that, on average, the difference between two sample means \\(d\\) is a good estimate of \\(\\delta\\). In our example, the difference between \\(\\bar x_1\\) and \\(\\bar x_2\\) is: mean_x1 &lt;- mean(hours_a_b[hours_a_b$group == &quot;A&quot;, &quot;hours&quot;]) mean_x1 ## [1] 18.11224 mean_x2 &lt;- mean(hours_a_b[hours_a_b$group == &quot;B&quot;, &quot;hours&quot;]) mean_x2 ## [1] 28.5 d &lt;- mean_x1 - mean_x2 d ## [1] -10.38776 Now that we have \\(d\\) as an estimate of \\(\\delta\\), how can we find out if the observed difference is significantly different from the null hypothesis (i.e., \\(\\delta = 0\\))? Recall from the previous section, that the standard deviation of the sampling distribution \\(\\sigma_{\\bar x}\\) (i.e., the standard error) gives us indication about the precision of our estimate. Further recall that the standard error can be calculated as \\(\\sigma_{\\bar x}={\\sigma \\over \\sqrt{n}}\\). So how can we calculate the standard error of the difference between two population means? According to the variance sum law, to find the variance of the sampling distribution of differences, we merely need to add together the variances of the sampling distributions of the two populations that we are comparing. To find the standard error, we only need to take the square root of the variance (because the standard error is the standard deviation of the sampling distribution and the standard deviation is the square root of the variance), so that we get: \\[ \\sigma_{\\bar x_1-\\bar x_2} = \\sqrt{{\\sigma_1^2 \\over n_1}+{\\sigma_2^2 \\over n_2}} \\] But recall that we don’t actually know the true population standard deviation, so we use \\(SE_{\\bar x_1-\\bar x_2}\\) as an estimate of \\(\\sigma_{\\bar x_1-\\bar x_2}\\): \\[ SE_{\\bar x_1-\\bar x_2} = \\sqrt{{s_1^2 \\over n_1}+{s_2^2 \\over n_2}} \\] Hence, for our example, we can calculate the standard error as follows: n1 &lt;- 98 n2 &lt;- 112 s1 &lt;- var(hours_a_b[hours_a_b$group == &quot;A&quot;, &quot;hours&quot;]) s1 ## [1] 146.4924 s2 &lt;- var(hours_a_b[hours_a_b$group == &quot;B&quot;, &quot;hours&quot;]) s2 ## [1] 322.9189 SE_x1_x2 &lt;- sqrt(s1/n1 + s2/n2) SE_x1_x2 ## [1] 2.092373 Recall from above that we can calculate the t-statistic as: \\[ t= {\\bar x - \\mu_0 \\over {s \\over \\sqrt{n}}} \\] Exchanging \\(\\bar x\\) for \\(d\\), we get \\[ t= {(\\bar{x}_1 - \\bar{x}_2) - (\\mu_1 - \\mu_2) \\over {\\sqrt{{s_1^2 \\over n_1}+{s_2^2 \\over n_2}}}} \\] Note that according to our hypothesis \\(\\mu_1-\\mu_2=0\\), so that we can calculate the t-statistic as: t_score &lt;- d/SE_x1_x2 t_score ## [1] -4.964581 Following the example of our one sample t-test above, we would now need to compare this calculated test statistic to a critical value in order to assess if \\(d\\) is sufficiently far away from the null hypothesis to be statistically significant. To do this, we would need to know the exact t-distribution, which depends on the degrees of freedom. The problem is that deriving the degrees of freedom in this case is not that obvious. If we were willing to assume that \\(\\sigma_1=\\sigma_2\\), the correct t-distribution has \\(n_1 -1 + n_2-1\\) degrees of freedom (i.e., the sum of the degrees of freedom of the two samples). However, because in real life we don not know if \\(\\sigma_1=\\sigma_2\\), we need to account for this additional uncertainty. We will not go into detail here, but R automatically uses a sophisticated approach to correct the degrees of freedom called the Welch’s correction, as we will see in the subsequent application. 6.3.1.2 Application The section above explained the theory behind the independent-means t-test and showed how to compute the statistics manually. Obviously you don’t have to compute these statistics by hand in this section shows you how to conduct an independent-means t-test in R using the example from above. 1. Formulate null and alternative hypotheses We wish to analyze whether there is a significant difference in music listening times between groups A and B. So our null hypothesis is that the means from the two populations are the same (i.e., there is no difference), while the alternative hypothesis states the opposite: \\[ H_0: \\mu_1=\\mu_2\\\\ H_1: \\mu_1 \\ne \\mu_2 \\] 2. Select an appropriate test Since we have a ratio scaled variable (i.e., listening times) and two independent groups, where the mean of one sample is independent of the group of the second sample (i.e., the groups contain different units), the independent-means t-test is appropriate. 3. Choose the level of significance We choose the conventional 5% significance level. 4. Descriptive statistics and data visualization We can compute the descriptive statistics for each group separately, using the describeBy() function: library(psych) describeBy(hours_a_b$hours, hours_a_b$group) ## ## Descriptive statistics by group ## group: A ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 98 18.11 12.1 15 16.88 10.38 2 65 63 1.08 1.21 1.22 ## ------------------------------------------------------------ ## group: B ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 112 28.5 17.97 24.5 26.56 15.57 1 83 82 0.96 0.82 1.7 This already shows us that the mean between groups A and B are different. We can visualize the data using a boxplot and a histogram. ggplot(hours_a_b, aes(x = group, y = hours)) + geom_boxplot() + geom_jitter(alpha = 0.2, color = &quot;red&quot;) + labs(x = &quot;Group&quot;, y = &quot;Listening time (hours)&quot;) + ggtitle(&quot;Boxplot of listening times&quot;) + theme_bw() ggplot(hours_a_b, aes(hours)) + geom_histogram(col = &quot;black&quot;, fill = &quot;darkblue&quot;) + labs(x = &quot;Listening time (hours)&quot;, y = &quot;Frequency&quot;) + ggtitle(&quot;Histogram of listening times&quot;) + facet_wrap(~group) + theme_bw() 5. Conduct significance test To conduct the independent means t-test, we can use the t.test() function: t.test(hours ~ group, data = hours_a_b, mu = 0, alternative = &quot;two.sided&quot;, conf.level = 0.95, var.equal = FALSE) ## ## Welch Two Sample t-test ## ## data: hours by group ## t = -4.9646, df = 195.73, p-value = 0.000001494 ## alternative hypothesis: true difference in means between group A and group B is not equal to 0 ## 95 percent confidence interval: ## -14.514246 -6.261264 ## sample estimates: ## mean in group A mean in group B ## 18.11224 28.50000 Again, we could combine the results of the statistical test and the visualization using the ggstatsplot package. library(ggstatsplot) ggbetweenstats( data = hours_a_b, plot.type = &quot;box&quot;, x = group, # 2 groups y = hours , type = &quot;p&quot;, # default effsize.type = &quot;d&quot;, # display effect size (Cohen&#39;s d in output) messages = FALSE, bf.message = FALSE, mean.ci = TRUE, title = &quot;Mean listening times for different groups&quot; ) 6. Report results and draw a marketing conclusion The results showed that listening times were higher in the experimental group (Mean = 28.50, SE = 1.70) compared to the control group (Mean = 18.11, SE = 1.22). This means that the listening times were 10.39 hours higher on average in the experimental group, compared to the control group. An independent-means t-test showed that this difference is significant t(195.73) = 4.96, p &lt; .05 (95% CI = [6.26, 14.51]). 6.3.2 Dependent-means t-test While the independent-means t-test is used when different units (e.g., participants, products) were assigned to the different condition, the dependent-means t-test is used when there are two experimental conditions and the same units (e.g., participants, products) were observed in both experimental conditions. Imagine, for example, a slightly different experimental setup for the above experiment. Imagine that we do not assign different users to the groups, but that a sample of 100 users gets to use the music streaming service with the new feature for one month and we compare the music listening times of these users during the month of the experiment with the listening time in the previous month. Let us generate data for this example: hours_a_b_paired &lt;- read.table(&quot;https://raw.githubusercontent.com/IMSMWU/Teaching/master/MRDA2017/hours_a_b_paired.csv&quot;, sep = &quot;,&quot;, header = TRUE) head(hours_a_b_paired) Note that the data set has almost the same structure as before only that we know have two variables representing the listening times of each user in the month before the experiment and during the month of the experiment when the new feature was tested. 6.3.2.1 Theory In this case, we want to test the hypothesis that there is no difference in mean the mean listening times between the two months. This can be expressed as follows: \\[ H_0: \\mu_D = 0 \\\\ \\] Note that the hypothesis only refers to one population, since both observations come from the same units (i.e., users). To use consistent notation, we replace \\(\\mu_D\\) with \\(\\delta\\) and get: \\[ H_0: \\delta = 0 \\\\ H_1: \\delta \\neq 0 \\] where \\(\\delta\\) denotes the difference between the observed listening times from the two consecutive months of the same users. As is the previous example, since we do not observe the entire population, we estimate \\(\\delta\\) based on the sample using \\(d\\), which is the difference in mean listening time between the two months for our sample. Note that we assume that everything else (e.g., number of new releases) remained constant over the two month to keep it simple. We can show as above that the sampling distribution follows a normal distribution with a mean that is (in the limit) the same as the population mean. This means, again, that the difference in sample means is a good estimate for the difference in population means. Let’s compute a new variable \\(d\\), which is the difference between two month. hours_a_b_paired$d &lt;- hours_a_b_paired$hours_a - hours_a_b_paired$hours_b head(hours_a_b_paired) Note that we now have a new variable, which is the difference in listening times (in hours) between the two months. The mean of this difference is: mean_d &lt;- mean(hours_a_b_paired$d) mean_d ## [1] -11.65 Again, we use \\(SE_{\\bar x}\\) as an estimate of \\(\\sigma_{\\bar x}\\): \\[ SE_{\\bar d}={s \\over \\sqrt{n}} \\] Hence, we can compute the standard error as: n &lt;- nrow(hours_a_b_paired) SE_d &lt;- sd(hours_a_b_paired$d)/sqrt(n) SE_d ## [1] 2.151503 The test statistic is therefore: \\[ t = {\\bar d- \\mu_0 \\over SE_{\\bar d}} \\] on 99 (i.e., n-1) degrees of freedom. Now we can compute the t-statistic as follows: t_score &lt;- mean_d/SE_d t_score ## [1] -5.41482 qt(0.975, df = 99) ## [1] 1.984217 Note that in the case of the dependent-means t-test, we only base our hypothesis on one population and hence there is only one population variance. This is because in the dependent sample test, the observations come from the same observational units (i.e., users). Hence, there is no unsystematic variation due to potential differences between users that were assigned to the experimental groups. This means that the influence of unobserved factors (unsystematic variation) relative to the variation due to the experimental manipulation (systematic variation) is not as strong in the dependent-means test compared to the independent-means test and we don’t need to correct for differences in the population variances. 6.3.2.2 Application Again, we don’t have to compute all this by hand since the t.test(...) function can be used to do it for us. Now we have to use the argument paired=TRUE to let R know that we are working with dependent observations. 1. Formulate null and alternative hypotheses We would like to the test if there is a difference in music listening times between the two consecutive months, so our null hypothesis is that there is no difference, while the alternative hypothesis states the opposite: \\[ H_0: \\mu_D = 0 \\\\ H_0: \\mu_D \\ne 0 \\] 2. Select an appropriate test Since we have a ratio scaled variable (i.e., listening times) and two observations of the same group of users (i.e., the groups contain the same units), the dependent-means t-test is appropriate. 3. Choose the level of significance We choose the conventional 5% significance level. 4. Descriptive statistics and data visualization We can compute the descriptive statistics for each month separately, using the describe() function: library(psych) describe(hours_a_b_paired) This already shows us that the mean between the two months are different. We can visiualize the data using a plot of means, boxplot, and a histogram. To plot the data, we need to do some restructuring first, since the variables are now stored in two different columns (“hours_a” and “hours_b”). This is also known as the “wide” format. To plot the data we need all observations to be stored in one variable. This is also known as the “long” format. We can use the melt(...) function from the reshape2package to “melt” the two variable into one column to plot the data. library(reshape2) hours_a_b_paired_long &lt;- melt(hours_a_b_paired[, c(&quot;hours_a&quot;, &quot;hours_b&quot;)]) names(hours_a_b_paired_long) &lt;- c(&quot;group&quot;, &quot;hours&quot;) head(hours_a_b_paired_long) Now we are ready to plot the data: ggplot(hours_a_b_paired_long, aes(x = group, y = hours)) + geom_boxplot() + geom_jitter(alpha = 0.2, color = &quot;red&quot;) + labs(x = &quot;Group&quot;, y = &quot;Listening time (hours)&quot;) + ggtitle(&quot;Boxplot of listening times&quot;) + theme_bw() ggplot(hours_a_b_paired_long, aes(hours)) + geom_histogram(col = &quot;black&quot;, fill = &quot;darkblue&quot;) + labs(x = &quot;Listening time (hours)&quot;, y = &quot;Frequency&quot;) + ggtitle(&quot;Histogram of listening times&quot;) + facet_wrap(~group) + theme_bw() 5. Conduct significance test To conduct the dependent means t-test, we can use the t.test() function with the argument paired = TRUE: t.test(hours_a_b_paired$hours_a, hours_a_b_paired$hours_b, mu = 0, alternative = &quot;two.sided&quot;, conf.level = 0.95, paired = TRUE) ## ## Paired t-test ## ## data: hours_a_b_paired$hours_a and hours_a_b_paired$hours_b ## t = -5.4148, df = 99, p-value = 0.00000043 ## alternative hypothesis: true mean difference is not equal to 0 ## 95 percent confidence interval: ## -15.919048 -7.380952 ## sample estimates: ## mean difference ## -11.65 Again, we could combine the results of the statistical test and the visualization using the ggstatsplot package. library(ggstatsplot) ggwithinstats(data = hours_a_b_paired_long, x = group, y = hours, path.point = FALSE, path.mean = TRUE, title = &quot;Mean listening times for different treatments&quot;, messages = FALSE, bf.message = FALSE, mean.ci = TRUE, effsize.type = &quot;d&quot; # display effect size (Cohen&#39;s d in output) ) 6. Report results and draw a marketing conclusion On average, the same users used the service more when it included the new feature (M = 29.58, SE = 1.84) compared to the service without the feature (M = 17.93, SE = 1.21). This difference was significant t(99) = 5.41, p &lt; .05 (95% CI = [7.38, 15.91]). 6.4 NHST considerations 6.4.1 Type I and Type II Errors When choosing the level of significance (\\(\\alpha\\)). It is important to note that the choice of the significance level affects the type 1 and type 2 error: Type I error: When we believe there is a genuine effect in our population, when in fact there isn’t. Probability of type I error (\\(\\alpha\\)) = level of significance. Type II error: When we believe that there is no effect in the population, when in fact there is. This following table shows the possible outcomes of a test (retain vs. reject \\(H_0\\)), depending on whether \\(H_0\\) is true or false in reality.   Retain H0 Reject H0 H0 is true Correct decision:1-α (probability of correct retention); Type 1 error: α (level of significance) H0 is false Type 2 error:β (type 2 error rate) Correct decision:1-β (power of the test) 6.4.2 Significance level, sample size, power, and effect size When you plan to conduct an experiment, there are some factors that are under direct control of the researcher: Significance level (\\(\\alpha\\)): The probability of finding an effect that does not genuinely exist. Sample size (n): The number of observations in each group of the experimental design. Unlike α and n, which are specified by the researcher, the magnitude of β depends on the actual value of the population parameter. In addition, β is influenced by the effect size (e.g., Cohen’s d), which can be used to determine a standardized measure of the magnitude of an observed effect. The following parameters are affected more indirectly: Power (1-β): The probability of finding an effect that does genuinely exists. Effect size (d): Standardized measure of the effect size under the alternate hypothesis. Although β is unknown, it is related to α. For example, if we would like to be absolutely sure that we do not falsely identify an effect which does not exist (i.e., make a type I error), this means that the probability of identifying an effect that does exist (i.e., 1-β) decreases and vice versa. Thus, an extremely low value of α (e.g., α = 0.0001) will result in intolerably high β errors. A common approach is to set α=0.05 and β=0.80. Unlike the t-value of our test, the effect size (d) is unaffected by the sample size and can be categorized as follows (see Cohen, J. 1988): 0.2 (small effect) 0.5 (medium effect) 0.8 (large effect) In order to test more subtle effects (smaller effect sizes), you need a larger sample size compared to the test of more obvious effects. In this paper, you can find a list of examples for different effect sizes and the number of observations you need to reliably find an effect of that magnitude. Although the exact effect size is unknown before the experiment, you might be able to make a guess about the effect size (e.g., based on previous studies). If you wish to obtain a standardized measure of the effect, you may compute the effect size (Cohen’s d) using the cohensD() function from the lsr package. Using the examples from the independent-means t-test above, we would use: library(lsr) cohensD(hours ~ group, data = hours_a_b) ## [1] 0.6696301 According to the thresholds defined above, this effect would be judged to be a small-medium effect. For the dependent-means t-test, we would use: cohensD(hours_a_b_paired$hours_a, hours_a_b_paired$hours_b, method = &quot;paired&quot;) ## [1] 0.541482 According to the thresholds defined above, this effect would also be judged to be a small-medium effect. When constructing an experimental design, your goal should be to maximize the power of the test while maintaining an acceptable significance level and keeping the sample as small as possible. To achieve this goal, you may use the pwr package, which let’s you compute n, d, alpha, and power. You only need to specify three of the four input variables to get the fourth. For example, what sample size do we need (per group) to identify an effect with d = 0.6, α = 0.05, and power = 0.8: library(pwr) pwr.t.test(d = 0.6, sig.level = 0.05, power = 0.8, type = c(&quot;two.sample&quot;), alternative = c(&quot;two.sided&quot;)) ## ## Two-sample t test power calculation ## ## n = 44.58577 ## d = 0.6 ## sig.level = 0.05 ## power = 0.8 ## alternative = two.sided ## ## NOTE: n is number in *each* group Or we could ask, what is the power of our test with 51 observations in each group, d = 0.6, and α = 0.05: pwr.t.test(n = 51, d = 0.6, sig.level = 0.05, type = c(&quot;two.sample&quot;), alternative = c(&quot;two.sided&quot;)) ## ## Two-sample t test power calculation ## ## n = 51 ## d = 0.6 ## sig.level = 0.05 ## power = 0.850985 ## alternative = two.sided ## ## NOTE: n is number in *each* group 6.4.3 P-values, stopping rules and p-hacking From my experience, students tend to place a lot of weight on p-values when interpreting their research findings. It is therefore important to note some points that hopefully help to put the meaning of a “significant” vs. “insignificant” test result into perspective. So what does a significant test result actually tell us? The importance of an effect? → No, significance depends on sample size. That the null hypothesis is false? → No, it is always false. That the null hypothesis is true? → No, it is never true. It is important to understand what the p-value actually tells you. A p-value of &lt; 0.05 means that the probability of finding a difference of at least the observed magnitude is less than 5% if the null hypothesis was true. In other words, if there really wouldn’t be a difference between the groups, it tells you the probability of observing the difference that you found in your data (or more extreme differences). The following points provide some guidance on how to interpret significant and insignificant test results. Significant result Even if the probability of the effect being a chance result is small (e.g., less than .05) it doesn’t necessarily mean that the effect is important. Very small and unimportant effects can turn out to be statistically significant if the sample size is large enough. Insignificant result If the probability of the effect occurring by chance is large (greater than .05), the alternative hypothesis is rejected. However, this does not mean that the null hypothesis is true. Although an effect might not be large enough to be anything other than a chance finding, it doesn’t mean that the effect is zero. In fact, two random samples will always have slightly different means that would deemed to be statistically significant if the samples were large enough. Thus, you should not base your research conclusion on p-values alone! It is also crucial to determine the sample size before you run the experiment or before you start your analysis. Why? Consider the following example: You run an experiment After each respondent you analyze the data and look at the mean difference between the two groups with a t-test You stop when you have a significant effect This is called p-hacking and should be avoided at all costs. Assuming that both groups come from the same population (i.e., there is no difference in the means): What is the likelihood that the result will be significant at some point? In other words, what is the likelihood that you will draw the wrong conclusion from your data that there is an effect, while there is none? This is shown in the following graph using simulated data - the color red indicates significant test results that arise although there is no effect (i.e., false positives). Figure 4.10: p-hacking (red indicates false positives) 6.5 Comparing several means You can download the corresponding R-Code here 6.5.1 Introduction In the previous section we learned how to compare two means using a t-test. The t-test has some limitations since it only lets you compare two means and you can only use it with one independent variable. However, often we would like to compare means from 3 or more groups. In addition, there may be instances in which you manipulate more than one independent variable. For these applications, ANOVA (ANalysis Of VAriance) can be used. Hence, to conduct ANOVA you need: A metric dependent variable (i.e., measured using an interval or ratio scale) One or more non-metric (categorical) independent variables (also called factors) A treatment is a particular combination of factor levels, or categories. So-called one-way ANOVA is used when there is only one categorical variable (factor). In this case, a treatment is the same as a factor level. N-way ANOVA is used with two or more factors. Note that we are only going to talk about a single independent variable in the context of ANOVA on this website. If you have multiple independent variables please refer to the chapter on Regression. Let’s use an example to see how ANOVA works. Similar to the previous example, imagine that the music streaming service experiments with a recommender system and manipulates the intensity of personalized recommendations using three levels: ‘low’, ‘medium’, and ‘high’. The service randomly assigns 100 users to each condition and records the listening times in hours in the following week. As always, we load and inspect the data first: hours_abc &lt;- read.table(&quot;https://raw.githubusercontent.com/IMSMWU/MRDA2018/master/data/hours_abc.dat&quot;, sep = &quot;\\t&quot;, header = TRUE) #read in data hours_abc$group &lt;- factor(hours_abc$group, levels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), labels = c(&quot;low&quot;, &quot;medium&quot;, &quot;high&quot;)) #convert grouping variable to factor str(hours_abc) #inspect data ## &#39;data.frame&#39;: 300 obs. of 3 variables: ## $ hours: int 18 13 3 13 20 18 18 10 11 20 ... ## $ group: Factor w/ 3 levels &quot;low&quot;,&quot;medium&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ index: int 1 2 3 4 5 6 7 8 9 10 ... The null hypothesis, typically, is that all means are equal (non-directional hypothesis). Hence, in our case: \\[H_0: \\mu_1 = \\mu_2 = \\mu_3\\] The alternative hypothesis is simply that the means are not all equal, i.e., \\[H_1: \\textrm{Means are not all equal}\\] If you wanted to put this in mathematical notation, you could also write: \\[H_1: \\exists {i,j}: {\\mu_i \\ne \\mu_j} \\] To get a first impression if there are any differences in listening times across the experimental groups, we use the describeBy(...) function from the psych package: library(psych) describeBy(hours_abc$hours, hours_abc$group) #inspect data ## ## Descriptive statistics by group ## group: low ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 100 14.34 4.62 14 14.36 4.45 3 25 22 -0.03 -0.32 0.46 ## ------------------------------------------------------------ ## group: medium ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 100 24.7 5.81 25 24.79 5.93 12 42 30 0.05 0.2 0.58 ## ------------------------------------------------------------ ## group: high ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 100 34.99 6.42 34.5 35.02 6.67 17 50 33 -0.05 -0.23 0.64 In addition, you should visualize the data using appropriate plots. Appropriate plots in this case would be a plot of means, including the 95% confidence interval around the mean, or a boxplot. #Plot of mean library(Rmisc) library(ggplot2) mean_data &lt;- summarySE(hours_abc, measurevar=&quot;hours&quot;, groupvars=c(&quot;group&quot;)) ggplot(mean_data,aes(x = group, y = hours)) + geom_bar(position=position_dodge(1), colour=&quot;black&quot;, fill = &quot;#CCCCCC&quot;, stat=&quot;identity&quot;, width = 0.65) + geom_errorbar(position=position_dodge(.9), width=.15, aes(ymin=hours-ci, ymax=hours+ci)) + theme_bw() + labs(x = &quot;Group&quot;, y = &quot;Average number of hours&quot;, title = &quot;Average number of hours by group&quot;)+ theme_bw() + theme(plot.title = element_text(hjust = 0.5,color = &quot;#666666&quot;)) Figure 5.1: Plot of means ggplot(hours_abc,aes(x = group, y = hours)) + geom_boxplot() + geom_jitter(colour=&quot;red&quot;, alpha = 0.1) + theme_bw() + labs(x = &quot;Group&quot;, y = &quot;Average number of hours&quot;, title = &quot;Average number of hours by group&quot;)+ theme_bw() + theme(plot.title = element_text(hjust = 0.5,color = &quot;#666666&quot;)) Figure 1.5: Boxplot Note that ANOVA is an omnibus test, which means that we test for an overall difference between groups. Hence, the test will only tell you if the group means are different, but it won’t tell you exactly which groups are different from another. So why don’t we then just conduct a series of t-tests for all combinations of groups (i.e., “low” vs. “medium”, “low” vs. “high”, “medium” vs. “high”)? The reason is that if we assume each test to be independent, then there is a 5% probability of falsely rejecting the null hypothesis (Type I error) for each test. In our case: “low” vs. “medium” (α = 0.05) “low” vs. “high” (α = 0.05) “medium” vs. “high” (α = 0.05) This means that the overall probability of making a Type I error is 1-(0.953) = 0.143, since the probability of no Type I error is 0.95 for each of the three tests. Consequently, the Type I error probability would be 14.3%, which is above the conventional standard of 5%. This is also known as the family-wise or experiment-wise error. 6.5.2 Decomposing variance The basic concept underlying ANOVA is the decomposition of the variance in the data. There are three variance components which we need to consider: We calculate how much variability there is overall between scores: Total sum of squares (SST) We then calculate how much of this variability can be explained by the model we fit to the data (i.e., how much variability is due to the experimental manipulation): Model sum of squares (SSM) … and how much cannot be explained (i.e., how much variability is due to individual differences in performance): Residual sum of squares (SSR) The following figure shows the different variance components using a generalized data matrix: The total variation is determined by the variation between the categories (due to our experimental manipulation) and the within-category variation that is due to extraneous factors (e.g., unobserved factors such as the promotion of artists on a social network): \\[SS_T= SS_M+SS_R\\] To get a better feeling how this relates to our data set, we can look at the data in a slightly different way. Specifically, we can use the dcast(...) function from the reshape2 package to convert the data to wide format: library(reshape2) dcast(hours_abc, index ~ group, value.var = &quot;hours&quot;) In this example, X1 from the generalized data matrix above would refer to the factor level “low”, X2 to the level “medium”, and X3 to the level “high”. Y11 refers to the first data point in the first row (i.e., “13”), Y12 to the second data point in the first row (i.e., “21”), etc.. The grand mean (\\(\\overline{Y}\\)) and the category means (\\(\\overline{Y}_c\\)) can be easily computed: mean(hours_abc$hours) #grand mean ## [1] 24.67667 by(hours_abc$hours, hours_abc$group, mean) #category mean ## hours_abc$group: low ## [1] 14.34 ## ------------------------------------------------------------ ## hours_abc$group: medium ## [1] 24.7 ## ------------------------------------------------------------ ## hours_abc$group: high ## [1] 34.99 To see how each variance component can be derived, let’s look at the data again. The following graph shows the individual observations by experimental group: Figure 1.8: Sum of Squares 6.5.2.1 Total sum of squares To compute the total variation in the data, we consider the difference between each observation and the grand mean. The grand mean is the mean over all observations in the data set. The vertical lines in the following plot measure how far each observation is away from the grand mean: Figure 1.9: Total Sum of Squares The formal representation of the total sum of squares (SST) is: \\[ SS_T= \\sum_{i=1}^{N} (Y_i-\\bar{Y})^2 \\] This means that we need to subtract the grand mean from each individual data point, square the difference, and sum up over all the squared differences. Thus, in our example, the total sum of squares can be calculated as: \\[ \\begin{align} SS_T =&amp;(13−24.67)^2 + (14−24.67)^2 + … + (2−24.67)^2\\\\ &amp;+(21−24.67)^2 + (18-24.67)^2 + … + (17−24.67)^2\\\\ &amp;+(30−24.67)^2 + (37−24.67)^2 + … + (28−24.67)^2\\\\ &amp;=30855.64 \\end{align} \\] You could also compute this in R using: SST &lt;- sum((hours_abc$hours - mean(hours_abc$hours))^2) SST ## [1] 30855.64 For the subsequent analyses, it is important to understand the concept behind the degrees of freedom (df). Remember that in order to estimate a population value from a sample, we need to hold something in the population constant. In ANOVA, the df are generally one less than the number of values used to calculate the SS. For example, when we estimate the population mean from a sample, we assume that the sample mean is equal to the population mean. Then, in order to estimate the population mean from the sample, all but one scores are free to vary and the remaining score needs to be the value that keeps the population mean constant. Thus, the degrees of freedom of an estimate can also be thought of as the number of independent pieces of information that went into calculating the estimate. In our example, we used all 300 observations to calculate the sum of square, so the total degrees of freedom (dfT) are: \\[\\begin{equation} \\begin{split} df_T = N-1=300-1=299 \\end{split} \\tag{6.1} \\end{equation}\\] Why do we subtract 1 from the number of items when computing the degrees of freedom? As mentioned above, the degrees of freedom refer to the number of values that are free to vary in a data set. To understand what this means, imagine that we try to estimate the mean hours of music listening in a population and that mean is 20 hours. We could take different samples from the population and we assume that the sample mean is equal to the population mean. Imagine, we only take three small samples of 3 students each: i) 19, 20, 21, ii) 18, 20, 22, iii) 15, 20, 25. Once you have chosen the first two values in each set, the third item cannot be chosen freely (i.e., it is fixed) because it needs to be the value that gets you to the population mean. Hence, only the first two values are ‘free to vary’. You can select 19 + 20 or 15 + 25, but once you have chosen the first two values, you must choose a particular value that will give you the population mean you are looking for (i.e., 20 hours). In this case, the degrees of freedom for each set of three numbers is two. 6.5.2.2 Model sum of squares Now we know that there are 30855.64 units of total variation in our data. Next, we compute how much of the total variation can be explained by the differences between groups (i.e., our experimental manipulation). To compute the explained variation in the data, we consider the difference between the values predicted by our model for each observation (i.e., the group mean) and the grand mean. The group mean refers to the mean value within the experimental group. The vertical lines in the following plot measure how far the predicted value for each observation (i.e., the group mean) is away from the grand mean: Figure 1.11: Model Sum of Squares The formal representation of the model sum of squares (SSM) is: \\[ SS_M= \\sum_{j=1}^{c} n_j(\\bar{Y}_j-\\bar{Y})^2 \\] where c denotes the number of categories (experimental groups). This means that we need to subtract the grand mean from each group mean, square the difference, and sum up over all the squared differences. Thus, in our example, the model sum of squares can be calculated as: \\[ \\begin{align} SS_M &amp;= 100*(15.47−24.67)^2 + 100*(24.88−24.67)^2 + 100*(33.66−24.67)^2 \\\\ &amp;= 21321.21 \\end{align} \\] You could also compute this manually in R using: SSM &lt;- sum(100 * (by(hours_abc$hours, hours_abc$group, mean) - mean(hours_abc$hours))^2) SSM ## [1] 21321.21 In this case, we used the three group means to calculate the sum of squares, so the model degrees of freedom (dfM) are: \\[ df_M= c-1=3-1=2 \\] 6.5.2.3 Residual sum of squares Lastly, we calculate the amount of variation that cannot be explained by our model. In ANOVA, this is the sum of squared distances between what the model predicts for each data point (i.e., the group means) and the observed values. In other words, this refers to the amount of variation that is caused by extraneous factors, such as differences between product characteristics of the products in the different experimental groups. The vertical lines in the following plot measure how far each observation is away from the group mean: Figure 1.13: Residual Sum of Squares The formal representation of the residual sum of squares (SSR) is: \\[ SS_R= \\sum_{j=1}^{c} \\sum_{i=1}^{n} ({Y}_{ij}-\\bar{Y}_{j})^2 \\] This means that we need to subtract the group mean from each individual observation, square the difference, and sum up over all the squared differences. Thus, in our example, the model sum of squares can be calculated as: \\[ \\begin{align} SS_R =&amp; (13−14.34)^2 + (14−14.34)^2 + … + (2−14.34)^2 \\\\ +&amp;(21−24.7)^2 + (18−24.7)^2 + … + (17−24.7)^2 \\\\ +&amp; (30−34.99)^2 + (37−34.99)^2 + … + (28−34.99)^2 \\\\ =&amp; 9534.43 \\end{align} \\] You could also compute this in R using: SSR &lt;- sum((hours_abc$hours - rep(by(hours_abc$hours, hours_abc$group, mean), each = 100))^2) SSR ## [1] 9534.43 In this case, we used the 10 values for each of the SS for each group, so the residual degrees of freedom (dfR) are: \\[ \\begin{align} df_R=&amp; (n_1-1)+(n_2-1)+(n_3-1) \\\\ =&amp;(100-1)+(100-1)+(100-1)=297 \\end{align} \\] 6.5.2.4 Effect strength Once you have computed the different sum of squares, you can investigate the effect strength. \\(\\eta^2\\) is a measure of the variation in Y that is explained by X: \\[ \\eta^2= \\frac{SS_M}{SS_T}=\\frac{21321.21}{30855.64}=0.69 \\] To compute this in R: eta &lt;- SSM/SST eta ## [1] 0.6909988 The statistic can only take values between 0 and 1. It is equal to 0 when all the category means are equal, indicating that X has no effect on Y. In contrast, it has a value of 1 when there is no variability within each category of X but there is some variability between categories. You can think of it as the equivalent to the R-squared statistic in regression model since it also represents a measure of the share of explained variance. 6.5.2.5 Test of significance How can we determine whether the effect of X on Y is significant? First, we calculate the fit of the most basic model (i.e., the grand mean) Then, we calculate the fit of the “best” model (i.e., the group means) A good model should fit the data significantly better than the basic model The F-statistic, or F-ratio, compares the amount of systematic variance in the data to the amount of unsystematic variance The F-statistic uses the ratio of mean square related to X (explained variation) and the mean square related to the error (unexplained variation): \\[\\frac{SS_M}{SS_R}\\] However, since these are summed values, their magnitude is influenced by the number of scores that were summed. For example, to calculate SSM we only used the sum of 3 values (the group means), while we used 300 values to calculate SST and SSR, respectively. Thus, we calculate the average sum of squares (“mean square”) to compare the average amount of systematic vs. unsystematic variation by dividing the SS values by the degrees of freedom associated with the respective statistic. Mean square due to X: \\[ MS_M= \\frac{SS_M}{df_M}=\\frac{SS_M}{c-1}=\\frac{21321.21}{(3-1)} \\] Mean square due to error: \\[ MS_R= \\frac{SS_R}{df_R}=\\frac{SS_R}{N-c}=\\frac{9534.43}{(300-3)} \\] Now, we compare the amount of variability explained by the model (experiment), to the error in the model (variation due to extraneous variables). If the model explains more variability than it can’t explain, then the experimental manipulation has had a significant effect on the outcome (DV). The F-ratio can be derived as follows: \\[ F= \\frac{MS_M}{MS_R}=\\frac{\\frac{SS_M}{c-1}}{\\frac{SS_R}{N-c}}=\\frac{\\frac{21321.21}{(3-1)}}{\\frac{9534.43}{(300-3)}}=332.08 \\] You can easily compute this in R: f_ratio &lt;- (SSM/2)/(SSR/297) f_ratio ## [1] 332.0806 Similar to the t-test, the outcome of the significance test will be one of the following: If the null hypothesis of equal category means is not rejected, then the independent variable does not have a significant effect on the dependent variable If the null hypothesis is rejected, then the effect of the independent variable is significant To decide which one it is, we proceed as with the t-test. That is, we calculate the test statistic and compare it to the critical value for a given level of confidence. If the calculated test statistic is larger than the critical value, we can reject the null hypothesis of equal group means and conclude that the independent variable has a significant effect on our outcome. In this case, however, the test statistic follows a F distribution (instead of the t-distribution) with (m = c – 1) and (n = N – c) degrees of freedom. This means that the shape of the F-distribution depends on the degrees of freedom. In this case, the shape depends on the degrees of freedom associated with the numerator and denominator used to compute the F-ratio. The following figure shows the shape of the F-distribution for different degrees of freedom: The F distribution For 2 and 297 degrees of freedom, the critical value of F is 3.026 for α=0.05. As usual, you can either look up these values in a table or use the appropriate function in R: f_crit &lt;- qf(0.95, df1 = 2, df2 = 297) #critical value f_crit ## [1] 3.026153 f_ratio &gt; f_crit #test if calculated test statistic is larger than critical value ## [1] TRUE The output tells us that the calculated test statistic exceeds the critical value. We can also show the test result visually: Visual depiction of the test result Thus, we conclude that because FCAL = 332.08 &gt; FCR = 3.03, H0 is rejected! Now we can interpret our findings as follows: one or more of the differences between means are statistically significant. Remember: The ANOVA tests for an overall difference in means between the groups. It doesn’t tell us where the differences between groups lie, e.g., whether group “low” is different from “medium” or “high” is different from “medium” or “high” is different from “low”. To find out which group means exactly differ, we need to use post-hoc procedures, which are described below. However, when the ANOVA tells you that the there is no differences between the means, then you also shouldn’t proceed to conduct post-hoc tests. In other words, you should only proceed to conduct post-hoc tests when you found a significant overall effect in your ANOVA. Finally, you should report your findings in an appropriate way. You could do this by saying: There was a significant effect of playlists and personalized recommendations on listening times, F(2,297) = 332.08, p &lt; 0.05, \\(\\eta^2\\) = 0.69. As usual, you don’t have to compute these statistics manually! Luckily, there is a function for ANOVA in R, which does the above calculations for you as we will see in the next section. 6.5.3 One-way ANOVA 6.5.3.1 Basic ANOVA As already indicated, one-way ANOVA is used when there is only one categorical variable (factor). Before conducting ANOVA, you need to check if the assumptions of the test are fulfilled. The assumptions of ANOVA are discussed in the following sections. Independence of observations The observations in the groups should be independent. Because we randomly assigned the listeners to the experimental conditions, this assumption can be assumed to be met. Distributional assumptions ANOVA is relatively immune to violations to the normality assumption when sample sizes are large due to the Central Limit Theorem. However, if your sample is small (i.e., n &lt; 30 per group) you may nevertheless want to check the normality of your data, e.g., by using the Shapiro-Wilk test or QQ-Plot. In our example, we have 100 observations in each group which is plenty but let’s create another example with only 10 observations in each group. In the latter case we cannot rely on the Central Limit Theorem and we should test the normality of our data. This can be done using the Shapiro-Wilk Test, which has the Null Hypothesis that the data is normally distributed. Hence, an insignificant test results means that the data can be assumed to be approximately normally distributed: set.seed(321) hours_fewobs &lt;- data.frame(hours = c(rnorm(10, 20, 5), rnorm(10, 40, 5), rnorm(10, 60, 5)), group = c(rep(&quot;low&quot;, 10), rep(&quot;medium&quot;, 10), rep(&quot;high&quot;, 10))) by(hours_fewobs$hours, hours_fewobs$group, shapiro.test) ## hours_fewobs$group: high ## ## Shapiro-Wilk normality test ## ## data: dd[x, ] ## W = 0.9595, p-value = 0.7801 ## ## ------------------------------------------------------------ ## hours_fewobs$group: low ## ## Shapiro-Wilk normality test ## ## data: dd[x, ] ## W = 0.91625, p-value = 0.3267 ## ## ------------------------------------------------------------ ## hours_fewobs$group: medium ## ## Shapiro-Wilk normality test ## ## data: dd[x, ] ## W = 0.91486, p-value = 0.3161 Since the test result is insignificant for all groups, we can conclude that the data approximately follow a normal distribution. We could also test the distributional assumptions visually using a Q-Q plot (i.e., quantile-quantile plot). This plot can be used to assess if a set of data plausibly came from some theoretical distribution such as the Normal distribution. Since this is just a visual check, it is somewhat subjective. But it may help us to judge if our assumption is plausible, and if not, which data points contribute to the violation. A Q-Q plot is a scatterplot created by plotting two sets of quantiles against one another. If both sets of quantiles came from the same distribution, we should see the points forming a line that’s roughly straight. In other words, Q-Q plots take your sample data, sort it in ascending order, and then plot them versus quantiles calculated from a theoretical distribution. Quantiles are often referred to as “percentiles” and refer to the points in your data below which a certain proportion of your data fall. Recall, for example, the standard Normal distribution with a mean of 0 and a standard deviation of 1. Since the 50th percentile (or 0.5 quantile) is 0, half the data lie below 0. The 95th percentile (or 0.95 quantile), is about 1.64, which means that 95 percent of the data lie below 1.64. The 97.5th quantile is about 1.96, which means that 97.5% of the data lie below 1.96. In the Q-Q plot, the number of quantiles is selected to match the size of your sample data. To create the Q-Q plot for the normal distribution, you may use the qqnorm() function, which takes the data to be tested as an argument. Using the qqline() function subsequently on the data creates the line on which the data points should fall based on the theoretical quantiles. If the individual data points deviate a lot from this line, it means that the data is not likely to follow a normal distribution. qqnorm(hours_fewobs[hours_fewobs$group == &quot;low&quot;, ]$hours) qqline(hours_fewobs[hours_fewobs$group == &quot;low&quot;, ]$hours) Figure 6.1: Q-Q plot 1 qqnorm(hours_fewobs[hours_fewobs$group == &quot;medium&quot;, ]$hours) qqline(hours_fewobs[hours_fewobs$group == &quot;medium&quot;, ]$hours) Figure 6.2: Q-Q plot 2 qqnorm(hours_fewobs[hours_fewobs$group == &quot;high&quot;, ]$hours) qqline(hours_fewobs[hours_fewobs$group == &quot;high&quot;, ]$hours) Figure 6.3: Q-Q plot 3 The Q-Q plots suggest an approximately Normal distribution. If the assumption had been violated, you might consider transforming your data or resort to a non-parametric test. Homogeneity of variance Let’s return to our original data set with 100 observations in each group for the rest of the analysis. You can test the homogeneity of variances in R using Levene’s test: library(car) leveneTest(hours ~ group, data = hours_abc, center = mean) ## Levene&#39;s Test for Homogeneity of Variance (center = mean) ## Df F value Pr(&gt;F) ## group 2 4.9678 0.007548 ** ## 297 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 The null hypothesis of the test is that the group variances are equal. Thus, if the test result is significant it means that the variances are not equal. If we cannot reject the null hypothesis (i.e., the group variances are not significantly different), we can proceed with the ANOVA as follows: aov &lt;- aov(hours ~ group, data = hours_abc) summary(aov) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## group 2 21321 10661 332.1 &lt;2e-16 *** ## Residuals 297 9534 32 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 You can see that the p-value is smaller than 0.05. This means that, if there really was no difference between the population means (i.e., the Null hypothesis was true), the probability of the observed differences (or larger differences) is less than 5%. To compute η2 from the output, we can extract the relevant sum of squares as follows summary(aov)[[1]]$&quot;Sum Sq&quot;[1]/(summary(aov)[[1]]$&quot;Sum Sq&quot;[1] + summary(aov)[[1]]$&quot;Sum Sq&quot;[2]) ## [1] 0.6909988 You can see that the results match the results from our manual computation above (\\(\\eta^2 =\\) 0.69). The aov() function also automatically generates some plots that you can use to judge if the model assumptions are met. We will inspect two of the plots here. We will use the first plot to inspect if the residual variances are equal across the experimental groups: plot(aov, 1) Generally, the residual variance (i.e., the range of values on the y-axis) should be the same for different levels of our independent variable. The plot shows, that there are some slight differences. Notably, the range of residuals is higher in group “medium” than in group “high”. However, the differences are not that large and since the Levene’s test could not reject the Null of equal variances, we conclude that the variances are similar enough in this case. The second plot can be used to test the assumption that the residuals are approximately normally distributed. We use a Q-Q plot to test this assumption: plot(aov, 2) The plot suggests that, the residuals are approximately normally distributed. We could also test this by extracting the residuals from the anova output using the resid() function and using the Shapiro-Wilk test: shapiro.test(resid(aov)) ## ## Shapiro-Wilk normality test ## ## data: resid(aov) ## W = 0.99723, p-value = 0.8925 Confirming the impression from the Q-Q plot, we cannot reject the Null that the residuals are approximately normally distributed. Note that if Levene’s test would have been significant (i.e., variances are not equal), we would have needed to either resort to non-parametric tests (see below), or compute the Welch’s F-ratio instead, which is correcting for unequal variances between the groups: # oneway.test(hours ~ group, hours_abc) You can see that the results are fairly similar, since the variances turned out to be fairly equal across groups. 6.5.3.2 Post-hoc tests Provided that significant differences were detected by the overall ANOVA you can find out which group means are different using post-hoc procedures. Post-hoc procedures are designed to conduct pairwise comparisons of all different combinations of the treatment groups by correcting the level of significance for each test such that the overall Type I error rate (α) across all comparisons remains at 0.05. In other words, we rejected H0: μlow= μmedium= μhigh, and now we would like to test: Test1: \\[H_0: \\mu_{low} = \\mu_{medium}\\] Test2: \\[H_0: \\mu_{low} = \\mu_{high}\\] Test3: \\[H_0: \\mu_{medium} = \\mu_{high}\\] There are several post-hoc procedures available to choose from. In this tutorial, we will cover Bonferroni and Tukey’s HSD (“honest significant differences”). Both tests control for family-wise error. Bonferroni tends to have more power when the number of comparisons is small, whereas Tukey’s HSDs is better when testing large numbers of means. 6.5.3.2.1 Bonferroni One of the most popular (and easiest) methods to correct for the family-wise error rate is to conduct the individual t-tests and divide α by the number of comparisons („k“): \\[ p_{CR}= \\frac{\\alpha}{k} \\] In our example with three groups: \\[p_{CR}= \\frac{0.05}{3}=0.017\\] Thus, the “corrected” critical p-value is now 0.017 instead of 0.05 (i.e., the critical t value is higher). This means that the test is more conservative to account for the family-wise error. Remember that, to reject the null hypothesis at a 5% significance level, we usually check if the p-value in our analysis is smaller than 0.05. The corrected p-value above requires us to obtain a p-value smaller than 0.017 in order to reject the null hypothesis at the 5% significance level, which means that the critical value of the test statistic is higher. You can implement the Bonferroni procedure in R using: bonferroni &lt;- pairwise.t.test(hours_abc$hours, hours_abc$group, data = hours_abc, p.adjust.method = &quot;bonferroni&quot;) bonferroni ## ## Pairwise comparisons using t tests with pooled SD ## ## data: hours_abc$hours and hours_abc$group ## ## low medium ## medium &lt;2e-16 - ## high &lt;2e-16 &lt;2e-16 ## ## P value adjustment method: bonferroni In the output, you will get the corrected p-values for the individual tests. This mean, to reject the null hypothesis, we require the p-value to be smaller than 0.05 again, since the reported p-values are already corrected for the family-wise error. In our example, we can reject H0 of equal means for all three tests, since p &lt; 0.05 for all combinations of groups. Note the difference between the results from the post-hoc test compared to individual t-tests. For example, when we test the “medium” vs. “high” groups, the result from a t-test would be: data_subset &lt;- subset(hours_abc, group != &quot;low&quot;) ttest &lt;- t.test(hours ~ group, data = data_subset, var.equal = TRUE) ttest ## ## Two Sample t-test ## ## data: hours by group ## t = -11.884, df = 198, p-value &lt; 2.2e-16 ## alternative hypothesis: true difference in means between group medium and group high is not equal to 0 ## 95 percent confidence interval: ## -11.997471 -8.582529 ## sample estimates: ## mean in group medium mean in group high ## 24.70 34.99 Usually the p-value is lower in the t-test, reflecting the fact that the family-wise error is not corrected (i.e., the test is less conservative). In this case the p-value is extremely small in both cases and thus indistinguishable. 6.5.3.2.2 Tukey’s HSD Tukey’s HSD also compares all possible pairs of means (two-by-two combinations; i.e., like a t-test, except that it corrects for family-wise error rate). Test statistic: \\[\\begin{equation} \\begin{split} HSD= q\\sqrt{\\frac{MS_R}{n_c}} \\end{split} \\tag{6.2} \\end{equation}\\] where: q = value from studentized range table (see e.g., here) MSR = Mean Square Error from ANOVA nc = number of observations per group Decision: Reject H0 if \\[|\\bar{Y}_i-\\bar{Y}_j | &gt; HSD\\] The value from the studentized range table can be obtained using the qtukey() function. q &lt;- qtukey(0.95, nm = 3, df = 297) q ## [1] 3.331215 Hence: \\[HSD= 3.33\\sqrt{\\frac{33.99}{100}}=1.94\\] Or, in R: hsd &lt;- q * sqrt(summary(aov)[[1]]$&quot;Mean Sq&quot;[2]/100) hsd ## [1] 1.887434 Since all mean differences between groups are larger than 1.906, we can reject the null hypothesis for all individual tests, confirming the results from the Bonferroni test. To compute Tukey’s HSD, we can use the appropriate function from the multcomp package. library(multcomp) aov$model$group &lt;- as.factor(aov$model$group) tukeys &lt;- glht(aov, linfct = mcp(group = &quot;Tukey&quot;)) summary(tukeys) ## ## Simultaneous Tests for General Linear Hypotheses ## ## Multiple Comparisons of Means: Tukey Contrasts ## ## ## Fit: aov(formula = hours ~ group, data = hours_abc) ## ## Linear Hypotheses: ## Estimate Std. Error t value Pr(&gt;|t|) ## medium - low == 0 10.3600 0.8013 12.93 &lt;2e-16 *** ## high - low == 0 20.6500 0.8013 25.77 &lt;2e-16 *** ## high - medium == 0 10.2900 0.8013 12.84 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## (Adjusted p values reported -- single-step method) confint(tukeys) ## ## Simultaneous Confidence Intervals ## ## Multiple Comparisons of Means: Tukey Contrasts ## ## ## Fit: aov(formula = hours ~ group, data = hours_abc) ## ## Quantile = 2.3558 ## 95% family-wise confidence level ## ## ## Linear Hypotheses: ## Estimate lwr upr ## medium - low == 0 10.3600 8.4723 12.2477 ## high - low == 0 20.6500 18.7623 22.5377 ## high - medium == 0 10.2900 8.4023 12.1777 We may also plot the result for the mean differences incl. their confidence intervals: plot(tukeys) Figure 6.4: Tukey’s HSD You can see that the CIs do not cross zero, which means that the true difference between group means is unlikely zero. It is sufficient to report the results in the way described above. However, you could also manually compute the differences between the groups and their confidence interval as follows: mean1 &lt;- mean(hours_abc[hours_abc$group == &quot;low&quot;, &quot;hours&quot;]) #mean group &#39;low&#39; mean1 ## [1] 14.34 mean2 &lt;- mean(hours_abc[hours_abc$group == &quot;medium&quot;, &quot;hours&quot;]) #mean group &#39;medium&#39; mean2 ## [1] 24.7 mean3 &lt;- mean(hours_abc[hours_abc$group == &quot;high&quot;, &quot;hours&quot;]) #mean group &#39;high&#39; mean3 ## [1] 34.99 # CI high vs. medium mean_diff_high_med &lt;- mean2 - mean1 mean_diff_high_med ## [1] 10.36 ci_med_high_lower &lt;- mean_diff_high_med - hsd ci_med_high_upper &lt;- mean_diff_high_med + hsd ci_med_high_lower ## [1] 8.472566 ci_med_high_upper ## [1] 12.24743 # CI high vs.low mean_diff_high_low &lt;- mean3 - mean1 mean_diff_high_low ## [1] 20.65 ci_low_high_lower &lt;- mean_diff_high_low - hsd ci_low_high_upper &lt;- mean_diff_high_low + hsd ci_low_high_lower ## [1] 18.76257 ci_low_high_upper ## [1] 22.53743 # CI medium vs.low mean_diff_med_low &lt;- mean3 - mean2 mean_diff_med_low ## [1] 10.29 ci_low_med_lower &lt;- mean_diff_med_low - hsd ci_low_med_upper &lt;- mean_diff_med_low + hsd ci_low_med_lower ## [1] 8.402566 ci_low_med_upper ## [1] 12.17743 The results of a post-hoc test can be reported as follows: The post-hoc tests based on Bonferroni and Tukey’s HSD revealed that users listened to music significantly more when the intensity of personalized recommendations was increased. This is true for “low” vs. “medium” intensity, as well as for “low” vs. “high” and “medium” vs. “high” intensity. As with the t-test, you could also use the functions contained in the ggstatsplot package to combine a visual depiction of the data with the results of statistical tests. In the case of an ANOVA, the output would also include the pairwise comparisons. library(ggstatsplot) ggbetweenstats( data = hours_abc, x = group, y = hours, plot.type = &quot;box&quot;, pairwise.comparisons = TRUE, pairwise.annotation = &quot;p.value&quot;, p.adjust.method = &quot;bonferroni&quot;, #effsize.type = &quot;eta&quot;, #partial eta^2, not eta^2 var.equal = FALSE, mean.plotting = TRUE, # whether mean for each group is to be displayed mean.ci = TRUE, # whether to display confidence interval for means mean.label.size = 2.5, # size of the label for mean type = &quot;parametric&quot;, # which type of test is to be run k = 3, # number of decimal places for statistical results outlier.label.color = &quot;darkgreen&quot;, # changing the color for the text label title = &quot;Comparison of listening times between groups&quot;, xlab = &quot;Experimental group&quot;, # label for the x-axis variable ylab = &quot;Listening time&quot;, # label for the y-axis variable messages = FALSE, bf.message = FALSE ) Figure 4.5: ANOVA using ggstatsplot ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union ## ## Attaching package: &#39;ggplot2&#39; ## The following objects are masked from &#39;package:psych&#39;: ## ## %+%, alpha ## Loading required package: lattice ## Loading required package: survival ## Loading required package: Formula ## ## Attaching package: &#39;Hmisc&#39; ## The following object is masked from &#39;package:psych&#39;: ## ## describe ## The following objects are masked from &#39;package:dplyr&#39;: ## ## src, summarize ## The following objects are masked from &#39;package:base&#39;: ## ## format.pval, units 6.6 Non-parametric tests You can download the corresponding R-Code here Non-Parametric tests do not require the sampling distribution to be normally distributed (a.k.a. “assumption free tests”). These tests may be used when the variable of interest is measured on an ordinal scale or when the parametric assumptions do not hold. They often rely on ranking the data instead of analyzing the actual scores. By ranking the data, information on the magnitude of differences is lost. Thus, parametric tests are more powerful if the sampling distribution is normally distributed and you have a continuous variable. When should you use non-parametric tests? When your DV is measured on an ordinal scale When your data is better represented by the median (e.g., there are outliers that you can’t remove) When the assumptions of parametric tests are not met (e.g., normally distributed sampling distribution) You have a very small sample size (i.e., the central limit theorem does not apply) In these cases, you should resort to the non-parametric equivalent of the tests we have discussed so far, as summarized in the following table. Parametric test Non-parametric equivalent Independent-means t-test Mann-Whitney U Test Dependent-means t-test Wilcoxon signed-rank test ANOVA Kruskal-Wallis test These non-parametric tests will be briefly discussed in the following sections. 6.6.1 Mann-Whitney U Test (a.k.a. Wilcoxon rank-sum test) The Mann-Whitney U test is a non-parametric test of differences between groups (i.e., it is the non-parametric equivalent of the independent-means t-test). In contrast to the independent-means t-test it only requires ordinally scaled data and relies on weaker assumptions. Thus it is often useful if the assumptions of the t-test are violated, especially if the data is not on a continuous scale. The following assumptions must be fulfilled for the test to be applicable: The dependent variable is at least ordinally scaled (i.e. a ranking between values can be established) The independent variable has only two levels A between-subjects design is used (i.e., the subjects are not matched across conditions) Intuitively, the test compares the frequency of low and high ranks between groups. Under the null hypothesis, the amount of high and low ranks should be roughly equal in the two groups. This is achieved through comparing the expected sum of ranks to the actual sum of ranks. As an example, we will be using data obtained from a field experiment with random assignment. In a music download store, new releases were randomly assigned to an experimental group and sold at a reduced price (i.e., 7.95€), or a control group and sold at the standard price (9.95€). A representative sample of 102 new releases were sampled and these albums were randomly assigned to the experimental groups (i.e., 51 albums per group). The sales were tracked over one day. Let’s load and investigate the data first: library(psych) library(ggplot2) rm(music_sales) music_sales &lt;- read.table(&quot;https://raw.githubusercontent.com/IMSMWU/Teaching/master/MRDA2017/music_experiment.dat&quot;, sep = &quot;\\t&quot;, header = TRUE) #read in data music_sales$group &lt;- factor(music_sales$group, levels = c(1:2), labels = c(&quot;low_price&quot;, &quot;high_price&quot;)) #convert grouping variable to factor str(music_sales) #inspect data ## &#39;data.frame&#39;: 102 obs. of 3 variables: ## $ product_id: int 1 2 3 4 5 6 7 8 9 10 ... ## $ unit_sales: int 6 27 30 24 21 11 18 15 18 13 ... ## $ group : Factor w/ 2 levels &quot;low_price&quot;,&quot;high_price&quot;: 1 1 1 1 1 1 1 1 1 1 ... head(music_sales) #inspect data Inspect descriptives (overall and by group). psych::describe(music_sales$unit_sales) #overall descriptives ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 102 7.12 6.26 6 6.1 4.45 0 30 30 1.71 3.02 0.62 describeBy(music_sales$unit_sales, music_sales$group) #descriptives by group ## ## Descriptive statistics by group ## group: low_price ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 51 8.37 6.44 6 7.17 4.45 2 30 28 1.66 2.22 0.9 ## ------------------------------------------------------------ ## group: high_price ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 51 5.86 5.87 3 4.9 4.45 0 30 30 1.84 4.1 0.82 In the case of non-parametric tests, the data is better represented by the median (compared to the mean). Thus, we will visualize the data using a boxplot. ggplot(music_sales,aes(x = group, y = unit_sales)) + geom_boxplot() + geom_jitter(colour=&quot;red&quot;, alpha = 0.1) + theme_bw() + labs(x = &quot;Group&quot;, y = &quot;Sales&quot;, title = &quot;Sales by group&quot;)+ theme(plot.title = element_text(hjust = 0.5,color = &quot;#666666&quot;)) Figure 1.3: Boxplot Let’s assume that one of the parametric assumptions has been violated and we needed to conduct a non-parametric test. Then, the Mann-Whitney U test is implemented in R using the function wilcox.test(). Using the ranking data as an independent variable and the listening time as a dependent variable, the test could be executed as follows: wilcox.test(unit_sales ~ group, data = music_sales) #Mann-Whitney U Test ## ## Wilcoxon rank sum test with continuity correction ## ## data: unit_sales by group ## W = 1710, p-value = 0.005374 ## alternative hypothesis: true location shift is not equal to 0 The p-value is smaller than 0.05, which leads us to reject the null hypothesis, i.e. the test yields evidence that the new service feature leads to higher music listening times. Alternatively, you could also use the ggstatsplot package to obtain the result of the test by specifying the argument type = \"nonparametric\" as follows: library(ggstatsplot) ggbetweenstats( data = music_sales, plot.type = &quot;box&quot;, x = group, # 2 groups y = unit_sales , type = &quot;nonparametric&quot;, effsize.type = &quot;r&quot;, # display effect size (Cohen&#39;s d in output) messages = FALSE, bf.message = FALSE, mean.ci = TRUE, title = &quot;Mean sales for different groups&quot; ) Figure 5.1: Mann-Whitney U Test using ggstatsplot 6.6.2 Wilcoxon signed-rank test The Wilcoxon signed-rank test is a non-parametric test used to analyze the difference between paired observations, analogously to the dependent-means t-test. It can be used when measurements come from the same observational units but the distributional assumptions of the dependent-means t-test do not hold, because it does not require any assumptions about the distribution of the measurements. Since we subtract two values, however, the test requires that the dependent variable is at least interval scaled, meaning that intervals have the same meaning for different points on our measurement scale. Under the null hypothesis \\(H_0\\), the differences of the measurements should follow a symmetric distribution around 0, meaning that, on average, there is no difference between the two matched samples. \\(H_1\\) states that the distributions mean is non-zero. As an example, let’s consider a slightly different experimental setup for the music download store. Imagine that new releases were either sold at a reduced price (i.e., 7.95€), or at the standard price (9.95€). Every time a customer came to the store, the prices were randomly determined for every new release. This means that the same 51 albums were either sold at the standard price or at the reduced price and this price was determined randomly. The sales were then recorded over one day. Note the difference to the previous case, where we randomly split the sample and assigned 50% of products to each condition. Now, we randomly vary prices for all albums between high and low prices. Let’s load and investigate the data first: rm(music_sales_dep) music_sales_dep &lt;- read.table(&quot;https://raw.githubusercontent.com/IMSMWU/Teaching/master/MRDA2017/music_experiment_dependent.dat&quot;, sep = &quot;\\t&quot;, header = TRUE) #read in data str(music_sales_dep) #inspect data ## &#39;data.frame&#39;: 51 obs. of 3 variables: ## $ product_id : int 1 2 3 4 5 6 7 8 9 10 ... ## $ unit_sales_low_price : int 6 27 30 24 21 11 18 15 18 13 ... ## $ unit_sales_high_price: int 9 12 30 18 20 15 2 3 3 9 ... head(music_sales_dep) #inspect data We can visualize the data using a boxplot as follows: library(reshape2) music_sales_dep_long &lt;- melt(music_sales_dep[, c(&quot;unit_sales_low_price&quot;, &quot;unit_sales_high_price&quot;)]) names(music_sales_dep_long) &lt;- c(&quot;group&quot;,&quot;sales&quot;) head(music_sales_dep_long) ggplot(music_sales_dep_long,aes(x = group, y = sales)) + geom_boxplot() + geom_jitter(colour=&quot;red&quot;, alpha = 0.1) + theme_bw() + labs(x = &quot;Group&quot;, y = &quot;Average number of sales&quot;, title = &quot;Average number of sales by group&quot;)+ theme(plot.title = element_text(hjust = 0.5,color = &quot;#666666&quot;)) Figure 1.6: Boxplot Again, let’s assume that one of the parametric assumptions has been violated and we needed to conduct a non-parametric test. Then the Wilcoxon signed-rank test can be performed with the same command as the Mann-Whitney U test, provided that the argument paired is set to TRUE. wilcox.test(music_sales_dep$unit_sales_low_price, music_sales_dep$unit_sales_high_price, paired = TRUE) #Wilcoxon signed-rank test ## ## Wilcoxon signed rank test with continuity correction ## ## data: music_sales_dep$unit_sales_low_price and music_sales_dep$unit_sales_high_price ## V = 867.5, p-value = 0.004024 ## alternative hypothesis: true location shift is not equal to 0 Using the 95% confidence level, the result would suggest a significant effect of price on sales (i.e., p &lt; 0.05). Again, you could also use the ggstatsplot package to obtain the result of the test by specifying the argument type = \"nonparametric\" as follows: library(ggstatsplot) ggwithinstats(data = music_sales_dep_long, x = group, y = sales, path.point = FALSE, type = &quot;nonparametric&quot;, title = &quot;Mean sales for different treatments&quot;, messages = FALSE, bf.message = FALSE, mean.ci = TRUE, mean.plotting = F, effsize.type = &quot;r&quot; # display effect size (Cohen&#39;s d in output) ) Figure 1.8: Wilcoxon signed-rank test using ggstatsplot 6.6.3 Kruskal-Wallis test The Kruskal–Wallis test is the non-parametric counterpart of the one-way ANOVA. It is designed to test for significant differences in population medians when you have more than two groups (with two groups, you would use the Mann-Whitney U-test). The theory is very similar to that of the Mann–Whitney U-test since it is also based on ranked data. As an example, let’s use a data set containing data from an experiment at an online store where products were randomly assigned to three groups with three different levels of promotion (i.e., “low”, “medium”, “high”) and the sales where recorded for these groups. online_store_promo &lt;- read.table(&quot;https://raw.githubusercontent.com/IMSMWU/Teaching/master/MRDA2017/online_store_promo.dat&quot;, sep = &quot;\\t&quot;, header = TRUE) #read in data online_store_promo$Promotion &lt;- factor(online_store_promo$Promotion, levels = c(1:3), labels = c(&quot;high&quot;, &quot;medium&quot;, &quot;low&quot;)) #convert grouping variable to factor head(online_store_promo) To get a first impression, we can plot the data using a boxplot: #Boxplot ggplot(online_store_promo,aes(x = Promotion, y = Sales)) + geom_boxplot() + geom_jitter(colour=&quot;red&quot;, alpha = 0.1) + theme_bw() + labs(x = &quot;Experimental group (promotion level)&quot;, y = &quot;Number of sales&quot;, title = &quot;Number of sales by group&quot;)+ theme(plot.title = element_text(hjust = 0.5,color = &quot;#666666&quot;)) Figure 1.10: Boxplot To test if there is a difference in medians between the groups, we can carry out the Kruskal-Wallis test using the kruskal.test() function: kruskal.test(Sales ~ Promotion, data = online_store_promo) ## ## Kruskal-Wallis rank sum test ## ## data: Sales by Promotion ## Kruskal-Wallis chi-squared = 16.529, df = 2, p-value = 0.0002575 The test-statistic follows a chi-square distribution and since the test is significant (p &lt; 0.05), we can conclude that there are significant differences in population medians. Provided that the overall effect is significant, you may perform a post hoc test to find out which groups are different. To test for differences between groups, we can, for example, apply post-hoc tests according to Nemenyi for pairwise multiple comparisons of the ranked data using the appropriate function from the PMCMR package. library(PMCMR) library(PMCMRplus) kwAllPairsNemenyiTest(x = online_store_promo$Sales, g = online_store_promo$Promotion, dist = &quot;Tukey&quot;) ## high medium ## medium 0.09887 - ## low 0.00016 0.11683 The results reveal that there is a significant difference between the “low” and “high” promotion groups. Note that the results are different compared to the results from a parametric test, which we could obtain as follows: pairwise.t.test(online_store_promo$Sales, online_store_promo$Promotion, data = online_store_promo, p.adjust.method = &quot;bonferroni&quot;) ## ## Pairwise comparisons using t tests with pooled SD ## ## data: online_store_promo$Sales and online_store_promo$Promotion ## ## high medium ## medium 0.0329 - ## low 6.6e-06 0.0092 ## ## P value adjustment method: bonferroni This difference occurs because non-parametric tests have less power to detect differences between groups since we lose information by ranking the data. Thus, you should rely on parametric tests if the assumptions are met. Again, you could also use the ggstatsplot package to obtain the result of the test by specifying the argument type = \"nonparametric\" as follows: library(ggstatsplot) ggbetweenstats( data = online_store_promo, plot.type = &quot;box&quot;, x = Promotion, # 2 groups y = Sales, type = &quot;nonparametric&quot;, messages = FALSE, title = &quot;Mean sales for different groups&quot; ) Figure 6.5: Kruskal-Wallis test using ggstatsplot 6.7 Categorical data You can download the corresponding R-Code here In some instances, you will be confronted with differences between proportions, rather than differences between means. For example, you may conduct an A/B-Test and wish to compare the conversion rates between two advertising campaigns. In this case, your data is binary (0 = no conversion, 1 = conversion) and the sampling distribution for such data is binomial. While binomial probabilities are difficult to calculate, we can use a Normal approximation to the binomial when n is large (&gt;100) and the true likelihood of a 1 is not too close to 0 or 1. Let’s use an example: assume a call center where service agents call potential customers to sell a product. We consider two call center agents: Service agent 1 talks to 300 customers and gets 200 of them to buy (conversion rate=2/3) Service agent 2 talks to 300 customers and gets 100 of them to buy (conversion rate=1/3) As always, we load the data first: call_center &lt;- read.table(&quot;https://raw.githubusercontent.com/IMSMWU/Teaching/master/MRDA2017/call_center.dat&quot;, sep = &quot;\\t&quot;, header = TRUE) #read in data call_center$conversion &lt;- factor(call_center$conversion, levels = c(0:1), labels = c(&quot;no&quot;, &quot;yes&quot;)) #convert to factor call_center$agent &lt;- factor(call_center$agent, levels = c(0:1), labels = c(&quot;agent_1&quot;, &quot;agent_2&quot;)) #convert to factor Next, we create a table to check the relative frequencies: rel_freq_table &lt;- as.data.frame(prop.table(table(call_center), 2)) #conditional relative frequencies rel_freq_table We could also plot the data to visualize the frequencies using ggplot: ggplot(rel_freq_table, aes(x = agent, y = Freq, fill = conversion)) + #plot data geom_col(width = .7) + #position geom_text(aes(label = paste0(round(Freq*100,0),&quot;%&quot;)), position = position_stack(vjust = 0.5), size = 4) + #add percentages ylab(&quot;Proportion of conversions&quot;) + xlab(&quot;Agent&quot;) + # specify axis labels theme_bw() Figure 1.16: proportion of conversions per agent (stacked bar chart) 6.7.1 Confidence intervals for proportions Recall that we can use confidence intervals to determine the range of values that the true population parameter will take with a certain level of confidence based on the sample. Similar to the confidence interval for means, we can compute a confidence interval for proportions. The (1-\\(\\alpha\\))% confidence interval for proportions is approximately \\[ CI = p\\pm z_{1-\\frac{\\alpha}{2}}*\\sqrt{\\frac{p*(1-p)}{N}} \\] where \\(\\sqrt{p(1-p)}\\) is the equivalent to the standard deviation in the formula for the confidence interval for means. Based on the equation, it is easy to compute the confidence intervals for the conversion rates of the call center agents: n1 &lt;- nrow(subset(call_center, agent == &quot;agent_1&quot;)) #number of observations for agent 1 n2 &lt;- nrow(subset(call_center, agent == &quot;agent_2&quot;)) #number of observations for agent 1 n1_conv &lt;- nrow(subset(call_center, agent == &quot;agent_1&quot; &amp; conversion == &quot;yes&quot;)) #number of conversions for agent 1 n2_conv &lt;- nrow(subset(call_center, agent == &quot;agent_2&quot; &amp; conversion == &quot;yes&quot;)) #number of conversions for agent 2 p1 &lt;- n1_conv/n1 #proportion of conversions for agent 1 p2 &lt;- n2_conv/n2 #proportion of conversions for agent 2 error1 &lt;- qnorm(0.975) * sqrt((p1 * (1 - p1))/n1) ci_lower1 &lt;- p1 - error1 ci_upper1 &lt;- p1 + error1 ci_lower1 ## [1] 0.6133232 ci_upper1 ## [1] 0.7200101 error2 &lt;- qnorm(0.975) * sqrt((p2 * (1 - p2))/n2) ci_lower2 &lt;- p2 - error2 ci_upper2 &lt;- p2 + error2 ci_lower2 ## [1] 0.2799899 ci_upper2 ## [1] 0.3866768 Similar to testing for differences in means, we could also ask: Is agent 1 twice as likely as agent 2 to convert a customer? Or, to state it formally: \\[H_0: \\pi_1=\\pi_2 \\\\ H_1: \\pi_1\\ne \\pi_2\\] where \\(\\pi\\) denotes the population parameter associated with the proportion in the respective population. One approach to test this is based on confidence intervals to estimate the difference between two populations. We can compute an approximate confidence interval for the difference between the proportion of successes in group 1 and group 2, as: \\[ CI = p_1-p_2\\pm z_{1-\\frac{\\alpha}{2}}*\\sqrt{\\frac{p_1*(1-p_1)}{n_1}+\\frac{p_2*(1-p_2)}{n_2}} \\] If the confidence interval includes zero, then the data does not suggest a difference between the groups. Let’s compute the confidence interval for differences in the proportions by hand first: ci_lower &lt;- p1 - p2 - qnorm(0.975) * sqrt(p1 * (1 - p1)/n1 + p2 * (1 - p2)/n2) #95% CI lower bound ci_upper &lt;- p1 - p2 + qnorm(0.975) * sqrt(p1 * (1 - p1)/n1 + p2 * (1 - p2)/n2) #95% CI upper bound ci_lower ## [1] 0.2578943 ci_upper ## [1] 0.4087724 Now we can see that the 95% confidence interval estimate of the difference between the proportion of conversions for agent 1 and the proportion of conversions for agent 2 is between 26% and 41%. This interval tells us the range of plausible values for the difference between the two population proportions. According to this interval, zero is not a plausible value for the difference (i.e., interval does not cross zero), so we reject the null hypothesis that the population proportions are the same. Instead of computing the intervals by hand, we could also use the prop.test() function: prop.test(x = c(n1_conv, n2_conv), n = c(n1, n2), conf.level = 0.95) ## ## 2-sample test for equality of proportions with continuity correction ## ## data: c(n1_conv, n2_conv) out of c(n1, n2) ## X-squared = 65.34, df = 1, p-value = 6.303e-16 ## alternative hypothesis: two.sided ## 95 percent confidence interval: ## 0.2545610 0.4121057 ## sample estimates: ## prop 1 prop 2 ## 0.6666667 0.3333333 Note that the prop.test() function uses a slightly different (more accurate) way to compute the confidence interval (Wilson’s score method is used). It is particularly a better approximation for smaller N. That’s why the confidence interval in the output slightly deviates from the manual computation above, which uses the Wald interval. You can also see that the output from the prop.test() includes the results from a χ2 test for the equality of proportions (which will be discussed below) and the associated p-value. Since the p-value is less than 0.05, we reject the null hypothesis of equal probability. Thus, the reporting would be: The test showed that the conversion rate for agent 1 was higher by 33%. This difference is significant χ (1) = 70, p &lt; .05 (95% CI = [0.25,0.41]). 6.7.2 Chi-square test In the previous section, we saw how we can compute the confidence interval for the difference between proportions to decide on whether or not to reject the null hypothesis. Whenever you would like to investigate the relationship between two categorical variables, the \\(\\chi^2\\) test may be used to test whether the variables are independent of each other. It achieves this by comparing the expected number of observations in a group to the actual values. Let’s continue with the example from the previous section. Under the null hypothesis, the two variables agent and conversion in our contingency table are independent (i.e., there is no relationship). This means that the frequency in each field will be roughly proportional to the probability of an observation being in that category, calculated under the assumption that they are independent. The difference between that expected quantity and the actual quantity can be used to construct the test statistic. The test statistic is computed as follows: \\[ \\chi^2=\\sum_{i=1}^{J}\\frac{(f_o-f_e)^2}{f_e} \\] where \\(J\\) is the number of cells in the contingency table, \\(f_o\\) are the observed cell frequencies and \\(f_e\\) are the expected cell frequencies. The larger the differences, the larger the test statistic and the smaller the p-value. The observed cell frequencies can easily be seen from the contingency table: contigency_table &lt;- table(call_center) obs_cell1 &lt;- contigency_table[1, 1] obs_cell2 &lt;- contigency_table[1, 2] obs_cell3 &lt;- contigency_table[2, 1] obs_cell4 &lt;- contigency_table[2, 2] The expected cell frequencies can be calculated as follows: \\[ f_e=\\frac{(n_r*n_c)}{n} \\] where \\(n_r\\) are the total observed frequencies per row, \\(n_c\\) are the total observed frequencies per column, and \\(n\\) is the total number of observations. Thus, the expected cell frequencies under the assumption of independence can be calculated as: n &lt;- nrow(call_center) exp_cell1 &lt;- (nrow(call_center[call_center$agent == &quot;agent_1&quot;, ]) * nrow(call_center[call_center$conversion == &quot;no&quot;, ]))/n exp_cell2 &lt;- (nrow(call_center[call_center$agent == &quot;agent_1&quot;, ]) * nrow(call_center[call_center$conversion == &quot;yes&quot;, ]))/n exp_cell3 &lt;- (nrow(call_center[call_center$agent == &quot;agent_2&quot;, ]) * nrow(call_center[call_center$conversion == &quot;no&quot;, ]))/n exp_cell4 &lt;- (nrow(call_center[call_center$agent == &quot;agent_2&quot;, ]) * nrow(call_center[call_center$conversion == &quot;yes&quot;, ]))/n To sum up, these are the expected cell frequencies data.frame(conversion_no = rbind(exp_cell1, exp_cell3), conversion_yes = rbind(exp_cell2, exp_cell4), row.names = c(&quot;agent_1&quot;, &quot;agent_2&quot;)) ## conversion_no conversion_yes ## agent_1 150 150 ## agent_2 150 150 … and these are the observed cell frequencies data.frame(conversion_no = rbind(obs_cell1, obs_cell2), conversion_yes = rbind(obs_cell3, obs_cell4), row.names = c(&quot;agent_1&quot;, &quot;agent_2&quot;)) ## conversion_no conversion_yes ## agent_1 100 200 ## agent_2 200 100 To obtain the test statistic, we simply plug the values into the formula: chisq_cal &lt;- sum(((obs_cell1 - exp_cell1)^2/exp_cell1), ((obs_cell2 - exp_cell2)^2/exp_cell2), ((obs_cell3 - exp_cell3)^2/exp_cell3), ((obs_cell4 - exp_cell4)^2/exp_cell4)) chisq_cal ## [1] 66.66667 The test statistic is \\(\\chi^2\\) distributed. The chi-square distribution is a non-symmetric distribution. Actually, there are many different chi-square distributions, one for each degree of freedom as show in the following figure. Figure 1.25: The chi-square distribution You can see that as the degrees of freedom increase, the chi-square curve approaches a normal distribution. To find the critical value, we need to specify the corresponding degrees of freedom, given by: \\[ df=(r-1)*(c-1) \\] where \\(r\\) is the number of rows and \\(c\\) is the number of columns in the contingency table. Recall that degrees of freedom are generally the number of values that can vary freely when calculating a statistic. In a 2 by 2 table as in our case, we have 2 variables (or two samples) with 2 levels and in each one we have 1 that vary freely. Hence, in our example the degrees of freedom can be calculated as: df &lt;- (nrow(contigency_table) - 1) * (ncol(contigency_table) - 1) df ## [1] 1 Now, we can derive the critical value given the degrees of freedom and the level of confidence using the qchisq() function and test if the calculated test statistic is larger than the critical value: chisq_crit &lt;- qchisq(0.95, df) chisq_crit ## [1] 3.841459 chisq_cal &gt; chisq_crit ## [1] TRUE Figure 4.1: Visual depiction of the test result We could also compute the p-value using the pchisq() function, which tells us the probability of the observed cell frequencies if the null hypothesis was true (i.e., there was no association): p_val &lt;- 1 - pchisq(chisq_cal, df) p_val ## [1] 3.330669e-16 The test statistic can also be calculated in R directly on the contingency table with the function chisq.test(). chisq.test(contigency_table, correct = FALSE) ## ## Pearson&#39;s Chi-squared test ## ## data: contigency_table ## X-squared = 66.667, df = 1, p-value = 3.215e-16 Since the p-value is smaller than 0.05 (i.e., the calculated test statistic is larger than the critical value), we reject H0 that the two variables are independent. Note that the test statistic is sensitive to the sample size. To see this, let’s assume that we have a sample of 100 observations instead of 1000 observations: chisq.test(contigency_table/10, correct = FALSE) ## ## Pearson&#39;s Chi-squared test ## ## data: contigency_table/10 ## X-squared = 6.6667, df = 1, p-value = 0.009823 You can see that even though the proportions haven’t changed, the test is insignificant now. The following equation lets you compute a measure of the effect size, which is insensitive to sample size: \\[ \\phi=\\sqrt{\\frac{\\chi^2}{n}} \\] The following guidelines are used to determine the magnitude of the effect size (Cohen, 1988): 0.1 (small effect) 0.3 (medium effect) 0.5 (large effect) In our example, we can compute the effect sizes for the large and small samples as follows: test_stat &lt;- chisq.test(contigency_table, correct = FALSE)$statistic phi1 &lt;- sqrt(test_stat/n) test_stat &lt;- chisq.test(contigency_table/10, correct = FALSE)$statistic phi2 &lt;- sqrt(test_stat/(n/10)) phi1 ## X-squared ## 0.3333333 phi2 ## X-squared ## 0.3333333 You can see that the statistic is insensitive to the sample size. Note that the Φ coefficient is appropriate for two dichotomous variables (resulting from a 2 x 2 table as above). If any your nominal variables has more than two categories, Cramer’s V should be used instead: \\[ V=\\sqrt{\\frac{\\chi^2}{n*df_{min}}} \\] where \\(df_{min}\\) refers to the degrees of freedom associated with the variable that has fewer categories (e.g., if we have two nominal variables with 3 and 4 categories, \\(df_{min}\\) would be 3 - 1 = 2). The degrees of freedom need to be taken into account when judging the magnitude of the effect sizes (see e.g., here). Note that the correct = FALSE argument above ensures that the test statistic is computed in the same way as we have done by hand above. By default, chisq.test() applies a correction to prevent overestimation of statistical significance for small data (called the Yates’ correction). The correction is implemented by subtracting the value 0.5 from the computed difference between the observed and expected cell counts in the numerator of the test statistic. This means that the calculated test statistic will be smaller (i.e., more conservative). Although the adjustment may go too far in some instances, you should generally rely on the adjusted results, which can be computed as follows: chisq.test(contigency_table) ## ## Pearson&#39;s Chi-squared test with Yates&#39; continuity correction ## ## data: contigency_table ## X-squared = 65.34, df = 1, p-value = 6.303e-16 As you can see, the results don’t change much in our example, since the differences between the observed and expected cell frequencies are fairly large relative to the correction. As usual, you could also use the ggstatsplot package to obtain the result of the test, this time by using ggbarstats function: library(ggstatsplot) ggbarstats(data = call_center, x = conversion, y = agent, title = &quot;Conversion by agent&quot;, xlab = &quot;Agent&quot;, palette = &quot;Blues&quot;, messages = FALSE, bar.proptest = FALSE, bf.message = FALSE) Figure 6.6: Kruskal-Wallis test using ggstatsplot Caution is warranted when the cell counts in the contingency table are small. The usual rule of thumb is that all cell counts should be at least 5 (this may be a little too stringent though). When some cell counts are too small, you can use Fisher’s exact test using the fisher.test() function. fisher.test(contigency_table) ## ## Fisher&#39;s Exact Test for Count Data ## ## data: contigency_table ## p-value = 3.391e-16 ## alternative hypothesis: true odds ratio is not equal to 1 ## 95 percent confidence interval: ## 0.1754685 0.3560568 ## sample estimates: ## odds ratio ## 0.2506258 The Fisher test, while more conservative, also shows a significant difference between the proportions (p &lt; 0.05). This is not surprising since the cell counts in our example are fairly large. 6.7.3 Sample size To calculate the required sample size when comparing proportions, the power.prop.test() function can be used. For example, we could ask how large our sample needs to be if we would like to compare two groups with conversion rates of 2% and 2.5%, respectively using the conventional settings for \\(\\alpha\\) and \\(\\beta\\): power.prop.test(p1 = 0.02, p2 = 0.025, sig.level = 0.05, power = 0.8) ## ## Two-sample comparison of proportions power calculation ## ## n = 13808.92 ## p1 = 0.02 ## p2 = 0.025 ## sig.level = 0.05 ## power = 0.8 ## alternative = two.sided ## ## NOTE: n is number in *each* group The output tells us that we need 1.3809^{4} observations per group to detect a difference of the desired size. Learning check (LC6.1) The Null Hypothesis (\\(H_0\\)) is a statement of: The status-quo/no effect The desired status The expected status None of the above (LC6.2) Which statements about the Null Hypothesis (\\(H_0\\)) are TRUE? In scientific research, the goal is usually to confirm it In scientific research, the goal is usually to reject it It can be confirmed with one test None of the above (LC6.3) The t-distribution: Has more probability mass in its tails compared to the normal distribution and therefore corrects for small samples Approaches the normal distribution as n increases Is the distribution of the t-statistic Has less probability mass in its tails compared to the normal distribution and therefore corrects for small samples None of the above (LC6.4) Type I vs. Type II Errors: Which of the following statements is TRUE? Type II Error: We believe there is no effect, when in fact there is Type I Error: We believe there is an effect, when in fact there isn’t Type I Error: We believe there is no effect, when in fact there is Type II Error: We believe there is an effect, when in fact there isn’t None of the above (LC6.5) When planning an experiment, which of the following information would you need to compute the required sample size? The p-value (p) The significance level (alpha) The effect size (d) The critical value of the test statistic (t) None of the above (LC6.6) In which setting would you reject the null hypothesis when conducting a statistical test? When the absolute value of the calculated test-statistic (e.g., t-value) exceeds the critical value of the test statistic at your specified significance level (e.g., 0.05) When the p-value is smaller than your specified significance level (e.g., 0.05) When the confidence interval associated with the test does not contain zero When the test-statistic (e.g., t-value) is lower than the critical value of the test statistic at your specified significance level (e.g., 0.05) None of the above (LC6.7) After conducting a statistical test, what is the relationship between the test statistic (e.g., t-value) and the p-value? The lower the absolute value of the test statistic, the lower the p-value The higher the absolute value of the test statistic, the higher the p-value There is no connection between the test statistic and the p-value None of the above (LC6.8) What does a significant test result tell you? The importance of an effect That the null hypothesis is false That the null hypothesis is true None of the above (LC6.9) In an experiment in which you compare the means between two groups, you should collect data until your test shows a significant results. True or false? True False (LC6.10) If you have data from an within-subjects experimental design, you should use the independent-means t-test. True or false? True False Questions for chapters 6.4 and following from here (LC6.11) When should you use an ANOVA rather than a t-test? To compare the means for more than two populations To compare the means of two groups To adjust the variance of different sets To test for causality None of the above (LC6.12) What is the correct representation of the null hypothesis for an ANOVA?? H0:μ1≠μ2≠μ3 H1:μ1=μ2=μ3 H0:μ1=μ2=μ3 H0:μ1≠μ2=μ3 None of the above (LC6.13) Using an experimental design with three groups, why can’t we just compare the means between the groups using multiple t-test? Because the parametric assumptions of the t-test are not met Because of deflated Type III Error rates Due to the family-wise error rate the Type II Error is inflated Because the Type I Error rate (alpha) wouldn’t be 0.05 None of the above (LC6.14) Which assumptions have to be satisfied to be able to use ANOVA on data from a between-subject design with three groups? Same mean for all groups Normal distribution of data Homogeneity of variances Independence of observation None of the above (LC6.15) What procedures are designed to correct of family-wise error rate in ANOVA? Bonferroni correction Tukey’s HSD t-test Post-hoc tests None of the above (LC6.16) Which of the following are examples for non-parametric tests? Chi-Squared test ANOVA Kruskal-Wilcoxon test T-test None of the above (LC6.17) When should you use non-parametric tests? When the assumptions of parametric tests are not met (e.g., normally distributed sampling distribution) You have a very small sample size When your dependent variable is measured on an ordinal scale When your data is better represented by the median None of the above (LC6.18) When should you use a Wilcoxon Rank Sum Test (= Mann-Whitney U Test)? When the assumptions of the t-test have been violated The variances are not significantly different between groups As a non-parametric alternative to the independent-means t-test When the assumptions of the ANOVA have been violated None of the above (LC6.19) What does a Chi squared test do? Tests the statistical significance of the observed association in a cross-tabulation Tests whether group A affects group B Produces a test statistic that is Chi Squared distributed Tests for the association between two or more categorical variables None of the above (LC6.20) Which R-function would be suitable if you wanted to perform a test with ranked (ordinal) data in a two-group between-subject design? kruskal.test(x, ...) wilcox.test(x, ...) aov(formula, data = ,...) t.test(x, ...) None of the above References Field, A., Miles J., &amp; Field, Z. (2012): Discovering Statistics Using R. Sage Publications, chapters 5, 9, 10, 12, 15, 18. McCullough, B.D. &amp; Feit, E. (2020). Business Experiments with R. "],["regression.html", "7 Regression 7.1 Correlation 7.2 Regression 7.3 Potential problems 7.4 Categorical predictors 7.5 Extensions of the linear model 7.6 Logistic regression Learning check References", " 7 Regression You can download the corresponding R-Code here 7.1 Correlation Before we start with regression analysis, we will review the basic concept of correlation first. Correlation helps us to determine the degree to which the variation in one variable, X, is related to the variation in another variable, Y. 7.1.1 Correlation coefficient The correlation coefficient summarizes the strength of the linear relationship between two metric (interval or ratio scaled) variables. Let’s consider a simple example. Say you conduct a survey to investigate the relationship between the attitude towards a city and the duration of residency. The “Attitude” variable can take values between 1 (very unfavorable) and 12 (very favorable), and the “duration of residency” is measured in years. Let’s further assume for this example that the attitude measurement represents an interval scale (although it is usually not realistic to assume that the scale points on an itemized rating scale have the same distance). To keep it simple, let’s further assume that you only asked 12 people. We can create a short data set like this: library(psych) attitude &lt;- c(6, 9, 8, 3, 10, 4, 5, 2, 11, 9, 10, 2) duration &lt;- c(10, 12, 12, 4, 12, 6, 8, 2, 18, 9, 17, 2) att_data &lt;- data.frame(attitude, duration) att_data &lt;- att_data[order(-attitude), ] att_data$respodentID &lt;- c(1:12) str(att_data) ## &#39;data.frame&#39;: 12 obs. of 3 variables: ## $ attitude : num 11 10 10 9 9 8 6 5 4 3 ... ## $ duration : num 18 12 17 12 9 12 10 8 6 4 ... ## $ respodentID: int 1 2 3 4 5 6 7 8 9 10 ... psych::describe(att_data[, c(&quot;attitude&quot;, &quot;duration&quot;)]) ## vars n mean sd median trimmed mad min max range skew kurtosis ## attitude 1 12 6.58 3.32 7.0 6.6 4.45 2 11 9 -0.14 -1.74 ## duration 2 12 9.33 5.26 9.5 9.2 4.45 2 18 16 0.10 -1.27 ## se ## attitude 0.96 ## duration 1.52 att_data ## attitude duration respodentID ## 9 11 18 1 ## 5 10 12 2 ## 11 10 17 3 ## 2 9 12 4 ## 10 9 9 5 ## 3 8 12 6 ## 1 6 10 7 ## 7 5 8 8 ## 6 4 6 9 ## 4 3 4 10 ## 8 2 2 11 ## 12 2 2 12 Let’s look at the data first. The following graph shows the individual data points for the “duration of residency”” variable, where the y-axis shows the duration of residency in years and the x-axis shows the respondent ID. The blue horizontal line represents the mean of the variable (9.33) and the vertical lines show the distance of the individual data points from the mean. Figure 1.3: Scores for duration of residency variable You can see that there are some respondents that have been living in the city longer than average and some respondents that have been living in the city shorter than average. Let’s do the same for the second variable (“Attitude”). Again, the y-axis shows the observed scores for this variable and the x-axis shows the respondent ID. Figure 1.4: Scores for attitude variable Again, we can see that some respondents have an above average attitude towards the city (more favorable) and some respondents have a below average attitude towards the city. Let’s combine both variables in one graph now to see if there is some co-movement: Figure 5.1: Scores for attitude and duration of residency variables We can see that there is indeed some co-movement here. The variables covary because respondents who have an above (below) average attitude towards the city also appear to have been living in the city for an above (below) average amount of time and vice versa. Correlation helps us to quantify this relationship. Before you proceed to compute the correlation coefficient, you should first look at the data. We usually use a scatterplot to visualize the relationship between two metric variables: Figure 1.5: Scatterplot for durationand attitute variables How can we compute the correlation coefficient? Remember that the variance measures the average deviation from the mean of a variable: \\[\\begin{equation} \\begin{split} s_x^2&amp;=\\frac{\\sum_{i=1}^{N} (X_i-\\overline{X})^2}{N-1} \\\\ &amp;= \\frac{\\sum_{i=1}^{N} (X_i-\\overline{X})*(X_i-\\overline{X})}{N-1} \\end{split} \\tag{7.1} \\end{equation}\\] When we consider two variables, we multiply the deviation for one variable by the respective deviation for the second variable: \\((X_i-\\overline{X})*(Y_i-\\overline{Y})\\) This is called the cross-product deviation. Then we sum the cross-product deviations: \\(\\sum_{i=1}^{N}(X_i-\\overline{X})*(Y_i-\\overline{Y})\\) … and compute the average of the sum of all cross-product deviations to get the covariance: \\[\\begin{equation} Cov(x, y) =\\frac{\\sum_{i=1}^{N}(X_i-\\overline{X})*(Y_i-\\overline{Y})}{N-1} \\tag{7.2} \\end{equation}\\] You can easily compute the covariance manually as follows x &lt;- att_data$duration x_bar &lt;- mean(att_data$duration) y &lt;- att_data$attitude y_bar &lt;- mean(att_data$attitude) N &lt;- nrow(att_data) cov &lt;- (sum((x - x_bar) * (y - y_bar)))/(N - 1) cov ## [1] 16.333333 Or you simply use the built-in cov() function: cov(att_data$duration, att_data$attitude) # apply the cov function ## [1] 16.333333 A positive covariance indicates that as one variable deviates from the mean, the other variable deviates in the same direction. A negative covariance indicates that as one variable deviates from the mean (e.g., increases), the other variable deviates in the opposite direction (e.g., decreases). However, the size of the covariance depends on the scale of measurement. Larger scale units will lead to larger covariance. To overcome the problem of dependence on measurement scale, we need to convert the covariance to a standard set of units through standardization by dividing the covariance by the standard deviation (similar to how we compute z-scores). With two variables, there are two standard deviations. We simply multiply the two standard deviations. We then divide the covariance by the product of the two standard deviations to get the standardized covariance, which is known as a correlation coefficient r: \\[\\begin{equation} r=\\frac{Cov_{xy}}{s_x*s_y} \\tag{7.3} \\end{equation}\\] This is known as the product moment correlation (r) and it is straight-forward to compute: x_sd &lt;- sd(att_data$duration) y_sd &lt;- sd(att_data$attitude) r &lt;- cov/(x_sd * y_sd) r ## [1] 0.93607782 Or you could just use the cor() function: cor(att_data[, c(&quot;attitude&quot;, &quot;duration&quot;)], method = &quot;pearson&quot;, use = &quot;complete&quot;) ## attitude duration ## attitude 1.00000000 0.93607782 ## duration 0.93607782 1.00000000 The properties of the correlation coefficient (‘r’) are: ranges from -1 to + 1 +1 indicates perfect linear relationship -1 indicates perfect negative relationship 0 indicates no linear relationship ± .1 represents small effect ± .3 represents medium effect ± .5 represents large effect 7.1.2 Significance testing How can we determine if our two variables are significantly related? To test this, we denote the population moment correlation ρ. Then we test the null of no relationship between variables: \\[H_0:\\rho=0\\] \\[H_1:\\rho\\ne0\\] The test statistic is: \\[\\begin{equation} t=\\frac{r*\\sqrt{N-2}}{\\sqrt{1-r^2}} \\tag{7.4} \\end{equation}\\] It has a t distribution with n - 2 degrees of freedom. Then, we follow the usual procedure of calculating the test statistic and comparing the test statistic to the critical value of the underlying probability distribution. If the calculated test statistic is larger than the critical value, the null hypothesis of no relationship between X and Y is rejected. t_calc &lt;- r * sqrt(N - 2)/sqrt(1 - r^2) #calculated test statistic t_calc ## [1] 8.4144314 df &lt;- (N - 2) #degrees of freedom t_crit &lt;- qt(0.975, df) #critical value t_crit ## [1] 2.2281389 pt(q = t_calc, df = df, lower.tail = F) * 2 #p-value ## [1] 0.0000075451612 Or you can simply use the cor.test() function, which also produces the 95% confidence interval: cor.test(att_data$attitude, att_data$duration, alternative = &quot;two.sided&quot;, method = &quot;pearson&quot;, conf.level = 0.95) ## ## Pearson&#39;s product-moment correlation ## ## data: att_data$attitude and att_data$duration ## t = 8.41443, df = 10, p-value = 0.0000075452 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.78260411 0.98228152 ## sample estimates: ## cor ## 0.93607782 To determine the linear relationship between variables, the data only needs to be measured using interval scales. If you want to test the significance of the association, the sampling distribution needs to be normally distributed (we usually assume this when our data are normally distributed or when N is large). If parametric assumptions are violated, you should use non-parametric tests: Spearman’s correlation coefficient: requires ordinal data and ranks the data before applying Pearson’s equation. Kendall’s tau: use when N is small or the number of tied ranks is large. cor.test(att_data$attitude, att_data$duration, alternative = &quot;two.sided&quot;, method = &quot;spearman&quot;, conf.level = 0.95) ## ## Spearman&#39;s rank correlation rho ## ## data: att_data$attitude and att_data$duration ## S = 14.1969, p-value = 0.0000021833 ## alternative hypothesis: true rho is not equal to 0 ## sample estimates: ## rho ## 0.95036059 cor.test(att_data$attitude, att_data$duration, alternative = &quot;two.sided&quot;, method = &quot;kendall&quot;, conf.level = 0.95) ## ## Kendall&#39;s rank correlation tau ## ## data: att_data$attitude and att_data$duration ## z = 3.90948, p-value = 0.000092496 ## alternative hypothesis: true tau is not equal to 0 ## sample estimates: ## tau ## 0.89602867 Report the results: A Pearson product-moment correlation coefficient was computed to assess the relationship between the duration of residence in a city and the attitude toward the city. There was a positive correlation between the two variables, r = 0.936, n = 12, p &lt; 0.05. A scatterplot summarizes the results (Figure XY). A note on the interpretation of correlation coefficients: As we have already seen in chapter 1, correlation coefficients give no indication of the direction of causality. In our example, we can conclude that the attitude toward the city is more positive as the years of residence increases. However, we cannot say that the years of residence cause the attitudes to be more positive. There are two main reasons for caution when interpreting correlations: Third-variable problem: there may be other unobserved factors that affect both the ‘attitude towards a city’ and the ‘duration of residency’ variables Direction of causality: Correlations say nothing about which variable causes the other to change (reverse causality: attitudes may just as well cause the years of residence variable). 7.2 Regression Correlations measure relationships between variables (i.e., how much two variables covary). Using regression analysis we can predict the outcome of a dependent variable (Y) from one or more independent variables (X). For example, we could be interested in how many products will we will sell if we increase the advertising expenditures by 1000 Euros? In regression analysis, we fit a model to our data and use it to predict the values of the dependent variable from one predictor variable (bivariate regression) or several predictor variables (multiple regression). The following table shows a comparison of correlation and regression analysis:   Correlation Regression Estimated coefficient Coefficient of correlation (bounded between -1 and +1) Regression coefficient (not bounded a priori) Interpretation Linear association between two variables; Association is bidirectional (Linear) relation between one or more independent variables and dependent variable; Relation is directional Role of theory Theory neither required nor testable Theory required and testable 7.2.1 Simple linear regression In simple linear regression, we assess the relationship between one dependent (regressand) and one independent (regressor) variable. The goal is to fit a line through a scatterplot of observations in order to find the line that best describes the data (scatterplot). Suppose you are a marketing research analyst at a music label and your task is to suggest, on the basis of historical data, a marketing plan for the next year that will maximize product sales. The data set that is available to you includes information on the sales of music downloads (units), advertising expenditures (in thousands of Euros), the number of radio plays an artist received per week (airplay), the number of previous releases of an artist (starpower), repertoire origin (country; 0 = local, 1 = international), and genre (1 = rock, 2 = pop, 3 = electronic). Let’s load and inspect the data first: regression &lt;- read.table(&quot;https://raw.githubusercontent.com/IMSMWU/Teaching/master/MRDA2017/music_sales_regression.dat&quot;, sep = &quot;\\t&quot;, header = TRUE) #read in data regression$country &lt;- factor(regression$country, levels = c(0:1), labels = c(&quot;local&quot;, &quot;international&quot;)) #convert grouping variable to factor regression$genre &lt;- factor(regression$genre, levels = c(1:3), labels = c(&quot;rock&quot;, &quot;pop&quot;, &quot;electronic&quot;)) #convert grouping variable to factor head(regression) psych::describe(regression) #descriptive statistics using psych ## vars n mean sd median trimmed mad min max range ## sales 1 200 193.20 80.70 200.00 192.69 88.96 10.0 360.00 350.00 ## adspend 2 200 614.41 485.66 531.92 560.81 489.09 9.1 2271.86 2262.76 ## airplay 3 200 27.50 12.27 28.00 27.46 11.86 0.0 63.00 63.00 ## starpower 4 200 6.77 1.40 7.00 6.88 1.48 1.0 10.00 9.00 ## genre* 5 200 2.40 0.79 3.00 2.50 0.00 1.0 3.00 2.00 ## country* 6 200 1.17 0.38 1.00 1.09 0.00 1.0 2.00 1.00 ## skew kurtosis se ## sales 0.04 -0.72 5.71 ## adspend 0.84 0.17 34.34 ## airplay 0.06 -0.09 0.87 ## starpower -1.27 3.56 0.10 ## genre* -0.83 -0.91 0.06 ## country* 1.74 1.05 0.03 As stated above, regression analysis may be used to relate a quantitative response (“dependent variable”) to one or more predictor variables (“independent variables”). In a simple linear regression, we have one dependent and one independent variable and we regress the dependent variable on the independent variable. Here are a few important questions that we might seek to address based on the data: Is there a relationship between advertising budget and sales? How strong is the relationship between advertising budget and sales? Which other variables contribute to sales? How accurately can we estimate the effect of each variable on sales? How accurately can we predict future sales? Is the relationship linear? Is there synergy among the advertising activities? We may use linear regression to answer these questions. We will see later that the interpretation of the results strongly depends on the goal of the analysis - whether you would like to simply predict an outcome variable or you would like to explain the causal effect of the independent variable on the dependent variable (see chapter 1). Let’s start with the first question and investigate the relationship between advertising and sales. 7.2.1.1 Estimating the coefficients A simple linear regression model only has one predictor and can be written as: \\[\\begin{equation} Y=\\beta_0+\\beta_1X+\\epsilon \\tag{7.5} \\end{equation}\\] In our specific context, let’s consider only the influence of advertising on sales for now: \\[\\begin{equation} Sales=\\beta_0+\\beta_1*adspend+\\epsilon \\tag{7.6} \\end{equation}\\] The word “adspend” represents data on advertising expenditures that we have observed and β1 (the “slope”“) represents the unknown relationship between advertising expenditures and sales. It tells you by how much sales will increase for an additional Euro spent on advertising. β0 (the”intercept”) is the number of sales we would expect if no money is spent on advertising. Together, β0 and β1 represent the model coefficients or parameters. The error term (ε) captures everything that we miss by using our model, including, (1) misspecifications (the true relationship might not be linear), (2) omitted variables (other variables might drive sales), and (3) measurement error (our measurement of the variables might be imperfect). Once we have used our training data to produce estimates for the model coefficients, we can predict future sales on the basis of a particular value of advertising expenditures by computing: \\[\\begin{equation} \\hat{Sales}=\\hat{\\beta_0}+\\hat{\\beta_1}*adspend \\tag{7.7} \\end{equation}\\] We use the hat symbol, ^, to denote the estimated value for an unknown parameter or coefficient, or to denote the predicted value of the response (sales). In practice, β0 and β1 are unknown and must be estimated from the data to make predictions. In the case of our advertising example, the data set consists of the advertising budget and product sales of 200 music songs (n = 200). Our goal is to obtain coefficient estimates such that the linear model fits the available data well. In other words, we fit a line through the scatterplot of observations and try to find the line that best describes the data. The following graph shows the scatterplot for our data, where the black line shows the regression line. The grey vertical lines shows the difference between the predicted values (the regression line) and the observed values. This difference is referred to as the residuals (“e”). Figure 1.14: Ordinary least squares (OLS) The estimation of the regression function is based on the idea of the method of least squares (OLS = ordinary least squares). The first step is to calculate the residuals by subtracting the observed values from the predicted values. \\(e_i = Y_i-(\\beta_0+\\beta_1X_i)\\) This difference is then minimized by minimizing the sum of the squared residuals: \\[\\begin{equation} \\sum_{i=1}^{N} e_i^2= \\sum_{i=1}^{N} [Y_i-(\\beta_0+\\beta_1X_i)]^2\\rightarrow min! \\tag{7.8} \\end{equation}\\] ei: Residuals (i = 1, 2, …, N) Yi: Values of the dependent variable (i = 1, 2, …, N) β0: Intercept β1: Regression coefficient / slope parameters Xni: Values of the nth independent variables and the ith observation N: Number of observations This is also referred to as the residual sum of squares (RSS), which you may still remember from the previous chapter on ANOVA. Now we need to choose the values for β0 and β1 that minimize RSS. So how can we derive these values for the regression coefficient? The equation for β1 is given by: \\[\\begin{equation} \\hat{\\beta_1}=\\frac{COV_{XY}}{s_x^2} \\tag{7.9} \\end{equation}\\] The exact mathematical derivation of this formula is beyond the scope of this script, but the intuition is to calculate the first derivative of the squared residuals with respect to β1 and set it to zero, thereby finding the β1 that minimizes the term. Using the above formula, you can easily compute β1 using the following code: cov_y_x &lt;- cov(regression$adspend, regression$sales) cov_y_x ## [1] 22672.016 var_x &lt;- var(regression$adspend) var_x ## [1] 235860.98 beta_1 &lt;- cov_y_x/var_x beta_1 ## [1] 0.096124486 The interpretation of β1 is as follows: For every extra Euro spent on advertising, sales can be expected to increase by 0.096 units. Or, in other words, if we increase our marketing budget by 1,000 Euros, sales can be expected to increase by 96 units. Using the estimated coefficient for β1, it is easy to compute β0 (the intercept) as follows: \\[\\begin{equation} \\hat{\\beta_0}=\\overline{Y}-\\hat{\\beta_1}\\overline{X} \\tag{7.10} \\end{equation}\\] The R code for this is: beta_0 &lt;- mean(regression$sales) - beta_1 * mean(regression$adspend) beta_0 ## [1] 134.13994 The interpretation of β0 is as follows: If we spend no money on advertising, we would expect to sell 134.14 (134) units. You may also verify this based on a scatterplot of the data. The following plot shows the scatterplot including the regression line, which is estimated using OLS. ggplot(regression, mapping = aes(adspend, sales)) + geom_point(shape = 1) + geom_smooth(method = &quot;lm&quot;, fill = &quot;blue&quot;, alpha = 0.1) + labs(x = &quot;Advertising expenditures (EUR)&quot;, y = &quot;Number of sales&quot;) + theme_bw() Figure 1.17: Scatterplot You can see that the regression line intersects with the y-axis at 134.14, which corresponds to the expected sales level when advertising expenditure (on the x-axis) is zero (i.e., the intercept β0). The slope coefficient (β1) tells you by how much sales (on the y-axis) would increase if advertising expenditures (on the x-axis) are increased by one unit. 7.2.1.2 Significance testing In a next step, we assess if the effect of advertising on sales is statistically significant. This means that we test the null hypothesis H0: “There is no relationship between advertising and sales” versus the alternative hypothesis H1: “The is some relationship between advertising and sales”. Or, to state this formally: \\[H_0:\\beta_1=0\\] \\[H_1:\\beta_1\\ne0\\] How can we test if the effect is statistically significant? Recall the generalized equation to derive a test statistic: \\[\\begin{equation} test\\ statistic = \\frac{effect}{error} \\tag{7.11} \\end{equation}\\] The effect is given by the β1 coefficient in this case. To compute the test statistic, we need to come up with a measure of uncertainty around this estimate (the error). This is because we use information from a sample to estimate the least squares line to make inferences regarding the regression line in the entire population. Since we only have access to one sample, the regression line will be slightly different every time we take a different sample from the population. This is sampling variation and it is perfectly normal! It just means that we need to take into account the uncertainty around the estimate, which is achieved by the standard error. Thus, the test statistic for our hypothesis is given by: \\[\\begin{equation} t = \\frac{\\hat{\\beta_1}}{SE(\\hat{\\beta_1})} \\tag{7.12} \\end{equation}\\] After calculating the test statistic, we compare its value to the values that we would expect to find if there was no effect based on the t-distribution. In a regression context, the degrees of freedom are given by N - p - 1 where N is the sample size and p is the number of predictors. In our case, we have 200 observations and one predictor. Thus, the degrees of freedom is 200 - 1 - 1 = 198. In the regression output below, R provides the exact probability of observing a t value of this magnitude (or larger) if the null hypothesis was true. This probability - as we already saw in chapter 6 - is the p-value. A small p-value indicates that it is unlikely to observe such a substantial association between the predictor and the outcome variable due to chance in the absence of any real association between the predictor and the outcome. To estimate the regression model in R, you can use the lm() function. Within the function, you first specify the dependent variable (“sales”) and independent variable (“adspend”) separated by a ~ (tilde). As mentioned previously, this is known as formula notation in R. The data = regression argument specifies that the variables come from the data frame named “regression”. Strictly speaking, you use the lm() function to create an object called “simple_regression,” which holds the regression output. You can then view the results using the summary() function: simple_regression &lt;- lm(sales ~ adspend, data = regression) #estimate linear model summary(simple_regression) #summary of results ## ## Call: ## lm(formula = sales ~ adspend, data = regression) ## ## Residuals: ## Min 1Q Median 3Q Max ## -152.9493 -43.7961 -0.3933 37.0404 211.8658 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 134.1399378 7.5365747 17.7985 &lt; 0.00000000000000022 *** ## adspend 0.0961245 0.0096324 9.9793 &lt; 0.00000000000000022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 65.991 on 198 degrees of freedom ## Multiple R-squared: 0.33465, Adjusted R-squared: 0.33129 ## F-statistic: 99.587 on 1 and 198 DF, p-value: &lt; 0.000000000000000222 Note that the estimated coefficients for β0 (134.14) and β1 (0.096) correspond to the results of our manual computation above. The associated t-values and p-values are given in the output. The t-values are larger than the critical t-values for the 95% confidence level, since the associated p-values are smaller than 0.05. In case of the coefficient for β1, this means that the probability of an association between the advertising and sales of the observed magnitude (or larger) is smaller than 0.05, if the value of β1 was, in fact, 0. This finding leads us to reject the null hypothesis of no association between advertising and sales. The coefficients associated with the respective variables represent point estimates. To obtain a better understanding of the range of values that the coefficients could take, it is helpful to compute confidence intervals. A 95% confidence interval is defined as a range of values such that with a 95% probability, the range will contain the true unknown value of the parameter. For example, for β1, the confidence interval can be computed as. \\[\\begin{equation} CI = \\hat{\\beta_1}\\pm(t_{1-\\frac{\\alpha}{2}}*SE(\\beta_1)) \\tag{7.13} \\end{equation}\\] It is easy to compute confidence intervals in R using the confint() function. You just have to provide the name of you estimated model as an argument: confint(simple_regression) ## 2.5 % 97.5 % ## (Intercept) 119.277680821 149.00219480 ## adspend 0.077129291 0.11511968 For our model, the 95% confidence interval for β0 is [119.28,149], and the 95% confidence interval for β1 is [0.08,0.12]. Thus, we can conclude that when we do not spend any money on advertising, sales will be somewhere between 119 and 149 units on average. In addition, for each increase in advertising expenditures by one Euro, there will be an average increase in sales of between 0.08 and 0.12. If you revisit the graphic depiction of the regression model above, the uncertainty regarding the intercept and slope parameters can be seen in the confidence bounds (blue area) around the regression line. 7.2.1.3 Assessing model fit Once we have rejected the null hypothesis in favor of the alternative hypothesis, the next step is to investigate how well the model represents (“fits”) the data. How can we assess the model fit? First, we calculate the fit of the most basic model (i.e., the mean) Then, we calculate the fit of the best model (i.e., the regression model) A good model should fit the data significantly better than the basic model R2: Represents the percentage of the variation in the outcome that can be explained by the model The F-ratio measures how much the model has improved the prediction of the outcome compared to the level of inaccuracy in the model Similar to ANOVA, the calculation of model fit statistics relies on estimating the different sum of squares values. SST is the difference between the observed data and the mean value of Y (aka. total variation). In the absence of any other information, the mean value of Y (\\(\\overline{Y}\\)) represents the best guess on where a particular observation \\(Y_{i}\\) at a given level of advertising will fall: \\[\\begin{equation} SS_T= \\sum_{i=1}^{N} (Y_i-\\overline{Y})^2 \\tag{7.14} \\end{equation}\\] The following graph shows the total sum of squares: Figure 1.20: Total sum of squares Based on our linear model, the best guess about the sales level at a given level of advertising is the predicted value \\(\\hat{Y}_i\\). The model sum of squares (SSM) therefore has the mathematical representation: \\[\\begin{equation} SS_M= \\sum_{i=1}^{N} (\\hat{Y}_i-\\overline{Y})^2 \\tag{7.15} \\end{equation}\\] The model sum of squares represents the improvement in prediction resulting from using the regression model rather than the mean of the data. The following graph shows the model sum of squares for our example: Figure 1.21: Ordinary least squares (OLS) The residual sum of squares (SSR) is the difference between the observed data points (\\(Y_{i}\\)) and the predicted values along the regression line (\\(\\hat{Y}_{i}\\)), i.e., the variation not explained by the model. \\[\\begin{equation} SS_R= \\sum_{i=1}^{N} ({Y}_{i}-\\hat{Y}_{i})^2 \\tag{7.16} \\end{equation}\\] The following graph shows the residual sum of squares for our example: Figure 1.22: Ordinary least squares (OLS) Based on these statistics, we can determine have well the model fits the data as we will see next. R-squared The R2 statistic represents the proportion of variance that is explained by the model and is computed as: \\[\\begin{equation} R^2= \\frac{SS_M}{SS_T} \\tag{7.16} \\end{equation}\\] It takes values between 0 (very bad fit) and 1 (very good fit). Note that when the goal of your model is to predict future outcomes, a “too good” model fit can pose severe challenges. The reason is that the model might fit your specific sample so well, that it will only predict well within the sample but not generalize to other samples. This is called overfitting and it shows that there is a trade-off between model fit and out-of-sample predictive ability of the model, if the goal is to predict beyond the sample. We will come back to this point later in this chapter. You can get a first impression of the fit of the model by inspecting the scatter plot as can be seen in the plot below. If the observations are highly dispersed around the regression line (left plot), the fit will be lower compared to a data set where the values are less dispersed (right plot). Figure 1.23: Good vs. bad model fit The R2 statistic is reported in the regression output (see above). However, you could also extract the relevant sum of squares statistics from the regression object using the anova() function to compute it manually: anova(simple_regression) #anova results ## Analysis of Variance Table ## ## Response: sales ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## adspend 1 433688 433688 99.6 &lt;0.0000000000000002 *** ## Residuals 198 862264 4355 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Now we can compute R2 in the same way that we have computed Eta2 in the last section: r2 &lt;- anova(simple_regression)$&quot;Sum Sq&quot;[1]/(anova(simple_regression)$&quot;Sum Sq&quot;[1] + anova(simple_regression)$&quot;Sum Sq&quot;[2]) #compute R2 r2 ## [1] 0.33 Adjusted R-squared Due to the way the R2 statistic is calculated, it will never decrease if a new explanatory variable is introduced into the model. This means that every new independent variable either doesn’t change the R2 or increases it, even if there is no real relationship between the new variable and the dependent variable. Hence, one could be tempted to just add as many variables as possible to increase the R2 and thus obtain a “better” model. However, this actually only leads to more noise and therefore a worse model. To account for this, there exists a test statistic closely related to the R2, the adjusted R2. It can be calculated as follows: \\[\\begin{equation} \\overline{R^2} = 1 - (1 - R^2)\\frac{n-1}{n - k - 1} \\tag{7.17} \\end{equation}\\] where n is the total number of observations and k is the total number of explanatory variables. The adjusted R2 is equal to or less than the regular R2 and can be negative. It will only increase if the added variable adds more explanatory power than one would expect by pure chance. Essentially, it contains a “penalty” for including unnecessary variables and therefore favors more parsimonious models. As such, it is a measure of suitability, good for comparing different models and is very useful in the model selection stage of a project. In R, the standard lm() function automatically also reports the adjusted R2 as you can see above. F-test Similar to the ANOVA in chapter 6, another significance test is the F-test, which tests the null hypothesis: \\[H_0:R^2=0\\] Or, to state it slightly differently: \\[H_0:\\beta_1=\\beta_2=\\beta_3=\\beta_k=0\\] This means that, similar to the ANOVA, we test whether any of the included independent variables has a significant effect on the dependent variable. So far, we have only included one independent variable, but we will extend the set of predictor variables below. The F-test statistic is calculated as follows: \\[\\begin{equation} F=\\frac{\\frac{SS_M}{k}}{\\frac{SS_R}{(n-k-1)}}=\\frac{MS_M}{MS_R} \\tag{7.16} \\end{equation}\\] which has a F distribution with k (number of predictors) and (n — k — 1) degrees of freedom. In other words, you divide the systematic (“explained”) variation due to the predictor variables by the unsystematic (“unexplained”) variation. The result of the F-test is provided in the regression output. However, you might manually compute the F-test using the ANOVA results from the model: anova(simple_regression) #anova results ## Analysis of Variance Table ## ## Response: sales ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## adspend 1 433688 433688 99.587 &lt; 0.00000000000000022 *** ## Residuals 198 862264 4355 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 f_calc &lt;- anova(simple_regression)$&quot;Mean Sq&quot;[1]/anova(simple_regression)$&quot;Mean Sq&quot;[2] #compute F f_calc ## [1] 99.58687 f_crit &lt;- qf(0.95, df1 = 1, df2 = 198) #critical value f_crit ## [1] 3.888853 f_calc &gt; f_crit #test if calculated test statistic is larger than critical value ## [1] TRUE 7.2.1.4 Using the model After fitting the model, we can use the estimated coefficients to predict sales for different values of advertising. Suppose you want to predict sales for a new product, and the company plans to spend 800 Euros on advertising. How much will it sell? You can easily compute this either by hand: \\[\\hat{sales}=134.134 + 0.09612*800=211\\] … or by extracting the estimated coefficients from the model summary: summary(simple_regression)$coefficients[1,1] + # the intercept summary(simple_regression)$coefficients[2,1]*800 # the slope * 800 ## [1] 211 The predicted value of the dependent variable is 211 units, i.e., the product will (on average) sell 211 units. 7.2.2 Multiple linear regression Multiple linear regression is a statistical technique that simultaneously tests the relationships between two or more independent variables and an interval-scaled dependent variable. The general form of the equation is given by: \\[\\begin{equation} Y=(\\beta_0+\\beta_1*X_1+\\beta_2*X_2+\\beta_n*X_n)+\\epsilon \\tag{7.5} \\end{equation}\\] Again, we aim to find the linear combination of predictors that correlate maximally with the outcome variable. Note that if you change the composition of predictors, the partial regression coefficient of an independent variable will be different from that of the bivariate regression coefficient. This is because the regressors are usually correlated, and any variation in Y that was shared by X1 and X2 was attributed to X1. The interpretation of the partial regression coefficients is the expected change in Y when X is changed by one unit and all other predictors are held constant. Let’s extend the previous example. Say, in addition to the influence of advertising, you are interested in estimating the influence of radio airplay on the number of album downloads. The corresponding equation would then be given by: \\[\\begin{equation} Sales=\\beta_0+\\beta_1*adspend+\\beta_2*airplay+\\epsilon \\tag{7.6} \\end{equation}\\] The words “adspend” and “airplay” represent data that we have observed on advertising expenditures and number of radio plays, and β1 and β2 represent the unknown relationship between sales and advertising expenditures and radio airplay, respectively. The corresponding coefficients tell you by how much sales will increase for an additional Euro spent on advertising (when radio airplay is held constant) and by how much sales will increase for an additional radio play (when advertising expenditures are held constant). Thus, we can make predictions about album sales based not only on advertising spending, but also on radio airplay. With several predictors, the partitioning of sum of squares is the same as in the bivariate model, except that the model is no longer a 2-D straight line. With two predictors, the regression line becomes a 3-D regression plane. In our example: Figure 4.1: Regression plane Like in the bivariate case, the plane is fitted to the data with the aim to predict the observed data as good as possible. The deviation of the observations from the plane represent the residuals (the error we make in predicting the observed data from the model). Note that this is conceptually the same as in the bivariate case, except that the computation is more complex (we won’t go into details here). The model is fairly easy to plot using a 3-D scatterplot, because we only have two predictors. While multiple regression models that have more than two predictors are not as easy to visualize, you may apply the same principles when interpreting the model outcome: Total sum of squares (SST) is still the difference between the observed data and the mean value of Y (total variation) Residual sum of squares (SSR) is still the difference between the observed data and the values predicted by the model (unexplained variation) Model sum of squares (SSM) is still the difference between the values predicted by the model and the mean value of Y (explained variation) R measures the multiple correlation between the predictors and the outcome R2 is the amount of variation in the outcome variable explained by the model Estimating multiple regression models is straightforward using the lm() function. You just need to separate the individual predictors on the right hand side of the equation using the + symbol. For example, the model: \\[\\begin{equation} Sales=\\beta_0+\\beta_1*adspend+\\beta_2*airplay+\\beta_3*starpower+\\epsilon \\tag{7.6} \\end{equation}\\] could be estimated as follows: multiple_regression &lt;- lm(sales ~ adspend + airplay + starpower, data = regression) #estimate linear model summary(multiple_regression) #summary of results ## ## Call: ## lm(formula = sales ~ adspend + airplay + starpower, data = regression) ## ## Residuals: ## Min 1Q Median 3Q Max ## -121.32 -28.34 -0.45 28.97 144.13 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -26.61296 17.35000 -1.53 0.13 ## adspend 0.08488 0.00692 12.26 &lt; 0.0000000000000002 *** ## airplay 3.36743 0.27777 12.12 &lt; 0.0000000000000002 *** ## starpower 11.08634 2.43785 4.55 0.0000095 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 47 on 196 degrees of freedom ## Multiple R-squared: 0.665, Adjusted R-squared: 0.66 ## F-statistic: 129 on 3 and 196 DF, p-value: &lt;0.0000000000000002 The interpretation of the coefficients is as follows: adspend (β1): when advertising expenditures increase by 1 Euro, sales will increase by 0.085 units airplay (β2): when radio airplay increases by 1 play per week, sales will increase by 3.367 units starpower (β3): when the number of previous albums increases by 1, sales will increase by 11.086 units The associated t-values and p-values are also given in the output. You can see that the p-values are smaller than 0.05 for all three coefficients. Hence, all effects are “significant”. This means that if the null hypothesis was true (i.e., there was no effect between the variables and sales), the probability of observing associations of the estimated magnitudes (or larger) is very small (e.g., smaller than 0.05). Again, to get a better feeling for the range of values that the coefficients could take, it is helpful to compute confidence intervals. confint(multiple_regression) ## 2.5 % 97.5 % ## (Intercept) -60.830 7.604 ## adspend 0.071 0.099 ## airplay 2.820 3.915 ## starpower 6.279 15.894 What does this tell you? Recall that a 95% confidence interval is defined as a range of values such that with a 95% probability, the range will contain the true unknown value of the parameter. For example, for β3, the confidence interval is [6.2785522,15.8941182]. Thus, although we have computed a point estimate of 11.086 for the effect of starpower on sales based on our sample, the effect might actually just as well take any other value within this range, considering the sample size and the variability in our data. You could also visualize the output from your regression model including the confidence intervals using the ggstatsplot package as follows: library(ggstatsplot) ggcoefstats(x = multiple_regression, title = &quot;Sales predicted by adspend, airplay, &amp; starpower&quot;) Figure 4.3: Confidence intervals for regression model The output also tells us that 66.4667687% of the variation can be explained by our model. You may also visually inspect the fit of the model by plotting the predicted values against the observed values. We can extract the predicted values using the predict() function. So let’s create a new variable yhat, which contains those predicted values. regression$yhat &lt;- predict(simple_regression) We can now use this variable to plot the predicted values against the observed values. In the following plot, the model fit would be perfect if all points would fall on the diagonal line. The larger the distance between the points and the line, the worse the model fit. In other words, if all points would fall exactly on the diagonal line, the model would perfectly predict the observed values. ggplot(regression,aes(yhat,sales)) + geom_point(size=2,shape=1) + #Use hollow circles scale_x_continuous(name=&quot;predicted values&quot;) + scale_y_continuous(name=&quot;observed values&quot;) + geom_abline(intercept = 0, slope = 1) + theme_bw() Figure 6.4: Model fit Partial plots In the context of a simple linear regression (i.e., with a single independent variable), a scatter plot of the dependent variable against the independent variable provides a good indication of the nature of the relationship. If there is more than one independent variable, however, things become more complicated. The reason is that although the scatter plot still show the relationship between the two variables, it does not take into account the effect of the other independent variables in the model. Partial regression plot show the effect of adding another variable to a model that already controls for the remaining variables in the model. In other words, it is a scatterplot of the residuals of the outcome variable and each predictor when both variables are regressed separately on the remaining predictors. As an example, consider the effect of advertising expenditures on sales. In this case, the partial plot would show the effect of adding advertising expenditures as an explanatory variable while controlling for the variation that is explained by airplay and starpower in both variables (sales and advertising). Think of it as the purified relationship between advertising and sales that remains after controlling for other factors. The partial plots can easily be created using the avPlots() function from the car package: library(car) avPlots(multiple_regression) Figure 6.6: Partial plots Using the model After fitting the model, we can use the estimated coefficients to predict sales for different values of advertising, airplay, and starpower. Suppose you would like to predict sales for a new music album with advertising expenditures of 800, airplay of 30 and starpower of 5. How much will it sell? \\[\\hat{sales}=−26.61 + 0.084 * 800 + 3.367*30 + 11.08 ∗ 5= 197.74\\] … or by extracting the estimated coefficients: summary(multiple_regression)$coefficients[1, 1] + summary(multiple_regression)$coefficients[2, 1] * 800 + summary(multiple_regression)$coefficients[3, 1] * 30 + summary(multiple_regression)$coefficients[4, 1] * 5 ## [1] 198 The predicted value of the dependent variable is 198 units, i.e., the product will sell 198 units. Comparing effects Using the output from the regression model above, it is difficult to compare the effects of the independent variables because they are all measured on different scales (Euros, radio plays, releases). Standardized regression coefficients can be used to judge the relative importance of the predictor variables. Standardization is achieved by multiplying the unstandardized coefficient by the ratio of the standard deviations of the independent and dependent variables: \\[\\begin{equation} B_{k}=\\beta_{k} * \\frac{s_{x_k}}{s_y} \\tag{7.18} \\end{equation}\\] Hence, the standardized coefficient will tell you by how many standard deviations the outcome will change as a result of a one standard deviation change in the predictor variable. Standardized coefficients can be easily computed using the lm.beta() function from the lm.beta package. library(lm.beta) lm.beta(multiple_regression) ## ## Call: ## lm(formula = sales ~ adspend + airplay + starpower, data = regression) ## ## Standardized Coefficients:: ## (Intercept) adspend airplay starpower ## NA 0.51 0.51 0.19 The results show that for adspend and airplay, a change by one standard deviation will result in a 0.51 standard deviation change in sales, whereas for starpower, a one standard deviation change will only lead to a 0.19 standard deviation change in sales. Hence, while the effects of adspend and airplay are comparable in magnitude, the effect of starpower is less strong. 7.3 Potential problems Once you have built and estimated your model it is important to run diagnostics to ensure that the results are accurate. In the following section we will discuss common problems. 7.3.1 Outliers Outliers are data points that differ vastly from the trend. They can introduce bias into a model due to the fact that they alter the parameter estimates. Consider the example below. A linear regression was performed twice on the same data set, except during the second estimation the two green points were changed to be outliers by being moved to the positions indicated in red. The solid red line is the regression line based on the unaltered data set, while the dotted line was estimated using the altered data set. As you can see the second regression would lead to different conclusions than the first. Therefore it is important to identify outliers and further deal with them. Figure 4.6: Effects of outliers One quick way to visually detect outliers is by creating a scatterplot (as above) to see whether anything seems off. Another approach is to inspect the studentized residuals. If there are no outliers in your data, about 95% will be between -2 and 2, as per the assumptions of the normal distribution. Values well outside of this range are unlikely to happen by chance and warrant further inspection. As a rule of thumb, observations whose studentized residuals are greater than 3 in absolute values are potential outliers. The studentized residuals can be obtained in R with the function rstudent(). We can use this function to create a new variable that contains the studentized residuals e music sales regression from before yields the following residuals: regression$stud_resid &lt;- rstudent(multiple_regression) head(regression) A good way to visually inspect the studentized residuals is to plot them in a scatterplot and roughly check if most of the observations are within the -3, 3 bounds. plot(1:nrow(regression), regression$stud_resid, ylim = c(-3.3, 3.3)) #create scatterplot abline(h = c(-3, 3), col = &quot;red&quot;, lty = 2) #add reference lines Figure 4.8: Plot of the studentized residuals To identify potentially influential observations in our data set, we can apply a filter to our data: outliers &lt;- subset(regression, abs(stud_resid) &gt; 3) outliers After a detailed inspection of the potential outliers, you might decide to delete the affected observations from the data set or not. If an outlier has resulted from an error in data collection, then you might simply remove the observation. However, even though data may have extreme values, they might not be influential to determine a regression line. That means, the results wouldn’t be much different if we either include or exclude them from analysis. This means that the decision of whether to exclude an outlier or not is closely related to the question whether this observation is an influential observation, as will be discussed next. 7.3.2 Influential observations Related to the issue of outliers is that of influential observations, meaning observations that exert undue influence on the parameters. It is possible to determine whether or not the results are driven by an influential observation by calculating how far the predicted values for your data would move if the model was fitted without this particular observation. This calculated total distance is called Cook’s distance. To identify influential observations, we can inspect the respective plots created from the model output. A rule of thumb to determine whether an observation should be classified as influential or not is to look for observation with a Cook’s distance &gt; 1 (although opinions vary on this). The following plot can be used to see the Cook’s distance associated with each data point: plot(multiple_regression, 4) Figure 7.1: Cook’s distance It is easy to see that none of the Cook’s distance values is close to the critical value of 1. Another useful plot to identify influential observations is plot number 5 from the output: plot(multiple_regression, 5) Figure 7.2: Residuals vs. Leverage In this plot, we look for cases outside of a dashed line, which represents Cook’s distance. Lines for Cook’s distance thresholds of 0.5 and 1 are included by default. In our example, this line is not even visible, since the Cook’s distance values are far away from the critical values. Generally, you would watch out for outlying values at the upper right corner or at the lower right corner of the plot. Those spots are the places where cases can be influential against a regression line. In our example, there are no influential cases. To see how influential observations can impact your regression, have a look at this example. To summarize, if you detected outliers in your data, you should test if these observations exert undue influence on your results using the Cook’s distance statistic as described above. If you detect observations which bias your results, you should remove these observations. 7.3.3 Non-linearity An important underlying assumption for OLS is that of linearity, meaning that the relationship between the dependent and the independent variable can be reasonably approximated in linear terms. One quick way to assess whether a linear relationship can be assumed is to inspect the added variable plots that we already came across earlier: library(car) avPlots(multiple_regression) Figure 7.3: Partial plots In our example, it appears that linear relationships can be reasonably assumed. Please note, however, that the linear model implies two things: Constant marginal returns Elasticities increase with X These assumptions may not be justifiable in certain contexts. As an example, consider the effect of marketing expenditures on sales. The linear model assumes that if you change your advertising expenditures from, say 10€ to 11€, this will change sales by the same amount as if you would change your marketing expenditure from, say 100,000€ to 100,001€. This is what we mean by constant marginal returns - irrespective of the level of advertising, spending an additional Euro on advertising will change sales by the same amount. Or consider the effect of price on sales. A linear model assumes that changing the price from, say 10€ to 11€, will change the sales by the same amount as increasing the price from, say 20€ to 21€. An elasticity tells you the relative change in the outcome variable (e.g., sales) due to a relative change in the predictor variable. For example, if we change our advertising expenditures by 1%, sales will change by XY%. As we have seen, the linear model assumes constant marginal returns, which implies that the elasticity increases with the level of the independent variable. In our example, advertising becomes relatively more effective since as we move to higher levels of advertising expenditures, a relatively smaller change in advertising expenditure will yield the same return. In marketing applications, it is often more realistic to assume decreasing marginal returns, meaning that the return from an increase in advertising is decreasing with increasing levels of advertising (e.g., and increase in advertising expenditures from 10€ to 11€ will lead to larger changes in sales, compared to a change from, say 100,000€ to 100,001€). We will see how to implement such a model further below in the section on extensions of the non-linear model. To summarize, if you find indications that the linear specification might not represent your data well, you should consider a non-linear specification, which we will cover below. One popular and easy way to implement a non-linear specification in marketing applications is the so-called log-log model, where you take the logarithm of the dependent variable and independent variable(s). This type of model allows for decreasing marginal returns and yields constant elasticity, which is more realistic in many marketing settings. Constant elasticity means that a 1% change in the independent variable yields the same relative return for different levels of the independent variable. If you are unsure which model specification represents your data better, you can also compare different model specifications, e.g., by comparing the explained variance of the models (the better fitting model explains more of the variation in your data), and then opt for the specification that fits your data best. 7.3.4 Non-constant error variance The following video summarizes how to identify non-constant error variance in R Another important assumption of the linear model is that the error terms have a constant variance (i.e., homoskedasticity). The following plot from the model output shows the residuals (the vertical distance from an observed value to the predicted values) versus the fitted values (the predicted value from the regression model). If all the points fell exactly on the dashed grey line, it would mean that we have a perfect prediction. The residual variance (i.e., the spread of the values on the y-axis) should be similar across the scale of the fitted values on the x-axis. plot(multiple_regression, 1) Figure 4.10: Residuals vs. fitted values In our case, this appears to be the case. You can identify non-constant variances in the errors (i.e., heteroscedasticity) from the presence of a funnel shape in the above plot. When the assumption of constant error variances is not met, this might be due to a misspecification of your model (e.g., the relationship might not be linear). In these cases, it often helps to transform your data (e.g., using log-transformations). The red line also helps you to identify potential misspecification of your model. It is a smoothed curve that passes through the residuals and if it lies close to the gray dashed line (as in our case) it suggest a correct specification. If the line would deviate from the dashed grey line a lot (e.g., a U-shape or inverse U-shape), it would suggest that the linear model specification is not reasonable and you should try different specifications. You can also test for heterogskedasticity in you regression model by using the Breusch-Pagan test, which has the null hypothesis that the error variances are equal (i.e., homoskedasticity) versus the alternative that the error variances are not equal (i.e., heteroskedasticity). The test can be implemented using the bptest() function from the lmtest package. library(lmtest) bptest(multiple_regression) ## ## studentized Breusch-Pagan test ## ## data: multiple_regression ## BP = 6, df = 3, p-value = 0.1 As the p-value is larger than 0.05, we cannot reject the null hypothesis of equal error variances so that the assumption of homoskedasticity is met. If OLS is performed despite heteroscedasticity, the estimates of the coefficient will still be correct on average. However, the estimator is inefficient, meaning that the standard error is wrong, which will impact the significance tests (i.e., the p-values will be wrong). Assume that the test would have suggested a violation of the assumption of homoskedasticity - how could you proceed in this case? In the presence of heteroskedasticity, you could rely on robust regression methods, which correct the standard errors. You could implement a robust regression model in R using the coeftest() function from the sandwich package as follows: library(sandwich) coeftest(multiple_regression, vcov = vcovHC(multiple_regression)) ## ## t test of coefficients: ## ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -26.61296 16.17045 -1.65 0.1 ## adspend 0.08488 0.00693 12.25 &lt; 0.0000000000000002 *** ## airplay 3.36743 0.31510 10.69 &lt; 0.0000000000000002 *** ## starpower 11.08634 2.24743 4.93 0.0000017 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 As you can see, the standard errors (and thus the t-values and p-values) are different compared to the non-robust specification above while the coefficients remain unchanged. However, the difference in this example is not too large since the Breusch-Pagan test suggested the presence of homoskedasticity and we could thus rely on the standard output. To summarize, you can inspect if the assumption of homoskedasticity is met using the residual plot and the Breusch-Pagan test. If the assumption is violated, you should try to transform your data (e.g., using a log-transformation) first and see if this solves the problem. If the problem persists, you can rely on the robust standard errors as it is shown in the example above. 7.3.5 Non-normally distributed errors Another assumption of OLS is that the error term is normally distributed. This can be a reasonable assumption for many scenarios, but we still need a way to check if it is actually the case. As we can not directly observe the actual error term, we have to work with the next best thing - the residuals. A quick way to assess whether a given sample is approximately normally distributed is by using Q-Q plots. These plot the theoretical position of the observations (under the assumption that they are normally distributed) against the actual position. The plot below is created by the model output and shows the residuals in a Q-Q plot. As you can see, most of the points roughly follow the theoretical distribution, as given by the straight line. If most of the points are close to the line, the data is approximately normally distributed. plot(multiple_regression, 2) Figure 4.12: Q-Q plot Another way to check for normal distribution of the data is to employ statistical tests that test the null hypothesis that the data is normally distributed, such as the Shapiro–Wilk test. We can extract the residuals from our model using the resid() function and apply the shapiro.test() function to it: shapiro.test(resid(multiple_regression)) ## ## Shapiro-Wilk normality test ## ## data: resid(multiple_regression) ## W = 1, p-value = 0.7 As you can see, we can not reject the H0 of normally distributed residuals, which means that we can assume the residuals to be approximately normally distributed in our example. When the assumption of normally distributed errors is not met, this might again be due to a misspecification of your model, in which case it might help to transform your data (e.g., using log-transformations). If transforming your data doesn’t solve the issue, you may use bootstrapping to obtain corrected results. Bootstrapping is a so-called resampling method in which we use repeated random sampling with replacement to estimate the sampling distribution based on the sample itself, rather than relying on some assumptions about the shape of the sampling distribution to determine the probability of obtaining a test statistic of a particular magnitude. In other words, the data from our sample are treated as the population from which smaller random samples (so-called bootstrap samples) are repeatedly taken with replacement. The statistic of interest, e.g., the regression coefficients in our example, is calculated in each sample, and by taking many samples, the sampling distribution can be estimated. Similar to the simulations we did in chapter 5, the standard error of the statistic can be estimated using the standard deviation of the sampling distribution. Once we have computed the standard error, we can use it to compute the confidence intervals and significance tests. You can find a description of how to implement this procedure in R e.g., here). Essentially, we can use the boot() function contained in the boot package to obtain the bootstrapped results. However, we need to pass this function a statistic to apply the bootstrapping on - in our case, this would be the coefficients from our regression model. To make this easier, we can write a function that returns the coefficients from the model for every bootstrap sample that we take. In the following code block, we specify a function called bs(), which does exactly this (don’t worry if you don’t understand all the details - its basically just another function we can use to automate certain steps in the analysis, only that in this case we have written the function ourselves rather than relying on functions contained in existing packages). # function to obtain regression coefficients bs &lt;- function(formula, data, indices) { d &lt;- data[indices, ] # allows boot to select sample fit &lt;- lm(formula, data = d) return(coef(fit)) } Now that we have specified this function, we can use it within the boot function to obtained the bootstrapped results for the regression coefficients. To do this, we first load the boot package and use the boot function by specifying the following arguments: data: the data set we use (the regression data set in our example) statistic: the statistic(s) we would like to bootstrap (in our example, we use the function we have specified above to obtain the regression coefficients) R: the number of bootstrap samples to use (we will use 2000 samples) formula: the regression equation from which we obtain the coefficients for the bootstrapping procedure We create an object called boot_out, which contains the output from the bootstrapping. # If the residuals do not follow a normal # distribution, transform the data or use # bootstrapping library(boot) # bootstrapping with 2000 replications boot_out &lt;- boot(data = regression, statistic = bs, R = 2000, formula = sales ~ adspend + airplay + starpower) In a next step, let’s extract the 95% confidence intervals for the regression coefficients. The intercept is the first element in the boot_out object and we can use the boot.ci() function and use argument index=1 to obtain the bootstrapped confidence interval for the intercept. The type argument specifies the type of confidence interval we would like to obtain (in this case, we use bias corrected and accelerated, i.e., bca): # get 95% confidence intervals boot.ci(boot_out, type = &quot;bca&quot;, index = 1) # intercept ## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS ## Based on 2000 bootstrap replicates ## ## CALL : ## boot.ci(boot.out = boot_out, type = &quot;bca&quot;, index = 1) ## ## Intervals : ## Level BCa ## 95% (-57.3, 7.8 ) ## Calculations and Intervals on Original Scale We can obtain the confidence intervals for the remaining coefficients in the same way: # get 95% confidence intervals boot.ci(boot_out, type = &quot;bca&quot;, index = 2) # adspend ## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS ## Based on 2000 bootstrap replicates ## ## CALL : ## boot.ci(boot.out = boot_out, type = &quot;bca&quot;, index = 2) ## ## Intervals : ## Level BCa ## 95% ( 0.071, 0.098 ) ## Calculations and Intervals on Original Scale boot.ci(boot_out, type = &quot;bca&quot;, index = 3) # airplay ## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS ## Based on 2000 bootstrap replicates ## ## CALL : ## boot.ci(boot.out = boot_out, type = &quot;bca&quot;, index = 3) ## ## Intervals : ## Level BCa ## 95% ( 2.7, 3.9 ) ## Calculations and Intervals on Original Scale boot.ci(boot_out, type = &quot;bca&quot;, index = 4) # starpower ## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS ## Based on 2000 bootstrap replicates ## ## CALL : ## boot.ci(boot.out = boot_out, type = &quot;bca&quot;, index = 4) ## ## Intervals : ## Level BCa ## 95% ( 6.5, 15.3 ) ## Calculations and Intervals on Original Scale As usual, we can judge the significance of a coefficient by inspecting whether the null hypothesis (0 in this case) is contained in the intervals. As can be seen, zero is not included in any of the intervals leading us to conclude that all of the predictor variables have a significant effect on the outcome variable. We could also compare the bootstrapped confidence intervals to the once we obtained from the model without bootstrapping. # get 95% confidence intervals for standard model confint(multiple_regression) ## 2.5 % 97.5 % ## (Intercept) -60.830 7.604 ## adspend 0.071 0.099 ## airplay 2.820 3.915 ## starpower 6.279 15.894 As you can see, the bootstrapped confidence interval is very similar to the once obtained without bootstrapping, which is not unexpected since in our example, the tests indicated that our assumptions about the distribution of errors is actually met so that we wouldn’t have needed to apply the bootstrapping. You could also inspect the distribution of the obtained regression coefficients from the 2000 bootstrap samples using the plot() function and passing it the respective index. Inspecting the plots reveals that for all coefficients (with the exception of the intercept) zero is not contained in the range of plausible values, indicating the the coefficients are significant at the 5% level. plot(boot_out, index = 1) # intercept plot(boot_out, index = 2) # adspend plot(boot_out, index = 3) # airplay plot(boot_out, index = 4) # starpower To summarize, you can inspect if the assumption of normally distributed errors is violated by visually examining the QQ-plot and using the Shapiro-Wilk test. If the results suggest a non-normal distribution of the errors, you should first try to transform your data (e.g., by using a log-transformation). If this doesn’t solve the issue, you should apply the bootstrapping procedure as shown above to obtain a robust test of the significance of the regression coefficients. 7.3.6 Correlation of errors The assumption of independent errors implies that for any two observations the residual terms should be uncorrelated. This is also known as a lack of autocorrelation. In theory, this could be tested with the Durbin-Watson test, which checks whether adjacent residuals are correlated. However, be aware that the test is sensitive to the order of your data. Hence, it only makes sense if there is a natural order in the data (e.g., time-series data) when the presence of dependent errors indicates autocorrelation. Since there is no natural order in our data, we don’t need to apply this test. If you are confronted with data that has a natural order, you can performed the test using the command durbinWatsonTest(), which takes the object that the lm() function generates as an argument. The test statistic varies between 0 and 4, with values close to 2 being desirable. As a rule of thumb values below 1 and above 3 are causes for concern. 7.3.7 Collinearity Linear dependence of regressors, also known as multicollinearity, is when there is a strong linear relationship between the independent variables. Some correlation will always be present, but severe correlation can make proper estimation impossible. When present, it affects the model in several ways: Limits the size of R2: when two variables are highly correlated, the amount of unique explained variance is low; therefore the incremental change in R2 by including an additional predictor is larger if the predictor is uncorrelated with the other predictors. Increases the standard errors of the coefficients, making them less trustworthy. Uncertainty about the importance of predictors: if two predictors explain similar variance in the outcome, we cannot know which of these variables is important. A quick way to find obvious multicollinearity is to examine the correlation matrix of the data. Any value &gt; 0.8 - 0.9 should be cause for concern. You can, for example, create a correlation matrix using the rcorr() function from the Hmisc package. library(&quot;Hmisc&quot;) rcorr(as.matrix(regression[, c(&quot;adspend&quot;, &quot;airplay&quot;, &quot;starpower&quot;)])) ## adspend airplay starpower ## adspend 1.00 0.10 0.08 ## airplay 0.10 1.00 0.18 ## starpower 0.08 0.18 1.00 ## ## n= 200 ## ## ## P ## adspend airplay starpower ## adspend 0.1511 0.2557 ## airplay 0.1511 0.0099 ## starpower 0.2557 0.0099 The bivariate correlations can also be show in a plot: plot(regression[, c(&quot;adspend&quot;, &quot;airplay&quot;, &quot;starpower&quot;)]) Figure 7.4: Bivariate correlation plots However, this only spots bivariate multicollinearity. Variance inflation factors can be used to spot more subtle multicollinearity arising from multivariate relationships. It is calculated by regressing Xi on all other X and using the resulting R2 to calculate \\[\\begin{equation} \\begin{split} \\frac{1}{1 - R_i^2} \\end{split} \\tag{7.19} \\end{equation}\\] VIF values of over 4 are certainly cause for concern and values over 2 should be further investigated. If the average VIF is over 1 the regression may be biased. The VIF for all variables can easily be calculated in R with the vif() function contained in the car package. library(car) vif(multiple_regression) ## adspend airplay starpower ## 1 1 1 As you can see the values are well below the cutoff, indicating that we do not have to worry about multicollinearity in our example. If multicollinearity turns out to be an issue in your analysis, there are at least two ways to proceed. First, you could eliminate one of the predictors, e.g., by using variable selection procedures which will be covered below. Second, you could combine predictors that are highly correlated using statistical methods aiming at reducing the dimensionality of the data based on the correlation matrix, such as the Pricipal Component Analysis (PCA), which will be covered in the next chapter. To summarize, you can inspect if the assumption of multicollinearity is violated by inspecting the variance inflation factor associated with the regression coefficients. Values over 4 are a cause for concern. In case multicollinearity turns out to be an issue, you can address it by 1) eliminating one of the regressors (e.g., using variable selection procedures) or combining variables that are highly correlated in one factor (e.g., using Principal Component Analysis). 7.3.8 Omitted Variables If the goal of your analysis is to explain the effect of one variable on an outcome (rather than just predicting an outcome), one main concern that you need to be aware of is related to omitted variables. This issue relates back to the choice of research design. If you are interested in causal inference and you did not obtain your data from a randomized trial, the issue of omitted variables bias is of great importance. If your goal is to make predictions, you don’t need to worry about this too much - in this case other potential problems such as overfitting (see below) should receive more attention. What do we mean by “omitted variables”? If a variable that influences the outcome is left out of the model (i.e., it is “omitted”), a bias in other variables’ coefficients might be introduced. Specifically, the other coefficients will be biased if the omitted variable influences the outcome and the independent variable(s) in your model. Intuitively, the variables left in the model “pick up” the effect of the omitted variable to the degree that they are related. Let’s illustrate this with an example. Consider the following data set containing information on the number of streams that a sample of artists receive on a streaming service in one month. head(streaming_data) The data set contains three variables: popularity: The average popularity rating of an artist measured on a scale from 0-10 playlists: The number of playlists the artist is listen on streams: The number of streams an artist generates during the observation month (in thousands) Say, as a marketing manager we are interested in estimating the effect of the number of playlists on the number of streams. If we estimate a model to explain the number of streams as a function of only the number of playlists, the results would look as follows: stream_model_1 &lt;- lm(streams ~ playlists, data = streaming_data) summary(stream_model_1) ## ## Call: ## lm(formula = streams ~ playlists, data = streaming_data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -394.7 -87.9 -5.6 92.9 334.5 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1248.065 15.814 78.9 &lt;0.0000000000000002 *** ## playlists 3.032 0.198 15.3 &lt;0.0000000000000002 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 135 on 170 degrees of freedom ## Multiple R-squared: 0.581, Adjusted R-squared: 0.578 ## F-statistic: 235 on 1 and 170 DF, p-value: &lt;0.0000000000000002 As you can see, the results suggest that being listed on one more playlist leads to 3,032 more streams on average (recall that the dependent variable is given in thousands in this case, so we need multiply the coefficient by 1,000 to obtain the effect). Now let’s see what happens when we add the popularity of an artist as an additional predictor: stream_model_2 &lt;- lm(streams ~ playlists + popularity, data = streaming_data) summary(stream_model_2) ## ## Call: ## lm(formula = streams ~ playlists + popularity, data = streaming_data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -278.94 -62.28 7.23 72.35 246.51 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1120.721 17.124 65.5 &lt;0.0000000000000002 *** ## playlists 1.923 0.185 10.4 &lt;0.0000000000000002 *** ## popularity 37.782 3.545 10.7 &lt;0.0000000000000002 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 105 on 169 degrees of freedom ## Multiple R-squared: 0.749, Adjusted R-squared: 0.746 ## F-statistic: 252 on 2 and 169 DF, p-value: &lt;0.0000000000000002 What happens to the coefficient of playlists? As you can see, the magnitude of the coefficient decreased substantially. Because the popularity of an artist influences both the number of playlists (more popular artists are listed on a larger number of playlists) and the number of streams (more popular artists receive more streams), the coefficient will be biased upwards. In this case, the popularity of an artists is said to be an unobserved confounder if it is not included in the model and the playlist variable is referred to as an endogenous predictor (i.e., the assumption of exogeneity is violated). As you could see, this unobserved confounder would lead us to overestimate the effect of playlists on the number of streams. It is therefore crucially important that you carefully consider what other factors could explain the dependent variable besides your main independent variable of interest. This is also the reason why it is much more difficult to estimate causal effects from observational data compared to randomized experiments, where you could, e.g., randomly assign artists to be included on playlists or not. But in real life, it is often not feasible to run field experiments, e.g., because we may not have control over which artists get included on a playlists and which artists don’t. To summarize, if your goal is to identify a causal effect of one variable on another variable using observational (non-experimental) data, you need to carefully think about which potentially omitting variable may influence both the dependent and independent variable in your model. Unfortunately, there is no test that would tell you if you have indeed included all variables in your model so that you need to put forth arguments why you think that unobserved confounders are not a reason for concern in your analysis. 7.3.9 Overfitting If the goal of your analysis is to predict an outcome, rather than explaining a causal effect of one variable on another variable, the issue of overfitting is a major concern. Overfitting basically means that your model is tuned so much to the specific data set that you have used to estimate the model that it won’t perform well when you would like to use the model to predict observations outside of your sample. So far, we have considered ‘in-sample’ statistics (e.g., R2) to judge the model fit. However, when the model building purpose is forecasting, we should test the predictive performance of the model on new data (i.e., ‘out-of-sample’ prediction). We can easily achieve this by splitting the sample in two parts: Training data set: used to estimate the model parameters Test data set (‘hold-out set’): predict values based training data By inspecting how well the model based on the training data is able to predict the observations in the test data, we can judge the predictive ability of a model on new data. This is also referred to as the out-of-sample predictive accuracy. You can easily test the out-of-sample predictive accuracy of your model by splitting the data set in two parts - the training data and the test data. In the following code, we randomly 2/3 of the observations to estimate the model and retain the remaining 1/3 of observations to test how well we can predict the outcome based on our model. # randomly split into training and test data: set.seed(123) n &lt;- nrow(regression) train &lt;- sample(1:n, round(n * 2/3)) test &lt;- (1:n)[-train] Now we have created two data sets - the training data set and the test data set. Next, let’s estimate the model using the training data and inspect the results # estimate linear model based on training data multiple_train &lt;- lm(sales ~ adspend + airplay + starpower, data = regression, subset = train) summary(multiple_train) #summary of results ## ## Call: ## lm(formula = sales ~ adspend + airplay + starpower, data = regression, ## subset = train) ## ## Residuals: ## Min 1Q Median 3Q Max ## -109.89 -30.21 -0.16 28.19 146.84 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -36.52425 20.15595 -1.81 0.0723 . ## adspend 0.09015 0.00868 10.38 &lt;0.0000000000000002 *** ## airplay 3.49391 0.35649 9.80 &lt;0.0000000000000002 *** ## starpower 11.22697 2.93189 3.83 0.0002 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 47 on 129 degrees of freedom ## Multiple R-squared: 0.7, Adjusted R-squared: 0.693 ## F-statistic: 100 on 3 and 129 DF, p-value: &lt;0.0000000000000002 As you can see, the model results are similar to the results from the model from the beginning, which is not surprising since it is based on the same data with the only difference that we discarded 1/3 of the observations for validation purposes. In a next step, we can use the predict() function and the argument newdata to predict observations in the test data set based on our estimated model. To test the our-of-sample predictive accuracy of the model, we can then compute the squared correlation coefficient between the predicted and observed values, which will give us the out-of-sample model fit (i.e., the R2). # using coefficients to predict test data pred_lm &lt;- predict(multiple_train, newdata = regression[test, ]) cor(regression[test, &quot;sales&quot;], pred_lm)^2 # R^2 for test data ## [1] 0.57 As you can see, the R2 is about 0.57, suggesting that 57% of the variation in the test data set can be explained by our model. Note that this share is somewhat lower compared to the within-sample fit that you can see in the model above (i.e., R2 = 0.7), which is not unexpected since the test data were not used to estimate the model. The value of 0.57 suggests that the model generalizes to other data sets quite well. We could also visualize the out-of-sample model fit as follows: # plot predicted vs. observed values for test # data plot(regression[test, &quot;sales&quot;], pred_lm, xlab = &quot;y measured&quot;, ylab = &quot;y predicted&quot;, cex.lab = 1.3) abline(c(0, 1)) To summarize, overfitting is a concern in predictive models and it means that your model is so highly tuned to the data set you used to estimate the model that it does not generalize well to new data. To make sure that overfitting is not a reason for concern, you should test the out-of-sample predictive ability of your model using the process explained above. 7.3.10 Variable selection A parsimonious model is a model that accomplishes a desired level of explanation or prediction with as few predictor variables as possible. Parsimonious models are desired because smaller models are easier to interpret and redundant or unnecessary variables should be left out (also to combat overfitting). Note that this is especially true for predictive models. If our goal was to explain a relationship between two variables and the variable we formulated a hypothesis for turns out to be insignificant, this result would also be interesting and, hence, you should also report the effect even though it may be insignificant. Let’s use an example to see how we could identify variables that do not add any explanatory power to the model and should thus be excluded from the model. First, we will add a random variable to our existing regression data set. We can use the rnorm() function to generate random observations from a normal distribution. set.seed(123) # Add another random variable regression$var_test &lt;- rnorm(nrow(regression), 0, 1) The model selection process should tell us that we should favor a model without this predictor since it does not add any explanatory power. In the following code, we specify our model by gradually adding one predictor after the other and then we will use the anova() function to test the differences between the models. # Model comparison with anova lm0 &lt;- lm(sales ~ 1, data = regression) lm1 &lt;- lm(sales ~ adspend, data = regression) lm2 &lt;- lm(sales ~ adspend + airplay, data = regression) lm3 &lt;- lm(sales ~ adspend + airplay + starpower, data = regression) lm4 &lt;- lm(sales ~ adspend + airplay + starpower + var_test, data = regression) anova(lm0, lm1, lm2, lm3, lm4) The output shows that the last model, in which we add the random variable as an additional predictor, does not significantly improve the model compared to the previous model (the results from the F-test is insignificant). Hence, we should use model “lm3” in this case. Alternatively, we could also select the variables to be included in our model using a stepwise procedure with the step() function. To do this, we pass the most complete model from above, i.e., ‘lm4’ to the function and inspect the results: options(digits = 8) # Stepwise variable selection Automatic model # selection with step model_lmstep &lt;- step(lm4) ## Start: AIC=1545.41 ## sales ~ adspend + airplay + starpower + var_test ## ## Df Sum of Sq RSS AIC ## - var_test 1 2935 434575 1544.76 ## &lt;none&gt; 431640 1545.41 ## - starpower 1 41322 472962 1561.69 ## - airplay 1 318263 749902 1653.88 ## - adspend 1 335612 767252 1658.45 ## ## Step: AIC=1544.76 ## sales ~ adspend + airplay + starpower ## ## Df Sum of Sq RSS AIC ## &lt;none&gt; 434575 1544.76 ## - starpower 1 45853 480428 1562.82 ## - airplay 1 325860 760434 1654.67 ## - adspend 1 333332 767907 1656.62 model_lmstep ## ## Call: ## lm(formula = sales ~ adspend + airplay + starpower, data = regression) ## ## Coefficients: ## (Intercept) adspend airplay starpower ## -26.612958 0.084885 3.367425 11.086335 In this case, the model selection is based on the information criterion AIC, which is defined as \\(AIC=-2*maxLL+2k\\), where LL refers to the log-likelihood and \\(k\\) denotes the number of parameters in the model. Maximizing the log-likelihood-function corresponds to a minimization of the residual sum of squares RSS (i.e., OLS estimator). Information criteria based on the maximized log-likelihood (e.g., AIC) provide an estimate of model parsimony, i.e., resolve the trade-off between model fit and model complexity, to achieve the best predictive ability (similar to adjusted R2). They include a penalty for model complexity and penalize overly complex models (i.e., \\(k\\) in case of the AIC), where complexity refers to the number of parameters in the model. The model with lowest AIC value is the most parsimonious. The information criteria and LL statistics should not be interpreted in absolute terms, but rather in comparison to nested model specifications. The output above indicates that removing the var_test variable would change the AIC from 1545.41 to 1544.76 (i.e., lead to a more parsimonious model). For all the other predictor variables, the results indicate that removing these variables would actually lead to a higher AIC statistic (i.e., leading to a less parsimonious model). Similar to the conclusion for the comparison above, this model would correctly suggest to drop the var_test variable and retain all the other variables in the model. To summarize, to obtain a parsimonious model, you should test if any of the model variables could be left out without decreasing the fit of your model using the procedures explained above. 7.4 Categorical predictors 7.4.1 Two categories Suppose, you wish to investigate the effect of the variable “country” on sales, which is a categorical variable that can only take two levels (i.e., 0 = local artist, 1 = international artist). Categorical variables with two levels are also called binary predictors. It is straightforward to include these variables in your model as “dummy” variables. Dummy variables are factor variables that can only take two values. For our “country” variable, we can create a new predictor variable that takes the form: \\[\\begin{equation} x_4 = \\begin{cases} 1 &amp; \\quad \\text{if } i \\text{th artist is international}\\\\ 0 &amp; \\quad \\text{if } i \\text{th artist is local} \\end{cases} \\tag{7.20} \\end{equation}\\] This new variable is then added to our regression equation from before, so that the equation becomes \\[\\begin{align} Sales =\\beta_0 &amp;+\\beta_1*adspend\\\\ &amp;+\\beta_2*airplay\\\\ &amp;+\\beta_3*starpower\\\\ &amp;+\\beta_4*international+\\epsilon \\end{align}\\] where “international” represents the new dummy variable and \\(\\beta_4\\) is the coefficient associated with this variable. Estimating the model is straightforward - you just need to include the variable as an additional predictor variable. Note that the variable needs to be specified as a factor variable before including it in your model. If you haven’t converted it to a factor variable before, you could also use the wrapper function as.factor() within the equation. multiple_regression_bin &lt;- lm(sales ~ adspend + airplay + starpower + country, data = regression) #estimate linear model summary(multiple_regression_bin) #summary of results ## ## Call: ## lm(formula = sales ~ adspend + airplay + starpower + country, ## data = regression) ## ## Residuals: ## Min 1Q Median 3Q Max ## -109.1987 -24.2970 -1.8219 29.1854 156.3111 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -16.4006000 16.3953963 -1.0003 0.3184 ## adspend 0.0814637 0.0065285 12.4781 &lt; 0.00000000000000022 *** ## airplay 3.0376582 0.2680852 11.3309 &lt; 0.00000000000000022 *** ## starpower 10.0809967 2.2954638 4.3917 0.0000184294 *** ## countryinternational 45.6727416 8.6911720 5.2551 0.0000003862 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 44.183 on 195 degrees of freedom ## Multiple R-squared: 0.70627, Adjusted R-squared: 0.70024 ## F-statistic: 117.22 on 4 and 195 DF, p-value: &lt; 0.000000000000000222 You can see that we now have an additional coefficient in the regression output, which tells us the effect of the binary predictor. The dummy variable can generally be interpreted as the average difference in the dependent variable between the two groups (similar to a t-test), conditional on the other variables you have included in your model. In this case, the coefficient tells you the difference in sales between international and local artists, and whether this difference is significant. Specifically, it means that international artists on average sell 45.67 units more than local artists, and this difference is significant (i.e., p &lt; 0.05). 7.4.2 More than two categories Predictors with more than two categories, like our “genre”” variable, can also be included in your model. However, in this case one dummy variable cannot represent all possible values, since there are three genres (i.e., 1 = Rock, 2 = Pop, 3 = Electronic). Thus, we need to create additional dummy variables. For example, for our “genre” variable, we create two dummy variables as follows: \\[\\begin{equation} x_5 = \\begin{cases} 1 &amp; \\quad \\text{if } i \\text{th product is from Pop genre}\\\\ 0 &amp; \\quad \\text{if } i \\text{th product is from Rock genre} \\end{cases} \\tag{7.21} \\end{equation}\\] \\[\\begin{equation} x_6 = \\begin{cases} 1 &amp; \\quad \\text{if } i \\text{th product is from Electronic genre}\\\\ 0 &amp; \\quad \\text{if } i \\text{th product is from Rock genre} \\end{cases} \\tag{7.22} \\end{equation}\\] We would then add these variables as additional predictors in the regression equation and obtain the following model \\[\\begin{align} Sales =\\beta_0 &amp;+\\beta_1*adspend\\\\ &amp;+\\beta_2*airplay\\\\ &amp;+\\beta_3*starpower\\\\ &amp;+\\beta_4*international\\\\ &amp;+\\beta_5*Pop\\\\ &amp;+\\beta_6*Electronic+\\epsilon \\end{align}\\] where “Pop” and “Rock” represent our new dummy variables, and \\(\\beta_5\\) and \\(\\beta_6\\) represent the associated regression coefficients. The interpretation of the coefficients is as follows: \\(\\beta_5\\) is the difference in average sales between the genres “Rock” and “Pop”, while \\(\\beta_6\\) is the difference in average sales between the genres “Rock” and “Electro”. Note that the level for which no dummy variable is created is also referred to as the baseline. In our case, “Rock” would be the baseline genre. This means that there will always be one fewer dummy variable than the number of levels. You don’t have to create the dummy variables manually as R will do this automatically when you add the variable to your equation: multiple_regression &lt;- lm(sales ~ adspend + airplay + starpower + country + genre, data = regression) #estimate linear model summary(multiple_regression) #summary of results ## ## Call: ## lm(formula = sales ~ adspend + airplay + starpower + country + ## genre, data = regression) ## ## Residuals: ## Min 1Q Median 3Q Max ## -116.1848 -26.5420 0.0528 27.9780 154.5628 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -30.6790082 16.5998893 -1.8481 0.0661114 . ## adspend 0.0723302 0.0065726 11.0048 &lt; 0.00000000000000022 *** ## airplay 2.7141773 0.2682446 10.1183 &lt; 0.00000000000000022 *** ## starpower 10.4962794 2.1937951 4.7845 0.000003398 *** ## countryinternational 40.8798829 8.4086835 4.8616 0.000002407 *** ## genrepop 47.6963967 10.4871650 4.5481 0.000009550 *** ## genreelectronic 27.6203374 8.1722318 3.3798 0.0008778 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 42.181 on 193 degrees of freedom ## Multiple R-squared: 0.73502, Adjusted R-squared: 0.72678 ## F-statistic: 89.226 on 6 and 193 DF, p-value: &lt; 0.000000000000000222 How can we interpret the coefficients? It is estimated based on our model that products from the “Pop” genre will on average sell 47.69 units more than products from the “Rock” genre, and that products from the “Electronic” genre will sell on average 27.62 units more than the products from the “Rock” genre. The p-value of both variables is smaller than 0.05, suggesting that there is statistical evidence for a real difference in sales between the genres. The level of the baseline category is arbitrary. As you have seen, R simply selects the first level as the baseline. If you would like to use a different baseline category, you can use the relevel() function and set the reference category using the ref argument. The following would estimate the same model using the second category as the baseline: multiple_regression &lt;- lm(sales ~ adspend + airplay + starpower + country + relevel(genre, ref = 2), data = regression) #estimate linear model summary(multiple_regression) #summary of results ## ## Call: ## lm(formula = sales ~ adspend + airplay + starpower + country + ## relevel(genre, ref = 2), data = regression) ## ## Residuals: ## Min 1Q Median 3Q Max ## -116.1848 -26.5420 0.0528 27.9780 154.5628 ## ## Coefficients: ## Estimate Std. Error t value ## (Intercept) 17.0173885 18.1970368 0.9352 ## adspend 0.0723302 0.0065726 11.0048 ## airplay 2.7141773 0.2682446 10.1183 ## starpower 10.4962794 2.1937951 4.7845 ## countryinternational 40.8798829 8.4086835 4.8616 ## relevel(genre, ref = 2)rock -47.6963967 10.4871650 -4.5481 ## relevel(genre, ref = 2)electronic -20.0760593 7.9874725 -2.5134 ## Pr(&gt;|t|) ## (Intercept) 0.35087 ## adspend &lt; 0.00000000000000022 *** ## airplay &lt; 0.00000000000000022 *** ## starpower 0.000003398 *** ## countryinternational 0.000002407 *** ## relevel(genre, ref = 2)rock 0.000009550 *** ## relevel(genre, ref = 2)electronic 0.01277 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 42.181 on 193 degrees of freedom ## Multiple R-squared: 0.73502, Adjusted R-squared: 0.72678 ## F-statistic: 89.226 on 6 and 193 DF, p-value: &lt; 0.000000000000000222 Note that while your choice of the baseline category impacts the coefficients and the significance level, the prediction for each group will be the same regardless of this choice. 7.5 Extensions of the linear model The standard linear regression model provides results that are easy to interpret and is useful to address many real-world problems. However, it makes rather restrictive assumptions that might be violated in many cases. Notably, it assumes that the relationships between the response and predictor variable is additive and linear. The additive assumption states that the effect of an independent variable on the dependent variable is independent of the values of the other independent variables included in the model. The linear assumption means that the effect of a one-unit change in the independent variable on the dependent variable is the same, regardless of the values of the value of the independent variable. This is also referred to as constant marginal returns. For example, an increase in ad-spend from 10€ to 11€ yields the same increase in sales as an increase from 100,000€ to 100,001€. This section presents alternative model specifications if the assumptions do not hold. 7.5.1 Interaction effects Regarding the additive assumption, it might be argued that the effect of some variables are not fully independent of the values of other variables. In our example, one could argue that the effect of advertising depends on the type of artist. For example, for local artist advertising might be more effective. We can investigate if this is the case using a grouped scatterplot: ggplot(regression, aes(adspend, sales, colour = as.factor(country))) + geom_point() + geom_smooth(method = &quot;lm&quot;, alpha = 0.1) + labs(x = &quot;Advertising expenditures (EUR)&quot;, y = &quot;Number of sales&quot;, colour = &quot;country&quot;) + theme_bw() Figure 7.5: Effect of advertising by group The scatterplot indeed suggests that there is a difference in advertising effectiveness between local and international artists. You can see this from the two different regression lines. We can incorporate this interaction effect by including an interaction term in the regression equation as follows: \\[\\begin{align} Sales =\\beta_0 &amp;+\\beta_1*adspend\\\\ &amp;+\\beta_2*airplay\\\\ &amp;+\\beta_3*starpower\\\\ &amp;+\\beta_4*international\\\\ &amp;+\\beta_5*(adspend*international)\\\\ &amp;+\\epsilon \\end{align}\\] You can see that the effect of advertising now depends on the type of artist. Hence, the additive assumption is removed. Note that if you decide to include an interaction effect, you should always include the main effects of the variables that are included in the interaction (even if the associated p-values do not suggest significant effects). It is easy to include an interaction effect in you model by adding an additional variable that has the format ```var1:var2````. In our example, this could be achieved using the following specification: multiple_regression &lt;- lm(sales ~ adspend + airplay + starpower + country + adspend:country, data = regression) #estimate linear model summary(multiple_regression) #summary of results ## ## Call: ## lm(formula = sales ~ adspend + airplay + starpower + country + ## adspend:country, data = regression) ## ## Residuals: ## Min 1Q Median 3Q Max ## -105.431 -26.259 -2.717 29.353 161.525 ## ## Coefficients: ## Estimate Std. Error t value ## (Intercept) -14.1169481 16.2937062 -0.8664 ## adspend 0.0884725 0.0072955 12.1270 ## airplay 2.9574474 0.2685930 11.0109 ## starpower 9.4373011 2.2969371 4.1086 ## countryinternational 71.5753078 15.1287682 4.7311 ## adspend:countryinternational -0.0347189 0.0166667 -2.0831 ## Pr(&gt;|t|) ## (Intercept) 0.38734 ## adspend &lt; 0.00000000000000022 *** ## airplay &lt; 0.00000000000000022 *** ## starpower 0.000058669 *** ## countryinternational 0.000004293 *** ## adspend:countryinternational 0.03855 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 43.809 on 194 degrees of freedom ## Multiple R-squared: 0.71269, Adjusted R-squared: 0.70529 ## F-statistic: 96.247 on 5 and 194 DF, p-value: &lt; 0.000000000000000222 How can we interpret the coefficient? The adspend main effect tells you the effect of advertising for the reference group that has the factor level zero. In our example, it is the advertising effect for local artist. This means that for local artists, spending an additional 1,000 Euros on advertising will result in approximately 89 additional unit sales. The interaction effect tells you by how much the effect differs for the other group (i.e., international artists) and whether this difference is significant. In our example, it means that the effect for international artists can be computed as: 0.0885 - 0.0347 = 0.0538. This means that for international artists, spending an additional 1,000 Euros on advertising will result in approximately 54 additional unit sales. Since the interaction effect is significant (p &lt; 0.05) we can conclude that advertising is less effective for international artists. The above example showed the interaction between a categorical variable (i.e., “country”) and a continuous variable (i.e., “adspend”). However, interaction effects can be defined for different combinations of variable types. For example, you might just as well specify an interaction between two continuous variables. In our example, you might suspect that there are synergy effects between advertising expenditures and radio airplay. It could be that advertising is more effective when an artist receives a large number of radio plays. In this case, we would specify our model as: \\[\\begin{align} Sales =\\beta_0 &amp;+\\beta_1*adspend\\\\ &amp;+\\beta_2*airplay\\\\ &amp;+\\beta_3*starpower\\\\ &amp;+\\beta_4*(adspend*airplay)\\\\ &amp;+\\epsilon \\end{align}\\] In this case, we can interpret \\(\\beta_4\\) as the increase in the effectiveness of advertising for a one unit increase in radio airplay (or vice versa). This can be translated to R using: multiple_regression &lt;- lm(sales ~ adspend + airplay + starpower + adspend:airplay, data = regression) #estimate linear model summary(multiple_regression) #summary of results ## ## Call: ## lm(formula = sales ~ adspend + airplay + starpower + adspend:airplay, ## data = regression) ## ## Residuals: ## Min 1Q Median 3Q Max ## -128.301 -28.587 -2.152 28.041 141.591 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -34.52047735 19.31153974 -1.7876 0.0754 . ## adspend 0.10438741 0.02200443 4.7439 0.000004043410591583 *** ## airplay 3.68042650 0.43539815 8.4530 0.000000000000006556 *** ## starpower 10.89024162 2.44767207 4.4492 0.000014470121505845 *** ## adspend:airplay -0.00064885 0.00069488 -0.9338 0.3516 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 47.103 on 195 degrees of freedom ## Multiple R-squared: 0.66616, Adjusted R-squared: 0.65931 ## F-statistic: 97.278 on 4 and 195 DF, p-value: &lt; 0.000000000000000222 However, since the p-value of the interaction is larger than 0.05, there is little statistical evidence for an interaction between the two variables. 7.5.2 Non-linear relationships 7.5.2.1 Multiplicative model In our example above, it appeared that linear relationships could be reasonably assumed. In many practical applications, however, this might not be the case. Let’s review the implications of a linear specification again: Constant marginal returns (e.g., an increase in ad-spend from 10€ to 11€ yields the same increase in sales as an increase from 100,000€ to 100,001€) Elasticities increase with X (e.g., advertising becomes relatively more effective; i.e., a relatively smaller change in advertising expenditure will yield the same return) In many marketing contexts, these might not be reasonable assumptions. Consider the case of advertising. It is unlikely that the return on advertising will not depend on the level of advertising expenditures. It is rather likely that saturation occurs at some level, meaning that the return from an additional Euro spend on advertising is decreasing with the level of advertising expenditures (i.e., decreasing marginal returns). In other words, at some point the advertising campaign has achieved a certain level of penetration and an additional Euro spend on advertising won’t yield the same return as in the beginning. Let’s use an example data set, containing the advertising expenditures of a company and the sales (in thousand units). non_linear_reg &lt;- read.table(&quot;https://raw.githubusercontent.com/IMSMWU/Teaching/master/MRDA2017/non_linear.dat&quot;, sep = &quot;\\t&quot;, header = TRUE) #read in data head(non_linear_reg) Now we inspect if a linear specification is appropriate by looking at the scatterplot: ggplot(data = non_linear_reg, aes(x = advertising, y = sales)) + geom_point(shape = 1) + geom_smooth(method = &quot;lm&quot;, fill = &quot;blue&quot;, alpha = 0.1) + theme_bw() Figure 7.6: Non-linear relationship It appears that a linear model might not represent the data well. It rather appears that the effect of an additional Euro spend on advertising is decreasing with increasing levels of advertising expenditures. Thus, we have decreasing marginal returns. We could put this to a test and estimate a linear model: linear_reg &lt;- lm(sales ~ advertising, data = non_linear_reg) summary(linear_reg) ## ## Call: ## lm(formula = sales ~ advertising, data = non_linear_reg) ## ## Residuals: ## Min 1Q Median 3Q Max ## -10.47733 -2.38863 -0.35584 2.18843 16.74527 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 9.957521554 0.225115083 44.233 &lt; 0.00000000000000022 *** ## advertising 0.000502446 0.000015611 32.186 &lt; 0.00000000000000022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 3.5931 on 998 degrees of freedom ## Multiple R-squared: 0.50932, Adjusted R-squared: 0.50883 ## F-statistic: 1035.9 on 1 and 998 DF, p-value: &lt; 0.000000000000000222 Advertising appears to be positively related to sales with an additional Euro that is spent on advertising resulting in 0.0005 additional sales. The R2 statistic suggests that approximately 51% of the total variation can be explained by the model To test if the linear specification is appropriate, let’s inspect some of the plots that are generated by R. We start by inspecting the residuals plot. plot(linear_reg, 1) Figure 7.7: Residuals vs. Fitted The plot suggests that the assumption of homoscedasticity is violated (i.e., the spread of values on the y-axis is different for different levels of the fitted values). In addition, the red line deviates from the dashed grey line, suggesting that the relationship might not be linear. Finally, the Q-Q plot of the residuals suggests that the residuals are not normally distributed. plot(linear_reg, 2) Figure 7.8: Q-Q plot To sum up, a linear specification might not be the best model for this data set. In this case, a multiplicative model might be a better representation of the data. The multiplicative model has the following formal representation: \\[\\begin{equation} Y =\\beta_0 *X_1^{\\beta_1}*X_2^{\\beta_2}*...*X_J^{\\beta_J}*\\epsilon \\tag{7.23} \\end{equation}\\] This functional form can be linearized by taking the logarithm of both sides of the equation: \\[\\begin{equation} log(Y) =log(\\beta_0) + \\beta_1*log(X_1) + \\beta_2*log(X_2) + ...+ \\beta_J*log(X_J) + log(\\epsilon) \\tag{7.24} \\end{equation}\\] This means that taking logarithms of both sides of the equation makes linear estimation possible. The above transformation follows from two logarithm rules that we apply here: the product rule states that \\(log(xy)=log(x)+log(y)\\); thus, when taking the logarithm of the right hand side of the multiplicative model, we can write \\(log(X_1) + log(X_2)... log(X_J)\\) instead of \\(log(X_1*X_2*...X_J)\\), and the power rule states that \\(log(x^y) = ylog(x)\\); thus, we can write \\(\\beta*log(X)\\) instead of \\(X^{\\beta}\\) Let’s test how the scatterplot would look like if we use the logarithm of our variables using the log() function instead of the original values. ggplot(data = non_linear_reg, aes(x = log(advertising), y = log(sales))) + geom_point(shape = 1) + geom_smooth(method = &quot;lm&quot;, fill = &quot;blue&quot;, alpha = 0.1) + theme_bw() Figure 7.9: Linearized effect It appears that now, with the log-transformed variables, a linear specification is a much better representation of the data. Hence, we can log-transform our variables and estimate the following equation: \\[\\begin{equation} log(sales) = log(\\beta_0) + \\beta_1*log(advertising) + log(\\epsilon) \\tag{7.25} \\end{equation}\\] This can be easily implemented in R by transforming the variables using the log() function: log_reg &lt;- lm(log(sales) ~ log(advertising), data = non_linear_reg) summary(log_reg) ## ## Call: ## lm(formula = log(sales) ~ log(advertising), data = non_linear_reg) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.665943 -0.127226 0.002988 0.134372 0.639636 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.0149269 0.0597141 -0.250 0.8027 ## log(advertising) 0.3007687 0.0065095 46.205 &lt;0.0000000000000002 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.20181 on 998 degrees of freedom ## Multiple R-squared: 0.68144, Adjusted R-squared: 0.68113 ## F-statistic: 2134.9 on 1 and 998 DF, p-value: &lt; 0.000000000000000222 Note that this specification implies decreasing marginal returns (i.e., the returns of advertising are decreasing with the level of advertising), which appear to be more consistent with the data. The specification is also consistent with proportional changes in advertising being associated with proportional changes in sales (i.e., advertising does not become more effective with increasing levels). This has important implications on the interpretation of the coefficients. In our example, you would interpret the coefficient as follows: A 1% increase in advertising leads to a 0.3% increase in sales. Hence, the interpretation is in proportional terms and no longer in units. This means that the coefficients in a log-log model can be directly interpreted as elasticities, which also makes communication easier. We can generally also inspect the R2 statistic to see that the model fit has increased compared to the linear specification (i.e., R2 has increased to 0.681 from 0.509). However, please note that the variables are now measured on a different scale, which means that the model fit in theory is not directly comparable. Also, we could use the residuals plot to confirm that the revised specification is more appropriate: plot(log_reg, 1) Figure 7.10: Residuals plot plot(log_reg, 2) Figure 7.11: Q-Q plot Finally, we can plot the predicted values against the observed values to see that the results from the log-log model (red) provide a better prediction than the results from the linear model (blue). non_linear_reg$pred_lin_reg &lt;- predict(linear_reg) non_linear_reg$pred_log_reg &lt;- predict(log_reg) ggplot(data = non_linear_reg) + geom_point(aes(x = advertising, y = sales), shape = 1) + geom_line(data = non_linear_reg, aes(x = advertising, y = pred_lin_reg), color = &quot;blue&quot;, size = 1.05) + geom_line(data = non_linear_reg, aes(x = advertising, y = exp(pred_log_reg)), color = &quot;red&quot;, size = 1.05) + theme_bw() Figure 7.12: Comparison if model fit 7.5.2.2 Quadratic model Another way of modeling non-linearities is including a squared term if there are decreasing or increasing effects. In fact, we can model non-constant slopes as long as the form is a linear combination of exponentials (i.e. squared, cubed, …) of the explanatory variables. Usually we do not expect many inflection points so squared or third power terms suffice. Note that the degree of the polynomial has to be equal to the number of inflection points. When using squared terms we can model diminishing and eventually negative returns. Think about advertisement spending. If a brand is not well known, spending on ads will increase brand awareness and have a large effect on sales. In a regression model this translates to a steep slope for spending at the origin (i.e. for lower spending). However, as more and more people will already know the brand we expect that an additional Euro spent on advertisement will have less and less of an effect the more the company spends. We say that the returns are diminishing. Eventually, if they keep putting more and more ads out, people get annoyed and some will stop buying from the company. In that case the return might even get negative. To model such a situation we need a linear as well as a squared term in the regression. lm(...) can take squared (or any power) terms as input by adding I(X^2) as explanatory variable. In the example below we see a clear quadratic relationship with an inflection point at around 70. If we try to model this using the level of the covariates without the quadratic term we do not get a very good fit. set.seed(1234) X &lt;- as.integer(runif(1000, 0, 12000)) Y &lt;- 80000 + 140 * X - 0.01 * (X^2) + rnorm(1000, 0, 35000) modLinear &lt;- lm(Y/100000 ~ X) sales_quad &lt;- data.frame(sales = Y/100000, advertising = X * 0.01, Prediction = fitted(modLinear)) ggplot(sales_quad) + geom_point(aes(x = advertising, y = sales, color = &quot;Data&quot;)) + geom_line(aes(x = advertising, y = Prediction, color = &quot;Prediction&quot;)) + theme_bw() + ggtitle(&quot;Linear Predictor&quot;) + theme(legend.title = element_blank()) The graph above clearly shows that advertising spending of between 0 and 50 increases sales. However, the marginal increase (i.e. the slope of the data curve) is decreasing. Around 70 there is an inflection point. After that point additional ad-spending actually decreases sales (e.g. people get annoyed). Notice that the prediction line is straight, that is, the marginal increase of sales due to additional spending on advertising is the same for any amount of spending. This shows the danger of basing business decisions on wrongly specified models. But even in the area in which the sign of the prediction is correct, we are quite far off. Lets take a look at the top 5 sales values and the corresponding predictions: top5 &lt;- which(sales_quad$sales %in% head(sort(sales_quad$sales, decreasing = TRUE), 5)) dplyr::arrange(sales_quad[top5, ], desc(sales_quad[top5, 1])) By including a quadratic term we can fit the data very well. This is still a linear model since the outcome variable is still explained by a linear combination of regressors even though one of the regressors is now just a non-linear function of the same variable (i.e. the squared value). quad_mod &lt;- lm(sales ~ advertising + I(advertising^2), data = sales_quad) summary(quad_mod) ## ## Call: ## lm(formula = sales ~ advertising + I(advertising^2), data = sales_quad) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.021614 -0.220140 0.003639 0.223573 0.956181 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.8162719014 0.0317011155 25.749 &lt; 0.00000000000000022 *** ## advertising 0.1396425755 0.0011994504 116.422 &lt; 0.00000000000000022 *** ## I(advertising^2) -0.0009997164 0.0000095479 -104.706 &lt; 0.00000000000000022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.33218 on 997 degrees of freedom ## Multiple R-squared: 0.93596, Adjusted R-squared: 0.93583 ## F-statistic: 7285.7 on 2 and 997 DF, p-value: &lt; 0.000000000000000222 confint(quad_mod) ## 2.5 % 97.5 % ## (Intercept) 0.7540633367 0.87848046615 ## advertising 0.1372888385 0.14199631240 ## I(advertising^2) -0.0010184526 -0.00098098016 sales_quad$Prediction &lt;- predict(quad_mod) ggplot(data = sales_quad, aes(x = Prediction, y = sales)) + geom_point(shape = 1) + geom_smooth(method = &quot;lm&quot;, fill = &quot;blue&quot;, alpha = 0.1) + theme_bw() ## `geom_smooth()` using formula &#39;y ~ x&#39; plot(quad_mod, 1) plot(quad_mod, 2) shapiro.test(resid(quad_mod)) ## ## Shapiro-Wilk normality test ## ## data: resid(quad_mod) ## W = 0.997653, p-value = 0.16559 sales_quad$pred_lin_reg &lt;- predict(modLinear) ggplot(data = sales_quad) + geom_point(aes(x = advertising, y = sales), shape = 1) + geom_line(data = sales_quad, aes(x = advertising, y = pred_lin_reg), color = &quot;blue&quot;, size = 1.05) + geom_line(data = sales_quad, aes(x = advertising, y = Prediction), color = &quot;red&quot;, size = 1.05) + theme_bw() + xlab(&quot;Advertising (thsd. Euro)&quot;) + ylab(&quot;Sales (million units)&quot;) Now the prediction of the model is very close to the actual data and we could base our production decisions on that model. top5 &lt;- which(sales_quad$sales %in% head(sort(sales_quad$sales, decreasing = TRUE), 5)) dplyr::arrange(sales_quad[top5, ], desc(sales_quad[top5, 1])) When interpreting the coefficients of the predictor in this model we have to be careful. Since we included the squared term, the slope is now different at each level of production (this can be seen in the graph above). That is, we do not have a single coefficient to interpret as the slope anymore. This can easily be shown by calculating the derivative of the model with respect to production. \\[ \\text{Sales} = \\alpha + \\beta_1 \\text{ Advertising} + \\beta_2 \\text{ Advertising}^2 + \\varepsilon\\\\ {\\delta \\text{ Sales} \\over \\delta \\text{ Advertising}} = \\beta_1 + 2 \\beta_2 \\text{ Advertising} \\equiv \\text{Slope} \\] Intuitively, this means that the change of sales due to an additional Euro spent on advertising depends on the current level of advertising. \\(\\alpha\\), the intercept can still be interpreted as the expected value of sales given that we do not advertise at all (set advertising to 0 in the model). The sign of the squared term (\\(\\beta_2\\)) can be used to determine the curvature of the function. If the sign is positive, the function is convex (curvature is upwards), if it is negative it is concave curvature is downwards). We can interpret \\(\\beta_1\\) and \\(\\beta_2\\) separately in terms of their influence on the slope. By setting advertising to \\(0\\) we observe that \\(\\beta_1\\) is the slope at the origin. By taking the derivative of the slope with respect to advertising we see that the change of the slope due to additional spending on advertising is two times \\(\\beta_2\\). \\[ {\\delta Slope \\over \\delta Advertising} = 2\\beta_2 \\] At the maximum predicted value the slope is close to \\(0\\) (theoretically it is equal to \\(0\\) but this would require decimals and we can only sell whole pieces). Above we only calculated the prediction for the observed data, so let’s first predict the profit for all possible values between \\(1\\) and \\(200\\) to get the optimal production level according to our model. predictionAll &lt;- predict(quad_mod, newdata = data.frame(advertising = 1:200)) (optimalAdvertising &lt;- as.integer(which.max(predictionAll))) ## [1] 70 # Slope at optimum: coef(quad_mod)[[&quot;advertising&quot;]] + 2 * coef(quad_mod)[[&quot;I(advertising^2)&quot;]] * optimalAdvertising ## [1] -0.00031771725 For all other levels of advertising we insert the pieces produced into the formula to obtain the slope at that point. In the following example you can choose the level of advertising. 7.6 Logistic regression You can download the corresponding R-Code here 7.6.1 Motivation and intuition In the last section we saw how to predict continuous outcomes (sales, height, etc.) via linear regression models. Another interesting case is that of binary outcomes, i.e. when the variable we want to model can only take two values (yes or no, group 1 or group 2, dead or alive, etc.). To this end we would like to estimate how our predictor variables change the probability of a value being 0 or 1. In this case we can technically still use a linear model (e.g. OLS). However, its predictions will most likely not be particularly useful. A more useful method is the logistic regression. In particular we are going to have a look at the logit model. In the following dataset we are trying to predict whether a song will be a top-10 hit on a popular music streaming platform. In a first step we are going to use only the danceability index as a predictor. Later we are going to add more independent variables. library(ggplot2) library(gridExtra) chart_data &lt;- read.delim2(&quot;https://raw.githubusercontent.com/IMSMWU/MRDA2018/master/data/chart_data_logistic.dat&quot;,header=T, sep = &quot;\\t&quot;,stringsAsFactors = F, dec = &quot;.&quot;) #Create a new dummy variable &quot;top10&quot;, which is 1 if a song made it to the top10 and 0 else: chart_data$top10 &lt;- ifelse(chart_data$rank&lt;11,1,0) # Inspect data head(chart_data) str(chart_data) ## &#39;data.frame&#39;: 422 obs. of 27 variables: ## $ artistName : chr &quot;dj mustard&quot; &quot;bing crosby&quot; &quot;post malone&quot; &quot;chris brown&quot; ... ## $ trackID : chr &quot;01gNiOqg8u7vT90uVgOVmz&quot; &quot;01h424WG38dgY34vkI3Yd0&quot; &quot;02opp1cycqiFNDpLd2o1J3&quot; &quot;02yRHV9Cgk8CUS2fx9lKVC&quot; ... ## $ trackName : chr &quot;Whole Lotta Lovin&#39;&quot; &quot;White Christmas&quot; &quot;Big Lie&quot; &quot;Anyway&quot; ... ## $ rank : int 120 70 129 130 182 163 12 86 67 77 ... ## $ streams : int 917710 1865526 1480436 894216 642784 809256 3490456 1737890 1914768 1056689 ... ## $ frequency : int 3 9 1 1 1 2 2 12 17 11 ... ## $ danceability : num 0.438 0.225 0.325 0.469 0.286 0.447 0.337 0.595 0.472 0.32 ... ## $ energy : num 0.399 0.248 0.689 0.664 0.907 0.795 0.615 0.662 0.746 0.752 ... ## $ key : int 4 9 6 7 8 8 9 11 6 6 ... ## $ loudness : num -8.75 -15.87 -4.95 -7.16 -4.74 ... ## $ speechiness : num 0.0623 0.0337 0.243 0.121 0.113 0.0443 0.0937 0.0362 0.119 0.056 ... ## $ acousticness : num 0.154 0.912 0.197 0.0566 0.0144 0.211 0.0426 0.0178 0.072 0.289 ... ## $ instrumentalness: num 0.00000845 0.000143 0 0.00000158 0 0.00169 0.0000167 0 0 0.000101 ... ## $ liveness : num 0.0646 0.404 0.0722 0.482 0.268 0.0725 0.193 0.0804 0.116 0.102 ... ## $ valence : num 0.382 0.185 0.225 0.267 0.271 0.504 0.0729 0.415 0.442 0.398 ... ## $ tempo : num 160.2 96 77.9 124.7 75.6 ... ## $ duration_ms : int 299160 183613 207680 211413 266640 397093 199973 218447 196040 263893 ... ## $ time_signature : int 5 4 4 4 4 4 4 4 4 4 ... ## $ isrc : chr &quot;QMJMT1500808&quot; &quot;USMC14750470&quot; &quot;USUM71614468&quot; &quot;USRC11502943&quot; ... ## $ spotifyArtistID : chr &quot;0YinUQ50QDB7ZxSCLyQ40k&quot; &quot;6ZjFtWeHP9XN7FeKSUe80S&quot; &quot;246dkjvS1zLTtiykXe5h60&quot; &quot;7bXgB6jMjp9ATFy66eO08Z&quot; ... ## $ releaseDate : chr &quot;08.01.2016&quot; &quot;27.08.2007&quot; &quot;09.12.2016&quot; &quot;11.12.2015&quot; ... ## $ daysSinceRelease: int 450 1000 114 478 527 429 506 132 291 556 ... ## $ spotifyFollowers: int 139718 123135 629600 4077185 2221348 9687258 8713999 39723 4422933 3462797 ... ## $ mbid : chr &quot;0612bcce-e351-40be-b3d7-2bb5e1c23479&quot; &quot;2437980f-513a-44fc-80f1-b90d9d7fcf8f&quot; &quot;b1e26560-60e5-4236-bbdb-9aa5a8d5ee19&quot; &quot;c234fa42-e6a6-443e-937e-2f4b073538a3&quot; ... ## $ artistCountry : chr &quot;US&quot; &quot;US&quot; &quot;0&quot; &quot;US&quot; ... ## $ indicator : int 1 1 1 1 1 1 1 1 1 1 ... ## $ top10 : num 0 0 0 0 0 0 0 0 0 0 ... Below are two attempts to model the data. The left assumes a linear probability model (calculated with the same methods that we used in the last chapter), while the right model is a logistic regression model. As you can see, the linear probability model produces probabilities that are above 1 and below 0, which are not valid probabilities, while the logistic model stays between 0 and 1. Notice that songs with a higher danceability index (on the right of the x-axis) seem to cluster more at \\(1\\) and those with a lower more at \\(0\\) so we expect a positive influence of danceability on the probability of a song to become a top-10 hit. Figure 1.3: The same binary data explained by two models; A linear probability model (on the left) and a logistic regression model (on the right) A key insight at this point is that the connection between \\(\\mathbf{X}\\) and \\(Y\\) is non-linear in the logistic regression model. As we can see in the plot, the probability of success is most strongly affected by danceability around values of \\(0.5\\), while higher and lower values have a smaller marginal effect. This obviously also has consequences for the interpretation of the coefficients later on. 7.6.2 Technical details of the model As the name suggests, the logistic function is an important component of the logistic regression model. It has the following form: \\[ f(\\mathbf{X}) = \\frac{1}{1 + e^{-\\mathbf{X}}} \\] This function transforms all real numbers into the range between 0 and 1. We need this to model probabilities, as probabilities can only be between 0 and 1. The logistic function on its own is not very useful yet, as we want to be able to determine how predictors influence the probability of a value to be equal to 1. To this end we replace the \\(\\mathbf{X}\\) in the function above with our familiar linear specification, i.e. \\[ \\mathbf{X} = \\beta_0 + \\beta_1 * x_{1,i} + \\beta_2 * x_{2,i} + ... +\\beta_m * x_{m,i}\\\\ f(\\mathbf{X}) = P(y_i = 1) = \\frac{1}{1 + e^{-(\\beta_0 + \\beta_1 * x_{1,i} + \\beta_2 * x_{2,i} + ... +\\beta_m * x_{m,i})}} \\] In our case we only have \\(\\beta_0\\) and \\(\\beta_1\\), the coefficient associated with danceability. In general we now have a mathematical relationship between our predictor variables \\((x_1, ..., x_m)\\) and the probability of \\(y_i\\) being equal to one. The last step is to estimate the parameters of this model \\((\\beta_0, \\beta_1, ..., \\beta_m)\\) to determine the magnitude of the effects. 7.6.3 Estimation in R We are now going to show how to perform logistic regression in R. Instead of lm() we now use glm(Y~X, family=binomial(link = 'logit')) to use the logit model. We can still use the summary() command to inspect the output of the model. #Run the glm logit_model &lt;- glm(top10 ~ danceability,family=binomial(link=&#39;logit&#39;),data=chart_data) #Inspect model summary summary(logit_model ) ## ## Call: ## glm(formula = top10 ~ danceability, family = binomial(link = &quot;logit&quot;), ## data = chart_data) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.8852 -0.5011 -0.2385 0.2932 2.8196 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -10.0414 0.8963 -11.20 &lt;0.0000000000000002 *** ## danceability 17.0939 1.6016 10.67 &lt;0.0000000000000002 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 539.05 on 421 degrees of freedom ## Residual deviance: 258.49 on 420 degrees of freedom ## AIC: 262.49 ## ## Number of Fisher Scoring iterations: 6 Noticeably this output does not include an \\(R^2\\) value to asses model fit. Multiple “Pseudo \\(R^2\\)s”, similar to the one used in OLS, have been developed. There are packages that return the \\(R^2\\) given a logit model (see rcompanion or pscl). The calculation by hand is also fairly simple. We define the function logisticPseudoR2s() that takes a logit model as an input and returns three popular pseudo \\(R^2\\) values. logisticPseudoR2s &lt;- function(LogModel) { dev &lt;- LogModel$deviance nullDev &lt;- LogModel$null.deviance modelN &lt;- length(LogModel$fitted.values) R.l &lt;- 1 - dev / nullDev R.cs &lt;- 1- exp ( -(nullDev - dev) / modelN) R.n &lt;- R.cs / ( 1 - ( exp (-(nullDev / modelN)))) cat(&quot;Pseudo R^2 for logistic regression\\n&quot;) cat(&quot;Hosmer and Lemeshow R^2 &quot;, round(R.l, 3), &quot;\\n&quot;) cat(&quot;Cox and Snell R^2 &quot;, round(R.cs, 3), &quot;\\n&quot;) cat(&quot;Nagelkerke R^2 &quot;, round(R.n, 3), &quot;\\n&quot;) } #Inspect Pseudo R2s logisticPseudoR2s(logit_model ) ## Pseudo R^2 for logistic regression ## Hosmer and Lemeshow R^2 0.52 ## Cox and Snell R^2 0.486 ## Nagelkerke R^2 0.673 The coefficients of the model give the change in the log odds of the dependent variable due to a unit change in the regressor. This makes the exact interpretation of the coefficients difficult, but we can still interpret the signs and the p-values which will tell us if a variable has a significant positive or negative impact on the probability of the dependent variable being \\(1\\). In order to get the odds ratios we can simply take the exponent of the coefficients. exp(coef(logit_model )) ## (Intercept) danceability ## 0.00004355897 26532731.71142345294 Notice that the coefficient is extremely large. That is (partly) due to the fact that the danceability variable is constrained to values between \\(0\\) and \\(1\\) and the coefficients are for a unit change. We can make the “unit-change” interpretation more meaningful by multiplying the danceability index by \\(100\\). This linear transformation does not affect the model fit or the p-values. #Re-scale independet variable chart_data$danceability_100 &lt;- chart_data$danceability*100 #Run the regression model logit_model &lt;- glm(top10 ~ danceability_100,family=binomial(link=&#39;logit&#39;),data=chart_data) #Inspect model summary summary(logit_model ) ## ## Call: ## glm(formula = top10 ~ danceability_100, family = binomial(link = &quot;logit&quot;), ## data = chart_data) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.8852 -0.5011 -0.2385 0.2932 2.8196 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -10.04139 0.89629 -11.20 &lt;0.0000000000000002 *** ## danceability_100 0.17094 0.01602 10.67 &lt;0.0000000000000002 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 539.05 on 421 degrees of freedom ## Residual deviance: 258.49 on 420 degrees of freedom ## AIC: 262.49 ## ## Number of Fisher Scoring iterations: 6 #Inspect Pseudo R2s logisticPseudoR2s(logit_model ) ## Pseudo R^2 for logistic regression ## Hosmer and Lemeshow R^2 0.52 ## Cox and Snell R^2 0.486 ## Nagelkerke R^2 0.673 #Convert coefficients to odds ratios exp(coef(logit_model )) ## (Intercept) danceability_100 ## 0.00004355897 1.18641825295 We observe that danceability positively affects the likelihood of becoming at top-10 hit. To get the confidence intervals for the coefficients we can use the same function as with OLS confint(logit_model) ## 2.5 % 97.5 % ## (Intercept) -11.9208213 -8.3954496 ## danceability_100 0.1415602 0.2045529 In order to get a rough idea about the magnitude of the effects we can calculate the partial effects at the mean of the data (that is the effect for the average observation). Alternatively, we can calculate the mean of the effects (that is the average of the individual effects). Both can be done with the logitmfx(...) function from the mfx package. If we set logitmfx(logit_model, data = my_data, atmean = FALSE) we calculate the latter. Setting atmean = TRUE will calculate the former. However, in general we are most interested in the sign and significance of the coefficient. library(mfx) # Average partial effect logitmfx(logit_model, data = chart_data, atmean = FALSE) ## Call: ## logitmfx(formula = logit_model, data = chart_data, atmean = FALSE) ## ## Marginal Effects: ## dF/dx Std. Err. z P&gt;|z| ## danceability_100 0.0157310 0.0029761 5.2857 0.0000001252 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 This now gives the average partial effects in percentage points. An additional point on the danceability scale (from \\(1\\) to \\(100\\)), on average, makes it \\(1.57\\%\\) (percentage points) more likely for a song to become at top-10 hit. To get the effect of an additional point at a specific value, we can calculate the odds ratio by predicting the probability at a value and at the value \\(+1\\). For example if we are interested in how much more likely a song with 51 compared to 50 danceability is to become a hit we can simply calculate the following #Probability of a top 10 hit with a danceability of 50 prob_50 &lt;- exp(-(-summary(logit_model)$coefficients[1,1]-summary(logit_model)$coefficients[2,1]*50 )) prob_50 ## [1] 0.224372 #Probability of a top 10 hit with a danceability of 51 prob_51 &lt;- exp(-(-summary(logit_model)$coefficients[1,1]-summary(logit_model)$coefficients[2,1]*51 )) prob_51 ## [1] 0.266199 #Odds ratio prob_51/prob_50 ## [1] 1.186418 So the odds are 20% higher at 51 than at 50. 7.6.3.1 Logistic model with multiple predictors Of course we can also use multiple predictors in logistic regression as shown in the formula above. We might want to add spotify followers (in million) and weeks since the release of the song. chart_data$spotify_followers_m &lt;- chart_data$spotifyFollowers/1000000 chart_data$weeks_since_release &lt;- chart_data$daysSinceRelease/7 Again, the familiar formula interface can be used with the glm() function. All the model summaries shown above still work with multiple predictors. multiple_logit_model &lt;- glm(top10 ~ danceability_100 + spotify_followers_m + weeks_since_release,family=binomial(link=&#39;logit&#39;),data=chart_data) summary(multiple_logit_model) ## ## Call: ## glm(formula = top10 ~ danceability_100 + spotify_followers_m + ## weeks_since_release, family = binomial(link = &quot;logit&quot;), data = chart_data) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.8861 -0.4390 -0.2083 0.2311 2.8015 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -9.603762 0.990481 -9.696 &lt; 0.0000000000000002 *** ## danceability_100 0.166236 0.016358 10.162 &lt; 0.0000000000000002 *** ## spotify_followers_m 0.197717 0.060030 3.294 0.000989 *** ## weeks_since_release -0.012976 0.004956 -2.619 0.008832 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 534.91 on 416 degrees of freedom ## Residual deviance: 239.15 on 413 degrees of freedom ## (5 observations deleted due to missingness) ## AIC: 247.15 ## ## Number of Fisher Scoring iterations: 6 logisticPseudoR2s(multiple_logit_model) ## Pseudo R^2 for logistic regression ## Hosmer and Lemeshow R^2 0.553 ## Cox and Snell R^2 0.508 ## Nagelkerke R^2 0.703 exp(coef(multiple_logit_model)) ## (Intercept) danceability_100 spotify_followers_m weeks_since_release ## 0.0000674744 1.1808513243 1.2186174345 0.9871076460 confint(multiple_logit_model) ## 2.5 % 97.5 % ## (Intercept) -11.67983072 -7.782122558 ## danceability_100 0.13625795 0.200625438 ## spotify_followers_m 0.08079476 0.317115293 ## weeks_since_release -0.02307859 -0.003566462 7.6.3.2 Model selection The question remains, whether a variable should be added to the model. We will present two methods for model selection for logistic regression. The first is based on the Akaike Information Criterium (AIC). It is reported with the summary output for logit models. The value of the AIC is relative, meaning that it has no interpretation by itself. However, it can be used to compare and select models. The model with the lowest AIC value is the one that should be chosen. Note that the AIC does not indicate how well the model fits the data, but is merely used to compare models. For example, consider the following model, where we exclude the followers covariate. Seeing as it was able to contribute significantly to the explanatory power of the model, the AIC increases, indicating that the model including followers is better suited to explain the data. We always want the lowest possible AIC. multiple_logit_model2 &lt;- glm(top10 ~ danceability_100 + weeks_since_release,family=binomial(link=&#39;logit&#39;),data=chart_data) summary(multiple_logit_model2) ## ## Call: ## glm(formula = top10 ~ danceability_100 + weeks_since_release, ## family = binomial(link = &quot;logit&quot;), data = chart_data) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.9578 -0.4721 -0.2189 0.2562 2.8759 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -8.980225 0.930654 -9.649 &lt;0.0000000000000002 *** ## danceability_100 0.166498 0.016107 10.337 &lt;0.0000000000000002 *** ## weeks_since_release -0.012805 0.004836 -2.648 0.0081 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 534.91 on 416 degrees of freedom ## Residual deviance: 250.12 on 414 degrees of freedom ## (5 observations deleted due to missingness) ## AIC: 256.12 ## ## Number of Fisher Scoring iterations: 6 As a second measure for variable selection, you can use the pseudo \\(R^2\\)s as shown above. The fit is distinctly worse according to all three values presented here, when excluding the Spotify followers. logisticPseudoR2s(multiple_logit_model2) ## Pseudo R^2 for logistic regression ## Hosmer and Lemeshow R^2 0.532 ## Cox and Snell R^2 0.495 ## Nagelkerke R^2 0.685 7.6.3.3 Predictions We can predict the probability given an observation using the predict(my_logit, newdata = ..., type = \"response\") function. Replace ... with the observed values for which you would like to predict the outcome variable. # Prediction for one observation predict(multiple_logit_model, newdata = data.frame(danceability_100=50, spotify_followers_m=10, weeks_since_release=1), type = &quot;response&quot;) ## 1 ## 0.6619986 The prediction indicates that a song with danceability of \\(50\\) from an artist with \\(10M\\) Spotify followers has a \\(66%\\) chance of being in the top-10, 1 week after its release. 7.6.3.4 Perfect Prediction Logit Perfect prediction occurs whenever a linear function of \\(X\\) can perfectly separate the \\(1\\)s from the \\(0\\)s in the dependent variable. This is problematic when estimating a logit model as it will result in biased estimators (also check to p-values in the example!). R will return the following message if this occurs: glm.fit: fitted probabilities numerically 0 or 1 occurred Given this error, one should not use the output of the glm(...) function for the analysis. There are various ways to deal with this problem, one of which is to use Firth’s bias-reduced penalized-likelihood logistic regression with the logistf(Y~X) function in the logistf package. 7.6.3.4.1 Example In this example data \\(Y = 0\\) if \\(x_1 &lt;0\\) and \\(Y=1\\) if \\(x_1&gt;0\\) and we thus have perfect prediction. As we can see the output of the regular logit model is not interpretable. The standard errors are huge compared to the coefficients and thus the p-values are \\(1\\) despite \\(x_1\\) being a predictor of \\(Y\\). Thus, we turn to the penalized-likelihood version. This model correctly indicates that \\(x_1\\) is in fact a predictor for \\(Y\\) as the coefficient is significant. Y &lt;- c(0,0,0,0,1,1,1,1) X &lt;- cbind(c(-1,-2,-3,-3,5,6,10,11),c(3,2,-1,-1,2,4,1,0)) # Perfect prediction with regular logit summary(glm(Y~X, family=binomial(link=&quot;logit&quot;))) ## ## Call: ## glm(formula = Y ~ X, family = binomial(link = &quot;logit&quot;)) ## ## Deviance Residuals: ## 1 2 3 4 5 ## -0.0000102197 -0.0000012300 -0.0000033675 -0.0000033675 0.0000105893 ## 6 7 8 ## 0.0000060786 0.0000000211 0.0000000211 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -6.943 113859.814 0 1 ## X1 7.359 15925.251 0 1 ## X2 -3.125 43853.489 0 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 11.09035488895912 on 7 degrees of freedom ## Residual deviance: 0.00000000027772 on 5 degrees of freedom ## AIC: 6 ## ## Number of Fisher Scoring iterations: 24 library(logistf) # Perfect prediction with penalized-likelihood logit summary(logistf(Y~X)) ## logistf(formula = Y ~ X) ## ## Model fitted by Penalized ML ## Coefficients: ## coef se(coef) lower 0.95 upper 0.95 Chisq p ## (Intercept) -0.98871643 1.2135184 -10.21693673 1.884508 0.59231445 0.44152553 ## X1 0.33195133 0.1832767 0.04170297 1.463409 5.31583569 0.02113246 ## X2 0.08250405 0.5109798 -2.17888664 3.379327 0.01980379 0.88808646 ## method ## (Intercept) 2 ## X1 2 ## X2 2 ## ## Method: 1-Wald, 2-Profile penalized log-likelihood, 3-None ## ## Likelihood ratio test=5.800986 on 2 df, p=0.05499609, n=8 ## Wald test = 3.744738 on 2 df, p = 0.153759 Learning check (LC7.1) What is a correlation coefficient? It describes the difference in means of two variables It describes the causal relation between two variables It is the standardized covariance It describes the degree to which the variation in one variable is related to the variation in another variable None of the above (LC7.2) Which line through a scatterplot produces the best fit in a linear regression model? The line associated with the steepest slope parameter The line that minimizes the sum of the squared deviations of the predicted values (regression line) from the observed values The line that minimizes the sum of the squared residuals The line that maximizes the sum of the squared residuals None of the above (LC7.3) What is the interpretation of the regression coefficient (\\(\\beta_1\\)=0.05) in a regression model where log(sales) (i.e., log-transformed units) is the dependent variable and log(advertising) (i.e., the log-transformed advertising expenditures in Euro) is the independent variable (i.e., \\(log(sales)=13.4+0.05∗log(advertising)\\))? An increase in advertising by 1€ leads to an increase in sales by 0.5 units A 1% increase in advertising leads to a 0.05% increase in sales A 1% increase in advertising leads to a 5% decrease in sales An increase in advertising by 1€ leads to an increase in sales by 0.005 units None of the above (LC7.4) Which of the following statements about the adjusted R-squared is TRUE? It is always larger than the regular \\(R^{2}\\) It increases with every additional variable It increases only with additional variables that add more explanatory power than pure chance It contains a “penalty” for including unnecessary variables None of the above (LC7.5) What does the term overfitting refer to? A regression model that has too many predictor variables A regression model that fits to a specific data set so poorly, that it will not generalize to other samples A regression model that fits to a specific data set so well, that it will only predict well within the sample but not generalize to other samples A regression model that fits to a specific data set so well, that it will generalize to other samples particularly well None of the above (LC7.6) What are assumptions of the linear regression model? Endogeneity Independent errors Heteroscedasticity Linear dependence of regressors None of the above (LC7.7) What does the problem of heteroscedasticity in a regression model refer to? The variance of the error term is not constant A strong linear relationship between the independent variables The variance of the error term is constant A correlation between the error term and the independent variables None of the above (LC7.8) What are properties of the multiplicative regression model (i.e., log-log specification)? Constant marginal returns Decreasing marginal returns Constant elasticity Increasing marginal returns None of the above (LC7.9) When do you use a logistic regression model? When the dependent variable is continuous When the independent and dependent variables are binary When the dependent variable is binary None of the above (LC7.10) What is the correct way to implement a linear regression model in R? (x = independent variable, y = dependent variable)? lm(y~x, data=data) lm(x~y + error, data=data) lm(x~y, data=data) lm(y~x + error, data=data) None of the above References Field, A., Miles J., &amp; Field, Z. (2012): Discovering Statistics Using R. Sage Publications (chapters 6, 7, 8). James, G., Witten, D., Hastie, T., &amp; Tibshirani, R. (2013): An Introduction to Statistical Learning with Applications in R, Springer (chapter 3) "],["exploratory-factor-analysis.html", "8 Exploratory factor analysis 8.1 Introduction 8.2 Steps in factor analysis 8.3 Reliability analysis Learning check References", " 8 Exploratory factor analysis You can download the corresponding R-Code here 8.1 Introduction In this chapter, we will focus on exploratory factor analysis. Generally, factor analysis is a class of procedures used for data reduction or summary. It is an interdependence technique, meaning that there is no distinction between dependent and independent variables and all variables are considered simultaneously. In exploratory factor analysis, specific hypotheses about how many factors will emerge, and what items these factors will comprise are not requires (as opposed to confirmatory factor analysis). Principal Components Analysis (PCA) is one of the most frequently used techniques. The goals are … To identify underlying dimensions, or factors, that explain the correlations among a set of variables To identify a new, smaller set of uncorrelated variables to replace the original set of correlated variables in subsequent multivariate analysis (e.g., regression analysis, t-test, etc.) To see what this means, let’s use a simple example. Say, you wanted to explain the motives underlying the purchasing of toothpaste. You come up with six items that represent different motives of purchasing toothpaste: Item 1: It is important to buy toothpaste that prevents cavities. Item 2: I like a toothpaste that gives shiny teeth. Item 3: A toothpaste should strengthen your gums. Item 4: I prefer a toothpaste that freshens breath. Item 5: Prevention of tooth decay should not be an important benefit offered by a toothpaste. Item 6: The most important consideration in buying a toothpaste is attractive teeth. Let’s assume you collect data from 30 respondents and you use 7-point itemized rating scales to measure the extent of agreement to each of these statements. This is the data that you have collected: factor_analysis &lt;- read.table(&quot;https://raw.githubusercontent.com/IMSMWU/Teaching/master/MRDA2017/toothpaste.dat&quot;, sep = &quot;\\t&quot;, header = TRUE) #read in data str(factor_analysis) #inspect data ## &#39;data.frame&#39;: 30 obs. of 6 variables: ## $ prevent_cavities: int 7 1 6 4 1 6 5 6 3 2 ... ## $ shiny_teeth : int 3 3 2 5 2 3 3 4 4 6 ... ## $ strengthen_gum : int 6 2 7 4 2 6 6 7 2 2 ... ## $ fresh_breath : int 4 4 4 6 3 4 3 4 3 6 ... ## $ prevent_decay : int 6 3 7 6 2 6 4 7 2 1 ... ## $ attract_teeth : int 4 4 3 5 2 4 3 4 3 6 ... head(factor_analysis) #inspect data A construct is a specific type of concept that exists at a higher level of abstraction than everyday concepts. In this example, the perceived benefits of toothpaste represent the construct that we would like to measure. The construct is unobservable (‘latent’) but it can be inferred from other measurable variables (items) that together comprise a scale (latent construct). A multi-item scale consists of multiple items, where an item is a single question or statement to be evaluated. In the above example, we use six items to measure the perceived benefits of toothpaste. If several items correlate highly, they might measure aspects of a common underlying dimension (a.k.a. factors). That is, specific patterns in the correlation matrix signal the existence of one or more factors underlying the data. Let’s inspect the correlation matrix using the rcorr() function from the Hmisc package. library(&quot;Hmisc&quot;) rcorr(as.matrix(factor_analysis)) ## prevent_cavities shiny_teeth strengthen_gum fresh_breath ## prevent_cavities 1.00 -0.05 0.87 -0.09 ## shiny_teeth -0.05 1.00 -0.16 0.57 ## strengthen_gum 0.87 -0.16 1.00 -0.25 ## fresh_breath -0.09 0.57 -0.25 1.00 ## prevent_decay 0.86 -0.02 0.78 0.01 ## attract_teeth 0.00 0.64 -0.02 0.64 ## prevent_decay attract_teeth ## prevent_cavities 0.86 0.00 ## shiny_teeth -0.02 0.64 ## strengthen_gum 0.78 -0.02 ## fresh_breath 0.01 0.64 ## prevent_decay 1.00 0.14 ## attract_teeth 0.14 1.00 ## ## n= 30 ## ## ## P ## prevent_cavities shiny_teeth strengthen_gum fresh_breath ## prevent_cavities 0.7800 0.0000 0.6508 ## shiny_teeth 0.7800 0.4134 0.0010 ## strengthen_gum 0.0000 0.4134 0.1868 ## fresh_breath 0.6508 0.0010 0.1868 ## prevent_decay 0.0000 0.9175 0.0000 0.9725 ## attract_teeth 0.9826 0.0001 0.9245 0.0001 ## prevent_decay attract_teeth ## prevent_cavities 0.0000 0.9826 ## shiny_teeth 0.9175 0.0001 ## strengthen_gum 0.0000 0.9245 ## fresh_breath 0.9725 0.0001 ## prevent_decay 0.4723 ## attract_teeth 0.4723 You can see that some of the items correlate highly, while others don’t. Specifically, there appear to be two groups of items that correlate highly and that might represent underlying dimensions of the construct: Factor 1: Items 1, 3, 5 Factor 2: Items 2, 4, 6 Going back to the specific wording of the items you can see that the first group of items (i.e., items 1,3,5) refer to the health benefits, while the second item group (i.e., items 2,4,6) refer to the social benefits. Imagine now, for example, you would like to include the above variables as explanatory variables in a regression model. Due to the high degree of correlation among the items, you are likely to run into problems of multicollinearity. Instead of omitting some of the items, you might try to combine highly correlated items into one variable. Another application could be when you are developing a new measurement scale for a construct and you wish to explore the underlying dimensions of this construct. In these applications, you need to make sure that the questions that you are asking actually relate to the construct that you intend to measure. The goal of factor analysis is to explain the maximum amount of total variance in a correlation matrix by transforming the original variables into linear components. This means that the correlation matrix is broken down into a smaller set of dimensions. The generalized formal representation of the linear relationship between a latent factor Y and the set of variables can be written as: \\[\\begin{equation} Y_i=b_1X_{1i} + b_2X_{2i} + b_nX_{ni}+\\epsilon_i \\tag{8.1} \\end{equation}\\] where Xn represents the data that we have collected for the different variables. To make it more explicit, the equation could also be written as \\[\\begin{equation} Factor_i=b_1Variable_{1i} + b_2Variable_{2i} + b_nVariable_{ni}+\\epsilon_i \\tag{8.2} \\end{equation}\\] where the dependent variable “Factor” refers to the factor score of person i on the underlying dimensions. In our case, the initial inspection suggested two underlying factors (i.e., health benefits and social benefits), so that we can construct two equations that describe both factors in terms of the variables that we have measured: \\[\\begin{equation} Health_i=b_1X_{1i} + b_2X_{2i} + b_3X_{3i}+ b_4X_{4i}+ b_5X_{5i}+ b_6X_{6i}+\\epsilon_i \\tag{8.3} \\end{equation}\\] \\[\\begin{equation} Social_i=b_1X_{1i} + b_2X_{2i} + b_3X_{3i}+ b_4X_{4i}+ b_5X_{5i}+ b_6X_{6i}+\\epsilon_i \\tag{8.4} \\end{equation}\\] where the b’s in each equation represent the factor loadings. You can see that both equations include the same set of predictors. However, their values in each equation will be different, depending on the importance of each variable to the respective factor. Once the factor loadings have been computed (we will see how this is done below), we can summarize them in a component matrix, which is usually denoted as A: \\[\\mathbf{A} = \\left[\\begin{array} {rrr} 0.93 &amp; 0.25 \\\\ -0.30 &amp; 0.80 \\\\ 0.94 &amp; 0.13 \\\\ -0.34 &amp; 0.79 \\\\ 0.87 &amp; 0.35 \\\\ -0.18 &amp; 0.87 \\end{array}\\right]\\] The linear relation between the factors and the factor loadings can also be shown in a graph, where each axis represents a factor and the variables are placed on the coordinates according to the strength of the relationship between the variable and each factor. The greater the loading of variables on a factor, the more that factor explains relationships between those variables. You can also think of the factor loadings as the correlations between a factor and a variable. Figure 1.2: Factor loadings The factor loadings may then be used to compute the two new variables (i.e., factor scores) representing the two underlying dimensions. Using a rather simplistic approach, the factor scores for person i could be computed by \\[\\begin{equation} \\begin{split} Health_i=&amp; 0.93*preventCavities_{i} -0.3*shinyTeeth_{i} + 0.94*strengthenGum_{i}\\\\ &amp;-0.34*freshBreath_{i} + 0.87*preventDecay_{i} - 0.18*attractTeeth_{i} \\end{split} \\tag{8.5} \\end{equation}\\] \\[\\begin{equation} \\begin{split} Social_i=&amp; 0.25*preventCavities_{i} + 0.80*shinyTeeth_{i} + 0.13*strengthenGum_{i}\\\\ &amp;+ 0.79*freshBreath_{i}+ 0.35*preventDecay_{i}+ 0.87*attractTeeth_{i} \\end{split} \\tag{8.6} \\end{equation}\\] where the variable names are replaced by the values that were observed for respondent i to compute the factor scores for respondent i. This means that we have reduced the number of variables from six to two. Note that this is a rather simple approach that is intended to explain the underlying logic. However, that the resulting factor scores will depend on the measurement scales of the variables. If different measurement scales would be used, the resulting factor scores for different factors could not be compared. Thus, R will compute the factor scores using more sophisticated methods as we will see below. 8.2 Steps in factor analysis Now that we have a broad understanding of how factor analysis works, let’s use another example to go through the process of deriving factors step by step. In this section, we will use the R anxiety questionnaire from the book by Andy Field et al.. The questionnaire is intended to measure the various aspects of student’s anxiety towards learning R. It includes 23 items for which respondents are asked to indicate on a five-point Likert scale to what extent they agree with the respective statements. The questionnaire is shown in the following figure: The R anxiety questionnaire (source: Field, A. et al. (2012): Discovering Statistics Using R, p. 768) Let’s assume, we have collected data from 2,571 respondents and stored the results in the data set “raq.dat”. raq_data &lt;- read.table(&quot;https://raw.githubusercontent.com/IMSMWU/Teaching/master/MRDA2017/raq.dat&quot;, sep = &quot;\\t&quot;, header = TRUE) #read in data 8.2.1 Are the assumptions satisfied? Since PCA is based the correlation between variables, the first step is to inspect the correlation matrix, which can be created using the cor() function. raq_matrix &lt;- cor(raq_data) round(raq_matrix,3) ## Q01 Q02 Q03 Q04 Q05 Q06 Q07 Q08 Q09 Q10 ## Q01 1.000 -0.099 -0.337 0.436 0.402 0.217 0.305 0.331 -0.092 0.214 ## Q02 -0.099 1.000 0.318 -0.112 -0.119 -0.074 -0.159 -0.050 0.315 -0.084 ## Q03 -0.337 0.318 1.000 -0.380 -0.310 -0.227 -0.382 -0.259 0.300 -0.193 ## Q04 0.436 -0.112 -0.380 1.000 0.401 0.278 0.409 0.349 -0.125 0.216 ## Q05 0.402 -0.119 -0.310 0.401 1.000 0.257 0.339 0.269 -0.096 0.258 ## Q06 0.217 -0.074 -0.227 0.278 0.257 1.000 0.514 0.223 -0.113 0.322 ## Q07 0.305 -0.159 -0.382 0.409 0.339 0.514 1.000 0.297 -0.128 0.284 ## Q08 0.331 -0.050 -0.259 0.349 0.269 0.223 0.297 1.000 0.016 0.159 ## Q09 -0.092 0.315 0.300 -0.125 -0.096 -0.113 -0.128 0.016 1.000 -0.134 ## Q10 0.214 -0.084 -0.193 0.216 0.258 0.322 0.284 0.159 -0.134 1.000 ## Q11 0.357 -0.144 -0.351 0.369 0.298 0.328 0.345 0.629 -0.116 0.271 ## Q12 0.345 -0.195 -0.410 0.442 0.347 0.313 0.423 0.252 -0.167 0.246 ## Q13 0.355 -0.143 -0.318 0.344 0.302 0.466 0.442 0.314 -0.167 0.302 ## Q14 0.338 -0.165 -0.371 0.351 0.315 0.402 0.441 0.281 -0.122 0.255 ## Q15 0.246 -0.165 -0.312 0.334 0.261 0.360 0.391 0.300 -0.187 0.295 ## Q16 0.499 -0.168 -0.419 0.416 0.395 0.244 0.389 0.321 -0.189 0.291 ## Q17 0.371 -0.087 -0.327 0.383 0.310 0.282 0.391 0.590 -0.037 0.218 ## Q18 0.347 -0.164 -0.375 0.382 0.322 0.513 0.501 0.280 -0.150 0.293 ## Q19 -0.189 0.203 0.342 -0.186 -0.165 -0.167 -0.269 -0.159 0.249 -0.127 ## Q20 0.214 -0.202 -0.325 0.243 0.200 0.101 0.221 0.175 -0.159 0.084 ## Q21 0.329 -0.205 -0.417 0.410 0.335 0.272 0.483 0.296 -0.136 0.193 ## Q22 -0.104 0.231 0.204 -0.098 -0.133 -0.165 -0.168 -0.079 0.257 -0.131 ## Q23 -0.004 0.100 0.150 -0.034 -0.042 -0.069 -0.070 -0.050 0.171 -0.062 ## Q11 Q12 Q13 Q14 Q15 Q16 Q17 Q18 Q19 Q20 ## Q01 0.357 0.345 0.355 0.338 0.246 0.499 0.371 0.347 -0.189 0.214 ## Q02 -0.144 -0.195 -0.143 -0.165 -0.165 -0.168 -0.087 -0.164 0.203 -0.202 ## Q03 -0.351 -0.410 -0.318 -0.371 -0.312 -0.419 -0.327 -0.375 0.342 -0.325 ## Q04 0.369 0.442 0.344 0.351 0.334 0.416 0.383 0.382 -0.186 0.243 ## Q05 0.298 0.347 0.302 0.315 0.261 0.395 0.310 0.322 -0.165 0.200 ## Q06 0.328 0.313 0.466 0.402 0.360 0.244 0.282 0.513 -0.167 0.101 ## Q07 0.345 0.423 0.442 0.441 0.391 0.389 0.391 0.501 -0.269 0.221 ## Q08 0.629 0.252 0.314 0.281 0.300 0.321 0.590 0.280 -0.159 0.175 ## Q09 -0.116 -0.167 -0.167 -0.122 -0.187 -0.189 -0.037 -0.150 0.249 -0.159 ## Q10 0.271 0.246 0.302 0.255 0.295 0.291 0.218 0.293 -0.127 0.084 ## Q11 1.000 0.335 0.423 0.325 0.365 0.369 0.587 0.373 -0.200 0.255 ## Q12 0.335 1.000 0.489 0.433 0.332 0.408 0.333 0.493 -0.267 0.298 ## Q13 0.423 0.489 1.000 0.450 0.342 0.358 0.408 0.533 -0.227 0.204 ## Q14 0.325 0.433 0.450 1.000 0.380 0.418 0.354 0.498 -0.254 0.226 ## Q15 0.365 0.332 0.342 0.380 1.000 0.454 0.373 0.343 -0.210 0.206 ## Q16 0.369 0.408 0.358 0.418 0.454 1.000 0.410 0.422 -0.267 0.265 ## Q17 0.587 0.333 0.408 0.354 0.373 0.410 1.000 0.376 -0.163 0.205 ## Q18 0.373 0.493 0.533 0.498 0.343 0.422 0.376 1.000 -0.257 0.235 ## Q19 -0.200 -0.267 -0.227 -0.254 -0.210 -0.267 -0.163 -0.257 1.000 -0.249 ## Q20 0.255 0.298 0.204 0.226 0.206 0.265 0.205 0.235 -0.249 1.000 ## Q21 0.346 0.441 0.374 0.399 0.300 0.421 0.363 0.430 -0.275 0.468 ## Q22 -0.162 -0.167 -0.195 -0.170 -0.168 -0.156 -0.126 -0.160 0.234 -0.100 ## Q23 -0.086 -0.046 -0.053 -0.048 -0.062 -0.082 -0.092 -0.080 0.122 -0.035 ## Q21 Q22 Q23 ## Q01 0.329 -0.104 -0.004 ## Q02 -0.205 0.231 0.100 ## Q03 -0.417 0.204 0.150 ## Q04 0.410 -0.098 -0.034 ## Q05 0.335 -0.133 -0.042 ## Q06 0.272 -0.165 -0.069 ## Q07 0.483 -0.168 -0.070 ## Q08 0.296 -0.079 -0.050 ## Q09 -0.136 0.257 0.171 ## Q10 0.193 -0.131 -0.062 ## Q11 0.346 -0.162 -0.086 ## Q12 0.441 -0.167 -0.046 ## Q13 0.374 -0.195 -0.053 ## Q14 0.399 -0.170 -0.048 ## Q15 0.300 -0.168 -0.062 ## Q16 0.421 -0.156 -0.082 ## Q17 0.363 -0.126 -0.092 ## Q18 0.430 -0.160 -0.080 ## Q19 -0.275 0.234 0.122 ## Q20 0.468 -0.100 -0.035 ## Q21 1.000 -0.129 -0.068 ## Q22 -0.129 1.000 0.230 ## Q23 -0.068 0.230 1.000 If the variables measure the same construct, we would expect to see a certain degree of correlation between the variables. Even if the variables turn out to measure different dimensions of the same underlying construct, we would still expect to see some degree of correlation. So the first problem that could occur is that the correlations are not high enough. A first approach would be to scan the correlation matrix for correlations lower than about 0.3 and identify variables that have many correlations below this threshold. If your data set contains many variables, this task can be quite tedious. To make the task a little easier, you could proceed as follows. Create a dataframe from the correlation matrix and set the diagonal elements to missing since these are always 1: correlations &lt;- as.data.frame(raq_matrix) diag(correlations) &lt;- NA Now we can use the apply() function to count the number of correlations for each variable that are below a certain threshold (say, 0.3). The apply() function is very useful as it lets you apply function by the rows or columns in your dataframe. In the following example abs(correlations) &lt; 0.3 returns a logical value for the correlation matrix that returns TRUE if the statement is true. The second argument 1 means that the function should be applied to the rows (2 would apply it to the columns). The third argument states the function that should be applied. In our case, we would like to count the number of absolute correlations below 0.3 so we apply the sum function, which sums the number of TRUE occurrences by row. The final argument na.rm = TRUE simply tells R to neglect the missing values that we have created for the diagonals of the matrix. apply(abs(correlations) &lt; 0.3, 1, sum, na.rm = TRUE) ## Q01 Q02 Q03 Q04 Q05 Q06 Q07 Q08 Q09 Q10 Q11 Q12 Q13 Q14 Q15 Q16 Q17 Q18 Q19 Q20 ## 9 20 6 8 11 14 8 16 21 20 8 8 6 8 11 8 8 8 21 20 ## Q21 Q22 Q23 ## 9 22 22 The output shows you the number of correlations below the threshold for each variable. In a similar way, it would also be possible to compute the mean correlation for each variable. apply(abs(correlations),1,mean,na.rm=TRUE) ## Q01 Q02 Q03 Q04 Q05 Q06 Q07 Q08 ## 0.2786461 0.1590732 0.3193955 0.3044131 0.2671130 0.2685230 0.3341477 0.2581210 ## Q09 Q10 Q11 Q12 Q13 Q14 Q15 Q16 ## 0.1555957 0.2105303 0.3197517 0.3263889 0.3277661 0.3179673 0.2902898 0.3345197 ## Q17 Q18 Q19 Q20 Q21 Q22 Q23 ## 0.3084564 0.3421177 0.2173012 0.2121990 0.3222743 0.1621558 0.0798525 Another way to make the correlations more salient is to plot the correlation matrix using different colors that indicate the strength of the correlations. This can be done using the corPolot() function from the psych package. corPlot(correlations,numbers=TRUE,upper=FALSE,diag=FALSE,main=&quot;Correlations between variables&quot;) Figure 1.7: Correlation matrix You will, however, notice that this is a rather subjective approach. The Bartlett’s test is a statistical test that can be used to test whether all the off-diagonal elements in the population correlation matrix are zero (i.e., whether the population correlation matrix resembles an identify matrix). Thus, it tests whether the correlations are overall too small. If the matrix is an identify matrix, it means that all variables are independent. Thus, a significant test statistic (i.e., p &lt; 0.05) indicates that there is some relationship between variables. The test can be implemented using the cortest.bartlett() function from the psych package: library(psych) cortest.bartlett(raq_matrix, n = nrow(raq_data)) ## $chisq ## [1] 19334.49 ## ## $p.value ## [1] 0 ## ## $df ## [1] 253 In our example, the p-value is less than 0.05, which is good news since it confirms that overall the correlation between variables is different from zero. The other problem that might occur is that the correlations are too high. Actually, a certain degree of multicollinearity is not a problem in PCA. However, it is important to avoid extreme multicollinearity (i.e., variables are highly correlated) and singularity (i.e., variables are perfectly correlated). Multicollinearity causes problems, because it becomes difficult to determine the unique contribution of a variable (as was the case in linear regression analysis). Again, inspecting the entire correlation matrix when there are many variables will be a tedious task. . apply(abs(correlations) &gt; 0.8, 1, sum, na.rm = TRUE) ## Q01 Q02 Q03 Q04 Q05 Q06 Q07 Q08 Q09 Q10 Q11 Q12 Q13 Q14 Q15 Q16 Q17 Q18 Q19 Q20 ## 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## Q21 Q22 Q23 ## 0 0 0 The results do not suggest any extreme or perfect correlations. Again, there is a more objective measure that could be applied. The determinant tells us whether the correlation matrix is singular (determinant = 0), or if all variables are completely unrelated (determinant = 1), or somewhere in between. As a rule of thumb, the determinant should be greater than 0.00001. The det() function can be used to compute the determinant: det(raq_matrix) ## [1] 0.0005271037 det(raq_matrix) &gt; 0.00001 ## [1] TRUE As you can see, the determinant is larger than the threshold, indicating that the overall correlation between variables is not too strong. Finally, you should test if the correlation pattern in the matrix is appropriate for factor analysis using the Kaiser-Meyer-Olkin (KMO) measure of sampling adequacy. This statistic is a measure of the proportion of variance among variables that might be common variance. \\[\\begin{equation} MSA_j=\\frac{\\sum_{k\\ne j}^{}{r^2_{jk}}}{\\sum_{k\\ne j}^{}{r^2_{jk}}+\\sum_{k\\ne j}^{}{p^2_{jk}}} \\tag{8.7} \\end{equation}\\] where \\(r_{jk}\\) is the correlation between two variables of interest and \\(p_{jk}\\) is their partial correlation. The partial correlation measures the degree of association between the two variables, when the effect of the remaining variables is controlled for. It can takes values between 0 (bad) and 1 (good), where a value of 0 indicates that the sum of partial correlations is large relative to the sum of correlations. If the remaining correlation between two variables remains high if you control for all the other variables, this provides an indication that the correlation is fairly concentrated and on a subset of the variables and factor analysis is likely to be inappropriate. In contrast, a value close to 1 means that the sum of the partial correlations is fairly is low, indicating a more compact pattern of correlations between a larger set of variables. Values should at least exceed 0.50, with the thresholds: &lt;.50 = unacceptable &gt;.50 = miserable &gt;.60 = mediocre &gt;.70 = middling &gt;.80 = meritorious &gt;.90 = marvelous The KMO measure of sampling adequacy can be computed using the KMO() function from the psych package: KMO(raq_data) ## Kaiser-Meyer-Olkin factor adequacy ## Call: KMO(r = raq_data) ## Overall MSA = 0.93 ## MSA for each item = ## Q01 Q02 Q03 Q04 Q05 Q06 Q07 Q08 Q09 Q10 Q11 Q12 Q13 Q14 Q15 Q16 ## 0.93 0.87 0.95 0.96 0.96 0.89 0.94 0.87 0.83 0.95 0.91 0.95 0.95 0.97 0.94 0.93 ## Q17 Q18 Q19 Q20 Q21 Q22 Q23 ## 0.93 0.95 0.94 0.89 0.93 0.88 0.77 You can see that the statistic is calculated for the entire matrix and for each variable individually. In our example, the values for all variables as well as the overall matrix is above 0.5, suggesting that factor analysis is appropriate. 8.2.2 Deriving factors After testing that the data can be used for PCA, we can move on to conducting PCA. Conducting PCA is fairly simple in R using the pricipal() function from the psych package. However, before the apply the function to our data, it is useful to reflect on the goals of PCA again. The goal is to explain the maximum amount of total variance in a correlation matrix by transforming the original variables into a smaller set of linear components (factors). So the first decision we have to make is how many factors we should extract. There are different methods that can be used to decide on the appropriate number of factors, including: A priori determination: Requires prior knowledge Determination based on percentage of variance: When cumulative percentage of variance extracted by the factors reaches a satisfactory level (e.g., factors extracted should account for at least 60% of the variance) Eigenvalues: Eigenvalues refer to the total variance that is explained by each factor. Factors with eigenvalues greater than 1.0 are retained (factors with a variance less than 1.0 are no better than a single variable) Scree plot: Is a plot of the eigenvalues against the number of factors in order of extraction. Assumption: the point at which the scree begins denotes the true number of factors. Often, the decision is made based on a combination of different criteria. By extracting as many factors as there are variables we can inspect their eigenvalues and make decisions about which factors to extract. Since we have 23 variables, we set the argument nfactors to 23. pc1 &lt;- principal(raq_data, nfactors = 23, rotate = &quot;none&quot;) pc1 ## Principal Components Analysis ## Call: principal(r = raq_data, nfactors = 23, rotate = &quot;none&quot;) ## Standardized loadings (pattern matrix) based upon correlation matrix ## PC1 PC2 PC3 PC4 PC5 PC6 PC7 PC8 PC9 PC10 PC11 PC12 ## Q01 0.59 0.18 -0.22 0.12 -0.40 -0.11 -0.22 -0.08 0.01 -0.10 0.11 -0.12 ## Q02 -0.30 0.55 0.15 0.01 -0.03 -0.38 0.19 -0.39 0.01 -0.12 0.30 0.27 ## Q03 -0.63 0.29 0.21 -0.07 0.02 0.00 0.01 -0.05 0.20 0.10 0.15 0.03 ## Q04 0.63 0.14 -0.15 0.15 -0.20 -0.12 -0.06 0.11 -0.11 -0.01 -0.03 0.34 ## Q05 0.56 0.10 -0.07 0.14 -0.42 -0.17 -0.06 0.11 0.24 0.09 -0.30 0.16 ## Q06 0.56 0.10 0.57 -0.05 0.17 0.01 0.00 0.05 0.00 0.00 -0.13 0.20 ## Q07 0.69 0.04 0.25 0.10 0.17 -0.08 0.05 0.03 -0.08 0.13 -0.27 0.20 ## Q08 0.55 0.40 -0.32 -0.42 0.15 0.10 -0.07 -0.04 0.01 -0.05 -0.09 0.03 ## Q09 -0.28 0.63 -0.01 0.10 0.17 -0.27 -0.01 -0.03 0.16 0.32 -0.22 -0.37 ## Q10 0.44 0.03 0.36 -0.10 -0.34 0.22 0.44 -0.03 0.37 -0.22 -0.11 -0.21 ## Q11 0.65 0.25 -0.21 -0.40 0.13 0.18 -0.01 0.03 0.10 -0.14 0.00 0.03 ## Q12 0.67 -0.05 0.05 0.25 0.04 -0.08 -0.14 0.08 0.01 -0.11 0.19 -0.07 ## Q13 0.67 0.08 0.28 -0.01 0.13 0.03 -0.21 0.05 0.08 -0.22 0.24 -0.08 ## Q14 0.66 0.02 0.20 0.14 0.08 -0.03 -0.10 -0.06 -0.14 0.16 0.08 -0.29 ## Q15 0.59 0.01 0.12 -0.11 -0.07 0.29 0.32 -0.12 -0.27 0.41 0.15 0.09 ## Q16 0.68 0.01 -0.14 0.08 -0.32 0.00 0.12 -0.14 -0.19 0.15 0.16 -0.19 ## Q17 0.64 0.33 -0.21 -0.34 0.10 0.05 -0.02 0.03 -0.04 0.02 0.01 -0.03 ## Q18 0.70 0.03 0.30 0.13 0.15 -0.09 -0.10 0.06 -0.06 -0.12 0.05 -0.11 ## Q19 -0.43 0.39 0.10 -0.01 -0.15 0.07 0.05 0.68 0.02 0.16 0.29 0.04 ## Q20 0.44 -0.21 -0.40 0.30 0.33 -0.01 0.34 0.03 0.33 0.02 0.21 0.04 ## Q21 0.66 -0.06 -0.19 0.28 0.24 -0.15 0.18 0.10 0.12 0.08 -0.02 0.04 ## Q22 -0.30 0.47 -0.12 0.38 0.07 0.12 0.31 0.12 -0.41 -0.39 -0.19 -0.10 ## Q23 -0.14 0.37 -0.02 0.51 0.02 0.62 -0.28 -0.22 0.18 0.08 0.00 0.13 ## PC13 PC14 PC15 PC16 PC17 PC18 PC19 PC20 PC21 PC22 PC23 h2 ## Q01 0.30 -0.25 0.18 0.12 -0.05 -0.17 0.16 -0.01 -0.21 0.05 0.01 1 ## Q02 -0.02 0.01 -0.24 -0.05 -0.08 0.00 0.01 -0.02 -0.02 0.03 0.02 1 ## Q03 0.10 0.13 0.40 -0.06 0.43 0.08 0.09 0.05 0.01 0.00 0.05 1 ## Q04 -0.32 -0.17 0.12 0.31 0.19 0.05 -0.21 0.04 0.09 -0.02 0.02 1 ## Q05 0.12 0.48 -0.07 -0.08 -0.04 0.01 -0.04 0.00 -0.02 0.02 0.01 1 ## Q06 0.24 -0.03 0.08 0.20 -0.14 0.05 0.09 -0.07 0.04 -0.32 -0.11 1 ## Q07 0.04 -0.22 0.00 -0.23 0.03 -0.15 0.20 0.16 0.14 0.24 0.09 1 ## Q08 -0.01 0.04 -0.04 0.03 0.10 0.07 0.12 -0.15 0.06 0.16 -0.36 1 ## Q09 -0.17 -0.07 0.12 0.11 -0.19 -0.02 -0.08 -0.03 0.04 -0.01 0.03 1 ## Q10 -0.17 -0.15 -0.07 0.03 0.07 -0.01 0.00 0.04 -0.03 0.02 -0.04 1 ## Q11 0.02 0.03 -0.02 0.07 -0.05 0.07 0.07 -0.18 0.06 0.00 0.41 1 ## Q12 -0.45 0.17 0.09 -0.10 -0.08 0.04 0.36 0.00 -0.04 -0.10 -0.02 1 ## Q13 0.01 0.12 0.14 -0.11 -0.06 -0.32 -0.30 -0.06 0.16 0.08 -0.05 1 ## Q14 0.07 0.14 -0.37 0.25 0.34 -0.09 0.06 0.02 0.03 -0.01 0.05 1 ## Q15 -0.09 0.16 0.16 0.06 -0.12 -0.10 -0.04 -0.07 -0.19 0.10 0.00 1 ## Q16 0.12 -0.08 0.06 -0.22 -0.03 0.22 -0.02 -0.04 0.35 -0.12 -0.01 1 ## Q17 -0.01 -0.01 -0.05 -0.18 0.04 -0.04 -0.10 0.42 -0.15 -0.23 -0.01 1 ## Q18 0.09 0.00 0.03 -0.01 -0.06 0.45 -0.15 0.08 -0.18 0.23 0.01 1 ## Q19 0.06 -0.09 -0.16 -0.03 -0.06 0.01 0.05 -0.02 0.02 0.04 -0.02 1 ## Q20 0.17 0.07 0.05 0.22 -0.09 0.00 0.04 0.18 0.10 0.06 -0.04 1 ## Q21 0.03 -0.15 -0.04 -0.27 0.20 -0.03 -0.11 -0.31 -0.20 -0.13 -0.01 1 ## Q22 0.08 0.15 0.09 0.01 0.04 -0.06 0.02 0.00 0.01 -0.01 0.01 1 ## Q23 -0.01 -0.07 -0.12 -0.06 -0.03 0.05 -0.03 0.01 -0.01 -0.02 0.00 1 ## u2 com ## Q01 -1.1e-15 6.0 ## Q02 -3.8e-15 6.1 ## Q03 6.7e-16 4.4 ## Q04 -1.1e-15 4.9 ## Q05 -6.7e-16 5.2 ## Q06 -4.4e-16 4.4 ## Q07 -4.4e-16 4.1 ## Q08 -1.3e-15 5.7 ## Q09 -1.3e-15 5.0 ## Q10 2.2e-16 7.7 ## Q11 -1.3e-15 4.1 ## Q12 -1.6e-15 3.8 ## Q13 -1.6e-15 4.2 ## Q14 -1.1e-15 4.3 ## Q15 -6.7e-16 5.6 ## Q16 -1.8e-15 4.0 ## Q17 -1.6e-15 4.3 ## Q18 -1.1e-15 3.4 ## Q19 -8.9e-16 3.5 ## Q20 4.4e-16 8.7 ## Q21 -2.2e-16 4.6 ## Q22 0.0e+00 7.2 ## Q23 1.1e-16 4.2 ## ## PC1 PC2 PC3 PC4 PC5 PC6 PC7 PC8 PC9 PC10 PC11 ## SS loadings 7.29 1.74 1.32 1.23 0.99 0.90 0.81 0.78 0.75 0.72 0.68 ## Proportion Var 0.32 0.08 0.06 0.05 0.04 0.04 0.04 0.03 0.03 0.03 0.03 ## Cumulative Var 0.32 0.39 0.45 0.50 0.55 0.59 0.62 0.65 0.69 0.72 0.75 ## Proportion Explained 0.32 0.08 0.06 0.05 0.04 0.04 0.04 0.03 0.03 0.03 0.03 ## Cumulative Proportion 0.32 0.39 0.45 0.50 0.55 0.59 0.62 0.65 0.69 0.72 0.75 ## PC12 PC13 PC14 PC15 PC16 PC17 PC18 PC19 PC20 PC21 PC22 ## SS loadings 0.67 0.61 0.58 0.55 0.52 0.51 0.46 0.42 0.41 0.38 0.36 ## Proportion Var 0.03 0.03 0.03 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 ## Cumulative Var 0.78 0.80 0.83 0.85 0.88 0.90 0.92 0.94 0.95 0.97 0.99 ## Proportion Explained 0.03 0.03 0.03 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 ## Cumulative Proportion 0.78 0.80 0.83 0.85 0.88 0.90 0.92 0.94 0.95 0.97 0.99 ## PC23 ## SS loadings 0.33 ## Proportion Var 0.01 ## Cumulative Var 1.00 ## Proportion Explained 0.01 ## Cumulative Proportion 1.00 ## ## Mean item complexity = 5 ## Test of the hypothesis that 23 components are sufficient. ## ## The root mean square of the residuals (RMSR) is 0 ## with the empirical chi square 0 with prob &lt; NA ## ## Fit based upon off diagonal values = 1 The output is quite complex, but we will focus only on the SS loadings for now, which are the Eigenvalues (a.k.a. sum of squared loadings). One common rule is to retain factors with eigenvalues greater than 1.0. So based on this rule, we would extract four factors (i.e., the SS loadings for the fifth factor is &lt; 1). You can also plot the eigenvalues against the number of factors in order of extraction using a so-called Scree plot: plot(pc1$values, type=&quot;b&quot;) abline(h=1, lty=2) Figure 1.13: Scree plot The dashed line is simply a visualization of the rule that we will retain factors with Eigenvalues &gt; 1 (suggesting four factors). Another criterion based on this plot would be to find the point where the curve flattens (point of inflection). If the largest few eigenvalues in the covariance matrix dominate in magnitude, then the scree plot will exhibit an “elbow”. From that point onwards, the incremental gain in explained variance is rather low. Also according to this criterion, we would extract four factors. Taken together, the results suggest that we should extract four factors. Now that we know how many components we want to extract, we can rerun the analysis, specifying that number: pc2 &lt;- principal(raq_data, nfactors = 4, rotate = &quot;none&quot;) pc2 ## Principal Components Analysis ## Call: principal(r = raq_data, nfactors = 4, rotate = &quot;none&quot;) ## Standardized loadings (pattern matrix) based upon correlation matrix ## PC1 PC2 PC3 PC4 h2 u2 com ## Q01 0.59 0.18 -0.22 0.12 0.43 0.57 1.6 ## Q02 -0.30 0.55 0.15 0.01 0.41 0.59 1.7 ## Q03 -0.63 0.29 0.21 -0.07 0.53 0.47 1.7 ## Q04 0.63 0.14 -0.15 0.15 0.47 0.53 1.3 ## Q05 0.56 0.10 -0.07 0.14 0.34 0.66 1.2 ## Q06 0.56 0.10 0.57 -0.05 0.65 0.35 2.1 ## Q07 0.69 0.04 0.25 0.10 0.55 0.45 1.3 ## Q08 0.55 0.40 -0.32 -0.42 0.74 0.26 3.5 ## Q09 -0.28 0.63 -0.01 0.10 0.48 0.52 1.5 ## Q10 0.44 0.03 0.36 -0.10 0.33 0.67 2.1 ## Q11 0.65 0.25 -0.21 -0.40 0.69 0.31 2.2 ## Q12 0.67 -0.05 0.05 0.25 0.51 0.49 1.3 ## Q13 0.67 0.08 0.28 -0.01 0.54 0.46 1.4 ## Q14 0.66 0.02 0.20 0.14 0.49 0.51 1.3 ## Q15 0.59 0.01 0.12 -0.11 0.38 0.62 1.2 ## Q16 0.68 0.01 -0.14 0.08 0.49 0.51 1.1 ## Q17 0.64 0.33 -0.21 -0.34 0.68 0.32 2.4 ## Q18 0.70 0.03 0.30 0.13 0.60 0.40 1.4 ## Q19 -0.43 0.39 0.10 -0.01 0.34 0.66 2.1 ## Q20 0.44 -0.21 -0.40 0.30 0.48 0.52 3.2 ## Q21 0.66 -0.06 -0.19 0.28 0.55 0.45 1.6 ## Q22 -0.30 0.47 -0.12 0.38 0.46 0.54 2.8 ## Q23 -0.14 0.37 -0.02 0.51 0.41 0.59 2.0 ## ## PC1 PC2 PC3 PC4 ## SS loadings 7.29 1.74 1.32 1.23 ## Proportion Var 0.32 0.08 0.06 0.05 ## Cumulative Var 0.32 0.39 0.45 0.50 ## Proportion Explained 0.63 0.15 0.11 0.11 ## Cumulative Proportion 0.63 0.78 0.89 1.00 ## ## Mean item complexity = 1.8 ## Test of the hypothesis that 4 components are sufficient. ## ## The root mean square of the residuals (RMSR) is 0.06 ## with the empirical chi square 4006.15 with prob &lt; 0 ## ## Fit based upon off diagonal values = 0.96 Now that the output is less complex, we can inspect the remaining statistics. The first part of the output is the factor matrix, which contains the factor loadings of all the variables on the four extracted factors (i.e., PC1, PC2, PC3, PC4). As we have said before, the factor loadings are the correlations between the variables and the factors. The factor matrix also contains the columns “h2” and “u2”. “h2” refers to the communality, which is the proportion of variance a variable shares with all the other variables being considered. This is also the proportion of variance explained by the common factors. In contrast, “u2” refers to the unique variance, which is the proportion of the variance that is unique to a particular variable. In PCA, we are primarily interested in the common variance. When the communality is very low (say &lt;.30), a variable is “quite unique” and should be removed, as it is definitely measuring “something else”. In our example, all communalities (i.e., h2) are above 0.3 so that we retain all variables. Note that there is a difference between PCA and common factor analysis. PCA focuses on the variance and aims to reproduce the total variable variance. This means that the components reflect both common and unique variance of the variables. Factor analysis, in contrast, focuses on the correlation and aims to reproduce the correlations among variables. Here, the factors only represent the common variance that variable share and do not include the unique variance. In other words, while factor analysis focuses on explaining the off-diagonal terms in the correlation matrix (i.e., shared co-variance), PCA focuses on explaining the diagonal terms (i.e., the variances). However, although PCA aims to reproduce the on-diagonal terms in the correlation matrix, it also tends to fit the off-diagonal correlations quite well. Hence, the results are often comparable. See also here. You should also take a closer look at the residuals in order to check whether you have extracted the correct number of factors. The difference between the reproduced and the actual correlation matrices are the residuals. We can extract the residuals from our model using the factor.residuals() function from the psych package. It takes the original correlation matrix and the factor loadings as arguments: residuals &lt;- factor.residuals(raq_matrix, pc2$loadings) round(residuals,3) ## Q01 Q02 Q03 Q04 Q05 Q06 Q07 Q08 Q09 Q10 ## Q01 0.565 0.013 0.035 -0.011 0.027 -0.001 -0.061 -0.081 -0.050 0.042 ## Q02 0.013 0.586 -0.062 0.022 0.003 -0.041 -0.011 -0.052 -0.115 -0.023 ## Q03 0.035 -0.062 0.470 0.019 0.035 -0.027 -0.009 0.011 -0.052 -0.013 ## Q04 -0.011 0.022 0.019 0.531 0.002 0.000 -0.010 -0.041 -0.051 0.003 ## Q05 0.027 0.003 0.035 0.002 0.657 -0.016 -0.041 -0.044 -0.016 0.053 ## Q06 -0.001 -0.041 -0.027 0.000 -0.016 0.346 -0.014 0.040 -0.005 -0.139 ## Q07 -0.061 -0.011 -0.009 -0.010 -0.041 -0.014 0.455 0.030 0.033 -0.098 ## Q08 -0.081 -0.052 0.011 -0.041 -0.044 0.040 0.030 0.261 -0.039 -0.021 ## Q09 -0.050 -0.115 -0.052 -0.051 -0.016 -0.005 0.033 -0.039 0.516 -0.018 ## Q10 0.042 -0.023 -0.013 0.003 0.053 -0.139 -0.098 -0.021 -0.018 0.665 ## Q11 -0.066 -0.046 0.006 -0.051 -0.050 0.038 -0.018 -0.061 -0.045 0.012 ## Q12 -0.057 0.024 0.030 -0.006 -0.050 -0.076 -0.072 0.024 0.027 -0.038 ## Q13 0.008 -0.021 0.024 -0.051 -0.058 -0.078 -0.091 0.001 -0.021 -0.096 ## Q14 -0.024 -0.009 0.002 -0.060 -0.055 -0.075 -0.074 0.032 0.038 -0.091 ## Q15 -0.065 -0.007 0.025 -0.009 -0.045 -0.047 -0.033 -0.039 -0.012 -0.018 ## Q16 0.059 0.050 0.039 -0.050 -0.005 -0.056 -0.051 -0.068 -0.014 0.052 ## Q17 -0.069 -0.039 0.003 -0.052 -0.049 -0.008 0.025 -0.105 -0.027 -0.033 ## Q18 -0.020 -0.015 0.001 -0.042 -0.066 -0.048 -0.069 0.030 0.018 -0.110 ## Q19 0.015 -0.153 -0.061 0.045 0.041 -0.020 -0.015 -0.056 -0.114 0.010 ## Q20 -0.128 0.099 0.115 -0.110 -0.092 0.122 0.002 0.011 0.060 0.078 ## Q21 -0.120 0.049 0.071 -0.070 -0.078 0.029 0.053 0.014 0.055 0.005 ## Q22 -0.079 -0.102 -0.071 -0.049 -0.072 0.043 0.010 0.020 -0.161 0.066 ## Q23 -0.049 -0.147 -0.008 -0.076 -0.070 0.013 -0.033 0.086 -0.152 0.048 ## Q11 Q12 Q13 Q14 Q15 Q16 Q17 Q18 Q19 Q20 ## Q01 -0.066 -0.057 0.008 -0.024 -0.065 0.059 -0.069 -0.020 0.015 -0.128 ## Q02 -0.046 0.024 -0.021 -0.009 -0.007 0.050 -0.039 -0.015 -0.153 0.099 ## Q03 0.006 0.030 0.024 0.002 0.025 0.039 0.003 0.001 -0.061 0.115 ## Q04 -0.051 -0.006 -0.051 -0.060 -0.009 -0.050 -0.052 -0.042 0.045 -0.110 ## Q05 -0.050 -0.050 -0.058 -0.055 -0.045 -0.005 -0.049 -0.066 0.041 -0.092 ## Q06 0.038 -0.076 -0.078 -0.075 -0.047 -0.056 -0.008 -0.048 -0.020 0.122 ## Q07 -0.018 -0.072 -0.091 -0.074 -0.033 -0.051 0.025 -0.069 -0.015 0.002 ## Q08 -0.061 0.024 0.001 0.032 -0.039 -0.068 -0.105 0.030 -0.056 0.011 ## Q09 -0.045 0.027 -0.021 0.038 -0.012 -0.014 -0.027 0.018 -0.114 0.060 ## Q10 0.012 -0.038 -0.096 -0.091 -0.018 0.052 -0.033 -0.110 0.010 0.078 ## Q11 0.310 0.020 0.020 -0.013 -0.045 -0.075 -0.094 0.020 -0.002 0.056 ## Q12 0.020 0.487 0.030 -0.048 -0.042 -0.058 0.014 -0.020 0.036 -0.056 ## Q13 0.020 0.030 0.464 -0.047 -0.091 -0.061 0.006 -0.023 0.004 0.041 ## Q14 -0.013 -0.048 -0.047 0.512 -0.017 -0.011 0.012 -0.038 0.000 -0.015 ## Q15 -0.045 -0.042 -0.091 -0.017 0.622 0.077 -0.025 -0.094 0.027 0.031 ## Q16 -0.075 -0.058 -0.061 -0.011 0.077 0.513 -0.034 -0.024 0.032 -0.108 ## Q17 -0.094 0.014 0.006 0.012 -0.025 -0.034 0.317 0.019 -0.001 0.009 ## Q18 0.020 -0.020 -0.023 -0.038 -0.094 -0.024 0.019 0.403 0.003 0.020 ## Q19 -0.002 0.036 0.004 0.000 0.027 0.032 -0.001 0.003 0.657 0.060 ## Q20 0.056 -0.056 0.041 -0.015 0.031 -0.108 0.009 0.020 0.060 0.516 ## Q21 0.005 -0.062 -0.010 -0.032 -0.036 -0.074 0.016 -0.009 0.049 0.010 ## Q22 0.047 -0.031 0.007 -0.011 0.062 -0.004 0.019 0.023 -0.060 -0.032 ## Q23 0.116 -0.057 0.026 -0.027 0.079 -0.032 0.049 -0.049 -0.073 -0.056 ## Q21 Q22 Q23 ## Q01 -0.120 -0.079 -0.049 ## Q02 0.049 -0.102 -0.147 ## Q03 0.071 -0.071 -0.008 ## Q04 -0.070 -0.049 -0.076 ## Q05 -0.078 -0.072 -0.070 ## Q06 0.029 0.043 0.013 ## Q07 0.053 0.010 -0.033 ## Q08 0.014 0.020 0.086 ## Q09 0.055 -0.161 -0.152 ## Q10 0.005 0.066 0.048 ## Q11 0.005 0.047 0.116 ## Q12 -0.062 -0.031 -0.057 ## Q13 -0.010 0.007 0.026 ## Q14 -0.032 -0.011 -0.027 ## Q15 -0.036 0.062 0.079 ## Q16 -0.074 -0.004 -0.032 ## Q17 0.016 0.019 0.049 ## Q18 -0.009 0.023 -0.049 ## Q19 0.049 -0.060 -0.073 ## Q20 0.010 -0.032 -0.056 ## Q21 0.450 -0.033 -0.100 ## Q22 -0.033 0.536 -0.177 ## Q23 -0.100 -0.177 0.588 Note that the diagonal elements in the residual matrix correspond to the unique variance in each variable that cannot be explained by the factors (i.e., “u2” in the output above). For example, the proportion of unique variance for question 1 is 0.57, which is reflected in the first cell in the residual matrix. The off-diagonal elements represent the difference between the actual correlations and the correlation based on the reproduced correlation matrix for all variable pairs. To see this, the reproduced correlation matrix could be generated by using the factor.model() function: reproduced_matrix &lt;- factor.model(pc2$loadings) round(reproduced_matrix,3) ## Q01 Q02 Q03 Q04 Q05 Q06 Q07 Q08 Q09 Q10 ## Q01 0.435 -0.112 -0.372 0.447 0.376 0.218 0.366 0.412 -0.042 0.172 ## Q02 -0.112 0.414 0.380 -0.134 -0.122 -0.033 -0.148 0.002 0.430 -0.061 ## Q03 -0.372 0.380 0.530 -0.399 -0.345 -0.200 -0.373 -0.270 0.352 -0.181 ## Q04 0.447 -0.134 -0.399 0.469 0.399 0.278 0.419 0.390 -0.073 0.212 ## Q05 0.376 -0.122 -0.345 0.399 0.343 0.273 0.380 0.312 -0.080 0.205 ## Q06 0.218 -0.033 -0.200 0.278 0.273 0.654 0.528 0.183 -0.108 0.461 ## Q07 0.366 -0.148 -0.373 0.419 0.380 0.528 0.545 0.267 -0.161 0.382 ## Q08 0.412 0.002 -0.270 0.390 0.312 0.183 0.267 0.739 0.055 0.180 ## Q09 -0.042 0.430 0.352 -0.073 -0.080 -0.108 -0.161 0.055 0.484 -0.116 ## Q10 0.172 -0.061 -0.181 0.212 0.205 0.461 0.382 0.180 -0.116 0.335 ## Q11 0.423 -0.097 -0.357 0.419 0.348 0.290 0.363 0.691 -0.071 0.259 ## Q12 0.402 -0.219 -0.440 0.448 0.397 0.388 0.495 0.228 -0.195 0.283 ## Q13 0.347 -0.122 -0.342 0.395 0.360 0.545 0.533 0.313 -0.147 0.398 ## Q14 0.362 -0.155 -0.373 0.411 0.370 0.477 0.514 0.249 -0.159 0.345 ## Q15 0.311 -0.158 -0.337 0.343 0.306 0.406 0.425 0.339 -0.174 0.314 ## Q16 0.440 -0.217 -0.458 0.466 0.400 0.300 0.439 0.390 -0.175 0.239 ## Q17 0.439 -0.048 -0.331 0.434 0.359 0.290 0.365 0.695 -0.009 0.252 ## Q18 0.368 -0.149 -0.376 0.424 0.388 0.562 0.570 0.250 -0.168 0.403 ## Q19 -0.204 0.357 0.403 -0.231 -0.207 -0.147 -0.254 -0.104 0.363 -0.137 ## Q20 0.342 -0.301 -0.440 0.353 0.292 -0.021 0.219 0.164 -0.218 0.006 ## Q21 0.449 -0.254 -0.488 0.480 0.412 0.244 0.430 0.282 -0.191 0.188 ## Q22 -0.025 0.333 0.275 -0.050 -0.060 -0.209 -0.179 -0.099 0.417 -0.197 ## Q23 0.045 0.246 0.158 0.042 0.028 -0.082 -0.037 -0.136 0.323 -0.110 ## Q11 Q12 Q13 Q14 Q15 Q16 Q17 Q18 Q19 Q20 ## Q01 0.423 0.402 0.347 0.362 0.311 0.440 0.439 0.368 -0.204 0.342 ## Q02 -0.097 -0.219 -0.122 -0.155 -0.158 -0.217 -0.048 -0.149 0.357 -0.301 ## Q03 -0.357 -0.440 -0.342 -0.373 -0.337 -0.458 -0.331 -0.376 0.403 -0.440 ## Q04 0.419 0.448 0.395 0.411 0.343 0.466 0.434 0.424 -0.231 0.353 ## Q05 0.348 0.397 0.360 0.370 0.306 0.400 0.359 0.388 -0.207 0.292 ## Q06 0.290 0.388 0.545 0.477 0.406 0.300 0.290 0.562 -0.147 -0.021 ## Q07 0.363 0.495 0.533 0.514 0.425 0.439 0.365 0.570 -0.254 0.219 ## Q08 0.691 0.228 0.313 0.249 0.339 0.390 0.695 0.250 -0.104 0.164 ## Q09 -0.071 -0.195 -0.147 -0.159 -0.174 -0.175 -0.009 -0.168 0.363 -0.218 ## Q10 0.259 0.283 0.398 0.345 0.314 0.239 0.252 0.403 -0.137 0.006 ## Q11 0.690 0.315 0.403 0.338 0.410 0.444 0.681 0.353 -0.198 0.200 ## Q12 0.315 0.513 0.459 0.481 0.374 0.466 0.319 0.513 -0.302 0.354 ## Q13 0.403 0.459 0.536 0.497 0.433 0.419 0.402 0.556 -0.231 0.163 ## Q14 0.338 0.481 0.497 0.488 0.397 0.429 0.342 0.537 -0.254 0.241 ## Q15 0.410 0.374 0.433 0.397 0.378 0.378 0.399 0.437 -0.236 0.175 ## Q16 0.444 0.466 0.419 0.429 0.378 0.487 0.443 0.446 -0.299 0.373 ## Q17 0.681 0.319 0.402 0.342 0.399 0.443 0.683 0.357 -0.162 0.196 ## Q18 0.353 0.513 0.556 0.537 0.437 0.446 0.357 0.597 -0.259 0.215 ## Q19 -0.198 -0.302 -0.231 -0.254 -0.236 -0.299 -0.162 -0.259 0.343 -0.308 ## Q20 0.200 0.354 0.163 0.241 0.175 0.373 0.196 0.215 -0.308 0.484 ## Q21 0.342 0.503 0.384 0.431 0.336 0.494 0.347 0.439 -0.324 0.457 ## Q22 -0.209 -0.136 -0.203 -0.159 -0.230 -0.152 -0.145 -0.183 0.294 -0.068 ## Q23 -0.202 0.011 -0.079 -0.022 -0.141 -0.049 -0.140 -0.032 0.196 0.021 ## Q21 Q22 Q23 ## Q01 0.449 -0.025 0.045 ## Q02 -0.254 0.333 0.246 ## Q03 -0.488 0.275 0.158 ## Q04 0.480 -0.050 0.042 ## Q05 0.412 -0.060 0.028 ## Q06 0.244 -0.209 -0.082 ## Q07 0.430 -0.179 -0.037 ## Q08 0.282 -0.099 -0.136 ## Q09 -0.191 0.417 0.323 ## Q10 0.188 -0.197 -0.110 ## Q11 0.342 -0.209 -0.202 ## Q12 0.503 -0.136 0.011 ## Q13 0.384 -0.203 -0.079 ## Q14 0.431 -0.159 -0.022 ## Q15 0.336 -0.230 -0.141 ## Q16 0.494 -0.152 -0.049 ## Q17 0.347 -0.145 -0.140 ## Q18 0.439 -0.183 -0.032 ## Q19 -0.324 0.294 0.196 ## Q20 0.457 -0.068 0.021 ## Q21 0.550 -0.096 0.032 ## Q22 -0.096 0.464 0.408 ## Q23 0.032 0.408 0.412 You can see that the reproduced correlation between the first and second variable is -0.112. From the correlation table from the beginning we know, however, that the observed correlation was -0.099. Hence, the difference between the observed and reproduced correlation is: (-0.099)-(-0.112) = 0.013, which corresponds to the residual of this variable pair in the residual matrix. Note that the diagonal elements in the reproduced matrix correspond to the communalities in the model summary above (i.e., “h2”). A measure of fit can now be computed based on the size of the residuals. In the worst case, the residuals would be as large as the correlations in the original matrix, which would be the case if we extracted no factors at all. A measure of fit could therefore be the sum of the squared residuals divided by the sum of the squared correlations. We square the residuals to account for positive and negative deviations. Values &gt;0.90 are considered indicators of good fit. From the output above, you can see that: “Fit based upon off diagonal values = 0.96”. Thus, we conclude that the model fit is sufficient. You could also manually compute this statistic by summing over the squared residuals and correlations, take their ratio and subtract it from one (note that we use the upper.tri() function to use the upper triangle of the matrix only; this has the effect of discarding the diagonal elements and the elements below the diagonal). ssr &lt;- (sum(residuals[upper.tri((residuals))]^2)) #sum of squared residuals ssc &lt;- (sum(raq_matrix[upper.tri((raq_matrix))]^2)) #sum of squared correlations 1-(ssr/ssc) #model fit ## [1] 0.9645252 In a next step, we check the size of the residuals. If fewer residuals than 50% have absolute values greater than 0.05 the model is a good fit. This can be tested using the following code. We first convert the residuals to a matrix and select the upper triangular again to avoid duplicates. Finally, we count all occurrences where the absolute value is larger than 0.05 and divide it by the number of total observations to get the proportion. residuals &lt;- as.matrix(residuals[upper.tri((residuals))]) large_res &lt;- abs(residuals) &gt; 0.05 sum(large_res) ## [1] 91 sum(large_res)/nrow(residuals) ## [1] 0.3596838 In our example, we can confirm that the proportion of residuals &gt; 0.05 is less than 50%. Another way to evaluate the residuals is by looking at their mean value (rather, we square the residuals first to account for positive and negative values, compute the mean and then take the square root). sqrt(mean(residuals^2)) ## [1] 0.05549286 This means that our mean residual is 0.055 and this value should be as low as possible. Finally, we need to validate if the residuals are approximately normally distributed, which we do by using a histogram, a Q-Q plot and the Shapiro test. hist(residuals) Figure 1.19: Hinstogram of residuals qqnorm(residuals) qqline(residuals) Figure 1.20: Q-Q plot shapiro.test(residuals) ## ## Shapiro-Wilk normality test ## ## data: residuals ## W = 0.99436, p-value = 0.4691 All of the tests suggest that the distribution of the residuals is approximately normal. 8.2.3 Factor interpretation To aid interpretation, it is possible to maximize the loading of a variable on one factor while minimizing its loading on all other factors. This is known as factor rotation. There are two types of factor rotation: orthogonal (assumes that factors are uncorrelated) oblique (assumes that factors are intercorrelated) To carry out a orthogonal rotation, we change the rotate option in the principal() function from “none” to “varimax” (we could also exclude it altogether because varimax is the default if the option is not specified): pc3 &lt;- principal(raq_data, nfactors = 4, rotate = &quot;varimax&quot;) pc3 ## Principal Components Analysis ## Call: principal(r = raq_data, nfactors = 4, rotate = &quot;varimax&quot;) ## Standardized loadings (pattern matrix) based upon correlation matrix ## RC3 RC1 RC4 RC2 h2 u2 com ## Q01 0.24 0.50 0.36 0.06 0.43 0.57 2.4 ## Q02 -0.01 -0.34 0.07 0.54 0.41 0.59 1.7 ## Q03 -0.20 -0.57 -0.18 0.37 0.53 0.47 2.3 ## Q04 0.32 0.52 0.31 0.04 0.47 0.53 2.4 ## Q05 0.32 0.43 0.24 0.01 0.34 0.66 2.5 ## Q06 0.80 -0.01 0.10 -0.07 0.65 0.35 1.0 ## Q07 0.64 0.33 0.16 -0.08 0.55 0.45 1.7 ## Q08 0.13 0.17 0.83 0.01 0.74 0.26 1.1 ## Q09 -0.09 -0.20 0.12 0.65 0.48 0.52 1.3 ## Q10 0.55 0.00 0.13 -0.12 0.33 0.67 1.2 ## Q11 0.26 0.21 0.75 -0.14 0.69 0.31 1.5 ## Q12 0.47 0.52 0.09 -0.08 0.51 0.49 2.1 ## Q13 0.65 0.23 0.23 -0.10 0.54 0.46 1.6 ## Q14 0.58 0.36 0.14 -0.07 0.49 0.51 1.8 ## Q15 0.46 0.22 0.29 -0.19 0.38 0.62 2.6 ## Q16 0.33 0.51 0.31 -0.12 0.49 0.51 2.6 ## Q17 0.27 0.22 0.75 -0.04 0.68 0.32 1.5 ## Q18 0.68 0.33 0.13 -0.08 0.60 0.40 1.5 ## Q19 -0.15 -0.37 -0.03 0.43 0.34 0.66 2.2 ## Q20 -0.04 0.68 0.07 -0.14 0.48 0.52 1.1 ## Q21 0.29 0.66 0.16 -0.07 0.55 0.45 1.5 ## Q22 -0.19 0.03 -0.10 0.65 0.46 0.54 1.2 ## Q23 -0.02 0.17 -0.20 0.59 0.41 0.59 1.4 ## ## RC3 RC1 RC4 RC2 ## SS loadings 3.73 3.34 2.55 1.95 ## Proportion Var 0.16 0.15 0.11 0.08 ## Cumulative Var 0.16 0.31 0.42 0.50 ## Proportion Explained 0.32 0.29 0.22 0.17 ## Cumulative Proportion 0.32 0.61 0.83 1.00 ## ## Mean item complexity = 1.8 ## Test of the hypothesis that 4 components are sufficient. ## ## The root mean square of the residuals (RMSR) is 0.06 ## with the empirical chi square 4006.15 with prob &lt; 0 ## ## Fit based upon off diagonal values = 0.96 Interpreting the factor loading matrix is a little complex, so we can make it easier by using the print.psych() function, which we can use to exclude loading below a cutoff from the display and order the variables by their loading within each factor. In the following, we will only display loadings that exceed the value 0.3. print.psych(pc3, cut = 0.3, sort = TRUE) ## Principal Components Analysis ## Call: principal(r = raq_data, nfactors = 4, rotate = &quot;varimax&quot;) ## Standardized loadings (pattern matrix) based upon correlation matrix ## item RC3 RC1 RC4 RC2 h2 u2 com ## Q06 6 0.80 0.65 0.35 1.0 ## Q18 18 0.68 0.33 0.60 0.40 1.5 ## Q13 13 0.65 0.54 0.46 1.6 ## Q07 7 0.64 0.33 0.55 0.45 1.7 ## Q14 14 0.58 0.36 0.49 0.51 1.8 ## Q10 10 0.55 0.33 0.67 1.2 ## Q15 15 0.46 0.38 0.62 2.6 ## Q20 20 0.68 0.48 0.52 1.1 ## Q21 21 0.66 0.55 0.45 1.5 ## Q03 3 -0.57 0.37 0.53 0.47 2.3 ## Q12 12 0.47 0.52 0.51 0.49 2.1 ## Q04 4 0.32 0.52 0.31 0.47 0.53 2.4 ## Q16 16 0.33 0.51 0.31 0.49 0.51 2.6 ## Q01 1 0.50 0.36 0.43 0.57 2.4 ## Q05 5 0.32 0.43 0.34 0.66 2.5 ## Q08 8 0.83 0.74 0.26 1.1 ## Q17 17 0.75 0.68 0.32 1.5 ## Q11 11 0.75 0.69 0.31 1.5 ## Q09 9 0.65 0.48 0.52 1.3 ## Q22 22 0.65 0.46 0.54 1.2 ## Q23 23 0.59 0.41 0.59 1.4 ## Q02 2 -0.34 0.54 0.41 0.59 1.7 ## Q19 19 -0.37 0.43 0.34 0.66 2.2 ## ## RC3 RC1 RC4 RC2 ## SS loadings 3.73 3.34 2.55 1.95 ## Proportion Var 0.16 0.15 0.11 0.08 ## Cumulative Var 0.16 0.31 0.42 0.50 ## Proportion Explained 0.32 0.29 0.22 0.17 ## Cumulative Proportion 0.32 0.61 0.83 1.00 ## ## Mean item complexity = 1.8 ## Test of the hypothesis that 4 components are sufficient. ## ## The root mean square of the residuals (RMSR) is 0.06 ## with the empirical chi square 4006.15 with prob &lt; 0 ## ## Fit based upon off diagonal values = 0.96 After obtaining the rotated matrix, variables with high loading are used for interpreting (=naming) the factor. Note that factor loading can be positive or negative (depends on scaling of the variable), thus take care when interpreting! Look for simple structure: each variable (hopefully) loads high on 1 factor and low on other factors. As an example, we could name our factors as follows: Factor 1: fear of computers Factor 2: fear of statistics Factor 3: fear of maths Factor 4: Peer evaluation The previous type of rotation (i.e., “varimax”) assumed that the the factors are independent. Oblique rotation is another type of rotation that can handle correlation between the factors. The command for an oblique rotation is very similar to that for an orthogonal rotation – we just change the rotate option from “varimax” to “oblimin”. pc4 &lt;- principal(raq_data, nfactors = 4, rotate = &quot;oblimin&quot;, scores = TRUE) print.psych(pc4, cut = 0.3, sort = TRUE) ## Principal Components Analysis ## Call: principal(r = raq_data, nfactors = 4, rotate = &quot;oblimin&quot;, scores = TRUE) ## Standardized loadings (pattern matrix) based upon correlation matrix ## item TC1 TC4 TC3 TC2 h2 u2 com ## Q06 6 0.87 0.65 0.35 1.1 ## Q18 18 0.70 0.60 0.40 1.1 ## Q07 7 0.64 0.55 0.45 1.2 ## Q13 13 0.64 0.54 0.46 1.1 ## Q10 10 0.57 0.33 0.67 1.2 ## Q14 14 0.57 0.49 0.51 1.3 ## Q12 12 0.45 0.43 0.51 0.49 2.0 ## Q15 15 0.40 0.38 0.62 1.9 ## Q08 8 0.90 0.74 0.26 1.0 ## Q11 11 0.78 0.69 0.31 1.0 ## Q17 17 0.78 0.68 0.32 1.0 ## Q20 20 0.71 0.48 0.52 1.1 ## Q21 21 0.60 0.55 0.45 1.3 ## Q03 3 -0.51 0.53 0.47 1.8 ## Q04 4 0.41 0.47 0.53 2.6 ## Q16 16 0.41 0.49 0.51 2.4 ## Q01 1 0.33 0.40 0.43 0.57 2.4 ## Q05 5 0.34 0.34 0.66 2.7 ## Q22 22 0.65 0.46 0.54 1.2 ## Q09 9 0.63 0.48 0.52 1.4 ## Q23 23 0.61 0.41 0.59 1.6 ## Q02 2 -0.36 0.51 0.41 0.59 1.9 ## Q19 19 -0.35 0.38 0.34 0.66 2.1 ## ## TC1 TC4 TC3 TC2 ## SS loadings 3.90 2.88 2.94 1.85 ## Proportion Var 0.17 0.13 0.13 0.08 ## Cumulative Var 0.17 0.29 0.42 0.50 ## Proportion Explained 0.34 0.25 0.25 0.16 ## Cumulative Proportion 0.34 0.59 0.84 1.00 ## ## With component correlations of ## TC1 TC4 TC3 TC2 ## TC1 1.00 0.44 0.36 -0.18 ## TC4 0.44 1.00 0.31 -0.10 ## TC3 0.36 0.31 1.00 -0.17 ## TC2 -0.18 -0.10 -0.17 1.00 ## ## Mean item complexity = 1.6 ## Test of the hypothesis that 4 components are sufficient. ## ## The root mean square of the residuals (RMSR) is 0.06 ## with the empirical chi square 4006.15 with prob &lt; 0 ## ## Fit based upon off diagonal values = 0.96 The component correlations indicate that the factors might indeed be correlated, so oblique rotation might actually be more appropriate in this case. 8.2.4 Creating new variables Once we have decided on the final model, we can calculate the new variables as the weighted sum of the variables that form a factor. This means, we estimate a person’s score on a factor based on their scores on the items that constitute the measurement scales. These scores are also referred to as the factor scores. Because we have used the scores = TRUE argument in the previous command, the factor scores have already been created for us. By default, R uses the regression method to compute the factor scores, which controls for differences in the units of measurement. You can access the residuals as follows: head(pc4$scores) ## TC1 TC4 TC3 TC2 ## [1,] 0.37296709 1.8808424 0.95979596 0.3910711 ## [2,] 0.63334164 0.2374679 0.29090777 -0.3504080 ## [3,] 0.39712768 -0.1056263 -0.09333769 0.9249353 ## [4,] -0.78741595 0.2956628 -0.77703307 0.2605666 ## [5,] 0.04425942 0.6815179 0.59786611 -0.6912687 ## [6,] -1.70018648 0.2091685 0.02784164 0.6653081 We can also use the cbind() function to add the computed factor scores to the existing data set: raq_data &lt;- cbind(raq_data, pc4$scores) This way, it is easier to use the new variables in subsequent analysis (e.g., t-tests, regression, ANOVA, cluster analysis). 8.3 Reliability analysis When you are using multi-item scales to measure a latent construct (e.g., the output from the PCA above), it is useful to check the reliability of your scale. Reliability means that our items should consistently reflect the construct that they are intended to measure. In other words, individual items should produce results consistent with the overall scale. This means that for a scale to be reliable, the score of a person on one half of the items should be similar to the score derived based on the other half of the items (split-half reliability). The problem is that there are several ways in which data can be split. A measure that reflects this underlying intuition is Cronbach’s alpha, which is approximately equal to the average of all possible split-half reliabilities. It is computed as follows: \\[\\begin{equation} \\alpha=\\frac{N^2\\overline{Cov}}{\\sum{s^2_{item}}+\\sum{Cov_{item}}} \\tag{8.8} \\end{equation}\\] The share of the items common variance (inter-correlation) in the total variance is supposed to be as high as possible across all items. The thresholds are as follows: &gt;0.7 reasonable for practical application/exploratory research &gt;0.8 necessary for fundamental research &gt;0.9 desirable for applied research To see if the subscales that were derived from the previous PCA exhibit a sufficient degree of reliability, we first create subsets of our data set that contain the respective items for each of the factors (we use the results from the oblimin rotation here): computer_fear &lt;- raq_data[,c(6,7,10,13,14,15,18)] statistics_fear &lt;- raq_data[,c(1,3,4,5,12,16,20,21)] math_fear &lt;- raq_data[,c(8,11,17)] peer_evaluation &lt;- raq_data[,c(2,9,19,22,23)] Now we can use the alpha() function from the psych package to test the reliability. Note that the keys argument may be used to indicate reverse coded items. In the example below, the second item of the “statistics_fear” factor is reverse coded as indicated by the -1, meaning that it is phrased in a “positive” way, while the remaining items belonging to this factor are phrased in a “negative” way. This is often done to check if respondents are giving consistent answers. psych::alpha(computer_fear) ## ## Reliability analysis ## Call: psych::alpha(x = computer_fear) ## ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.82 0.82 0.81 0.4 4.6 0.0052 3.4 0.71 0.39 ## ## 95% confidence boundaries ## lower alpha upper ## Feldt 0.81 0.82 0.83 ## Duhachek 0.81 0.82 0.83 ## ## Reliability if an item is dropped: ## raw_alpha std.alpha G6(smc) average_r S/N alpha se var.r med.r ## Q06 0.79 0.79 0.77 0.38 3.7 0.0063 0.0081 0.38 ## Q07 0.79 0.79 0.77 0.38 3.7 0.0063 0.0079 0.36 ## Q10 0.82 0.82 0.80 0.44 4.7 0.0053 0.0043 0.44 ## Q13 0.79 0.79 0.77 0.39 3.8 0.0062 0.0081 0.38 ## Q14 0.80 0.80 0.77 0.39 3.9 0.0060 0.0085 0.36 ## Q15 0.81 0.81 0.79 0.41 4.2 0.0056 0.0095 0.44 ## Q18 0.79 0.78 0.76 0.38 3.6 0.0064 0.0058 0.38 ## ## Item statistics ## n raw.r std.r r.cor r.drop mean sd ## Q06 2571 0.75 0.74 0.68 0.62 3.8 1.12 ## Q07 2571 0.75 0.73 0.68 0.62 3.1 1.10 ## Q10 2571 0.54 0.57 0.44 0.40 3.7 0.88 ## Q13 2571 0.72 0.73 0.67 0.61 3.6 0.95 ## Q14 2571 0.70 0.70 0.64 0.58 3.1 1.00 ## Q15 2571 0.64 0.64 0.54 0.49 3.2 1.01 ## Q18 2571 0.76 0.76 0.72 0.65 3.4 1.05 ## ## Non missing response frequency for each item ## 1 2 3 4 5 miss ## Q06 0.06 0.10 0.13 0.44 0.27 0 ## Q07 0.09 0.24 0.26 0.34 0.07 0 ## Q10 0.02 0.10 0.18 0.57 0.14 0 ## Q13 0.03 0.12 0.25 0.48 0.12 0 ## Q14 0.07 0.18 0.38 0.31 0.06 0 ## Q15 0.06 0.18 0.30 0.39 0.07 0 ## Q18 0.06 0.12 0.31 0.37 0.14 0 psych::alpha(statistics_fear, keys=c(1,-1,1,1,1,1,1,1)) ## ## Reliability analysis ## Call: psych::alpha(x = statistics_fear, keys = c(1, -1, 1, 1, 1, 1, ## 1, 1)) ## ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.82 0.82 0.81 0.37 4.7 0.0053 3 0.64 0.4 ## ## 95% confidence boundaries ## lower alpha upper ## Feldt 0.81 0.82 0.83 ## Duhachek 0.81 0.82 0.83 ## ## Reliability if an item is dropped: ## raw_alpha std.alpha G6(smc) average_r S/N alpha se var.r med.r ## Q01 0.80 0.80 0.79 0.37 4.1 0.0060 0.0052 0.40 ## Q03- 0.80 0.80 0.79 0.37 4.1 0.0061 0.0070 0.40 ## Q04 0.80 0.80 0.78 0.36 4.0 0.0062 0.0061 0.35 ## Q05 0.81 0.81 0.80 0.38 4.2 0.0058 0.0058 0.41 ## Q12 0.80 0.80 0.79 0.36 4.0 0.0061 0.0067 0.39 ## Q16 0.79 0.80 0.78 0.36 3.9 0.0062 0.0057 0.35 ## Q20 0.82 0.82 0.80 0.40 4.6 0.0055 0.0022 0.41 ## Q21 0.79 0.80 0.78 0.36 3.9 0.0063 0.0063 0.38 ## ## Item statistics ## n raw.r std.r r.cor r.drop mean sd ## Q01 2571 0.65 0.67 0.60 0.54 3.6 0.83 ## Q03- 2571 0.69 0.67 0.60 0.55 2.6 1.08 ## Q04 2571 0.69 0.70 0.64 0.58 3.2 0.95 ## Q05 2571 0.63 0.63 0.55 0.49 3.3 0.96 ## Q12 2571 0.69 0.69 0.63 0.57 2.8 0.92 ## Q16 2571 0.71 0.71 0.67 0.60 3.1 0.92 ## Q20 2571 0.58 0.56 0.47 0.42 2.4 1.04 ## Q21 2571 0.72 0.71 0.67 0.61 2.8 0.98 ## ## Non missing response frequency for each item ## 1 2 3 4 5 miss ## Q01 0.02 0.07 0.29 0.52 0.11 0 ## Q03 0.03 0.17 0.34 0.26 0.19 0 ## Q04 0.05 0.17 0.36 0.37 0.05 0 ## Q05 0.04 0.18 0.29 0.43 0.06 0 ## Q12 0.09 0.23 0.46 0.20 0.02 0 ## Q16 0.06 0.16 0.42 0.33 0.04 0 ## Q20 0.22 0.37 0.25 0.15 0.02 0 ## Q21 0.09 0.29 0.34 0.26 0.02 0 psych::alpha(math_fear) ## ## Reliability analysis ## Call: psych::alpha(x = math_fear) ## ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.82 0.82 0.75 0.6 4.5 0.0062 3.7 0.75 0.59 ## ## 95% confidence boundaries ## lower alpha upper ## Feldt 0.81 0.82 0.83 ## Duhachek 0.81 0.82 0.83 ## ## Reliability if an item is dropped: ## raw_alpha std.alpha G6(smc) average_r S/N alpha se var.r med.r ## Q08 0.74 0.74 0.59 0.59 2.8 0.010 NA 0.59 ## Q11 0.74 0.74 0.59 0.59 2.9 0.010 NA 0.59 ## Q17 0.77 0.77 0.63 0.63 3.4 0.009 NA 0.63 ## ## Item statistics ## n raw.r std.r r.cor r.drop mean sd ## Q08 2571 0.86 0.86 0.76 0.68 3.8 0.87 ## Q11 2571 0.86 0.86 0.75 0.68 3.7 0.88 ## Q17 2571 0.85 0.85 0.72 0.65 3.5 0.88 ## ## Non missing response frequency for each item ## 1 2 3 4 5 miss ## Q08 0.03 0.06 0.19 0.58 0.15 0 ## Q11 0.02 0.06 0.22 0.53 0.16 0 ## Q17 0.03 0.10 0.27 0.52 0.08 0 psych::alpha(peer_evaluation) ## ## Reliability analysis ## Call: psych::alpha(x = peer_evaluation) ## ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.57 0.57 0.53 0.21 1.3 0.013 3.4 0.65 0.23 ## ## 95% confidence boundaries ## lower alpha upper ## Feldt 0.54 0.57 0.6 ## Duhachek 0.54 0.57 0.6 ## ## Reliability if an item is dropped: ## raw_alpha std.alpha G6(smc) average_r S/N alpha se var.r med.r ## Q02 0.52 0.52 0.45 0.21 1.07 0.015 0.0028 0.23 ## Q09 0.48 0.48 0.41 0.19 0.92 0.017 0.0036 0.22 ## Q19 0.52 0.53 0.46 0.22 1.11 0.015 0.0055 0.23 ## Q22 0.49 0.49 0.43 0.19 0.96 0.016 0.0065 0.19 ## Q23 0.56 0.57 0.50 0.25 1.32 0.014 0.0014 0.24 ## ## Item statistics ## n raw.r std.r r.cor r.drop mean sd ## Q02 2571 0.56 0.61 0.45 0.34 4.4 0.85 ## Q09 2571 0.70 0.66 0.53 0.39 3.2 1.26 ## Q19 2571 0.61 0.60 0.42 0.32 3.7 1.10 ## Q22 2571 0.64 0.64 0.50 0.38 3.1 1.04 ## Q23 2571 0.53 0.53 0.31 0.24 2.6 1.04 ## ## Non missing response frequency for each item ## 1 2 3 4 5 miss ## Q02 0.01 0.04 0.08 0.31 0.56 0 ## Q09 0.08 0.28 0.23 0.20 0.20 0 ## Q19 0.02 0.15 0.22 0.33 0.29 0 ## Q22 0.05 0.26 0.34 0.26 0.10 0 ## Q23 0.12 0.42 0.27 0.12 0.06 0 The above output would lead us to conclude that the fear of computers, fear of statistics and fear of maths subscales of the RAQ all had sufficiently high levels of reliability (i.e., Cronbach’s alpha &gt; 0.70). However, the fear of negative peer evaluation subscale had relatively low reliability (Cronbach’s alpha = 0.57). As the output under “Reliability if an item is dropped” suggests, the alpha score would also not increase if an item was dropped from the scale. As another example, consider the multi-item scale from the statistical ability questionnaire. test_data &lt;- read.table(&quot;https://raw.githubusercontent.com/IMSMWU/Teaching/master/MRDA2017/survey2017.dat&quot;, sep = &quot;\\t&quot;, header = TRUE) head(test_data) The four variables “multi_1” - “multi_4” represent the multi-item scales. We can test the reliability of the scale using the alpha() function (item 4 was reverse coded, hence the “-1” in the keys vector): psych::alpha(test_data[,c(&quot;multi_1&quot;,&quot;multi_2&quot;,&quot;multi_3&quot;,&quot;multi_4&quot;)], keys=c(1,1,1,-1)) ## ## Reliability analysis ## Call: psych::alpha(x = test_data[, c(&quot;multi_1&quot;, &quot;multi_2&quot;, &quot;multi_3&quot;, ## &quot;multi_4&quot;)], keys = c(1, 1, 1, -1)) ## ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.9 0.9 0.88 0.68 8.7 0.024 2.7 0.92 0.65 ## ## 95% confidence boundaries ## lower alpha upper ## Feldt 0.84 0.9 0.93 ## Duhachek 0.85 0.9 0.94 ## ## Reliability if an item is dropped: ## raw_alpha std.alpha G6(smc) average_r S/N alpha se var.r med.r ## multi_1 0.85 0.86 0.81 0.66 5.9 0.035 0.0101 0.61 ## multi_2 0.83 0.83 0.77 0.63 5.0 0.039 0.0028 0.61 ## multi_3 0.86 0.86 0.83 0.68 6.3 0.034 0.0195 0.61 ## multi_4- 0.91 0.91 0.88 0.77 10.0 0.022 0.0058 0.78 ## ## Item statistics ## n raw.r std.r r.cor r.drop mean sd ## multi_1 55 0.89 0.89 0.86 0.80 2.7 1.0 ## multi_2 55 0.92 0.92 0.92 0.85 2.6 1.0 ## multi_3 55 0.88 0.88 0.83 0.78 2.5 1.1 ## multi_4- 55 0.81 0.80 0.68 0.65 2.8 1.1 ## ## Non missing response frequency for each item ## 1 2 3 4 5 miss ## multi_1 0.11 0.36 0.25 0.25 0.02 0 ## multi_2 0.11 0.42 0.25 0.18 0.04 0 ## multi_3 0.18 0.38 0.22 0.20 0.02 0 ## multi_4 0.04 0.31 0.16 0.40 0.09 0 Since the scale exhibits a sufficient degree of reliability, we can compute the new variable as the average score on these items. However, before doing this, we need to recode the reverse coded variable in the appropriate way. It is easy to recode the reverse coded item to be in line with the remaining items on the dimension using the recode() function from the car package. library(car) test_data$multi_4_rec = recode(test_data$multi_4, &quot;1=5; 2=4; 3=3; 4=2; 5=1&quot;) Now we can compute the new variable as the average score of the four items: library(car) test_data$new_variable = (test_data$multi_1 + test_data$multi_2 + test_data$multi_3 + test_data$multi_4_rec) / 4 head(test_data) Learning check (LC8.1) The goals of factor analysis are… …to identify underlying dimensions that explain correlations among variables. …to identify multiplicative effects in a linear regression. …to identify a smaller set of uncorrelated variables. …to identify interaction terms in a linear regression. None of the above (LC8.2) What are typical hypotheses in exploratory factor analysis (EFA) concerning how many factors will emerge? A reduction greater than 50% of the input variables Between a third and a fourth of the input variables A reduction smaller than 50% of the input variables None of the above (LC8.3) What assumptions have to be fulfilled for using factor analysis? Variables must be in interval or ratio scale Existence of some underlying factor structure The correlation matrix must have sufficient number of correlations Variables must be measured using ordinal scales None of the above (LC8.4) What is the correct interpretation of the b-values in the following mathematical representation concerning exploratory factor analysis (EFA)? \\(Factor_i=b_1*Variable_1 + b_2*Variable_2+…+b_nVariable_n\\) Regression coefficients Correlations between the variables Weights of a variable on a factor Factor loadings None of the above (LC8.5) What is the null hypothesis of the Bartlett’s test of sphericity? All variables are correlated in the population The correlation matrix is singular All variables are uncorrelated in the population The correlation matrix is an identity matrix None of the above (LC8.6) Before conducting PCA, how can you test the sampling adequacy of your data (i.e., how suited your data is for Factor Analysis)? Kaiser-Meyer-Olkin (KMO) test with scores &lt;0.5 Kaiser-Meyer-Olkin (KMO) test with scores &gt;0.5 By inspecting the scree plot Cronbach’s alpha test with scores &gt;0.7 None of the above (LC8.7) What is communality? Proportion of common variance in a variable Variance that is unique to a particular variable Proportion of unique variance in a variable Covariance between two factors None of the above (LC8.8) Orthogonal factor rotation assumes: Inter-correlated factors Uncorrelated factors Outer-correlated factors None of the above (LC8.9) Imagine you want to conduct a PCA on 10 variables without factor rotation and in a first step, you wish to find out how many components you should extract. How would the corresponding R Code look? principal(data, nfactors = 10, rotate = \"none\") principal(data, nfactors = “varimax”, rotate = 10) principal(data, nfactors = 10, rotate = \"oblimin\") principal(data, nfactors = 10, rotate = \"varimax\") None of the above (LC8.10) Which of the following statements concerning reliability and validity are TRUE? Validity (i.e. “consistency”) requires the absence of random errors Reliability (i.e. “truthfulness”) requires the absence of measurement errors Validity describes the extent to which a scale produces consistent results in repeated measurements None of the above References Field, A., Miles J., &amp; Field, Z. (2012): Discovering Statistics Using R. Sage Publications, chapter 17 Malhotra, N. K.(2010). Marketing Research: An Applied Orientation (6th. ed.). Prentice Hall. chapter 19 "],["cluster-analysis.html", "9 Cluster analysis 9.1 K-Means 9.2 Hierarchical Clustering", " 9 Cluster analysis You can download the corresponding R-Code here In the previous chapter on factor analysis we tried to reduce the number of variables or columns by identifying underlying dimensions. In order to do so we exploited the fact that some items are highly correlated and therefore might represent the same underlying concept (e.g., health benefits or social benefits). Similarly, in cluster analysis we again do not distinguish between dependent and independent variables. However, in the case of cluster analysis we do not try to reduce the number of variables but the number of observations by grouping similar ones into “clusters”. What exactly defines “similarity” depends on the use case. In the case of music, audio features of songs might be used to identify clusters of similar songs (similar to the genre classification) which can be used for recommendation systems. Other use cases are customer segmentation and anomaly (e.g., fraud) detection. Let’s try to create a recommendation system using track features. In our data we have the ISRC, name of the track, name of the artist and audio features of the track. We are going to use the audio features to cluster tracks together such that given one track we can easily identify similar tracks by looking at which cluster it belongs to. load(url(&quot;https://github.com/WU-RDS/MRDA2021/raw/main/trackfeatures.RData&quot;)) # remove duplicates tracks &lt;- na.omit(tracks[!duplicated(tracks$isrc), ]) To get an idea of how clustering might work let’s first take a look at just with two variables, energy and acousticness, and two artists, Robin Schulz and Adele. We immediately see that Adele’s songs are more to the top left (high acousticness, low energy) whereas Robin Schulz’s songs are mostly on the bottom right (low acousticness, high energy). library(ggplot2) library(stringr) robin_schulz &lt;- tracks[str_detect(tracks$artistName, &quot;Robin Schulz&quot;), ] robin_schulz$artist &lt;- &quot;Robin Schulz&quot; adele &lt;- tracks[str_detect(tracks$artistName, &quot;Adele&quot;), ] adele$artist &lt;- &quot;Adele&quot; example_tracks &lt;- rbind(robin_schulz, adele) ggplot(example_tracks, aes(x = energy, y = acousticness, color = artist)) + geom_point() + theme_bw() 9.1 K-Means One of the most popular algorithms for clustering is the K-means algorithm. The “K” stands for the number of clusters that are specified as a hyperparameter (more on how to set that parameter later). The algorithm then tries to separate the observations into K clusters such that the within-cluster sum of squared differences form the cluster mean of the features (e.g., our audio features) is minimized. Therefore, it is important to scale all variables before performing clustering such that they all contribute equally to the distance between the observations. Minimizing the within-cluster sum of squares is equivalent to minimizing the sum of the squared deviations of observations pairwise in the same cluster and maximizing the sum of squared deviations of observations in different clusters. Intuitively the algorithm groups observations by iteratively calculating the mean or center of each cluster, assigning each observation to the cluster with the closest mean and re-calculating the mean… The algorithm has “converged” (i.e., is done) when the assignments no longer change. Let’s try it out with our two artists. In order to perform clustering we first have to remove all missing values from the used variables as for those we cannot calculate distances. Because we know that there are two artists in the sample we will start with two clusters. tracks_scale &lt;- data.frame(artist = example_tracks$artist, energy = scale(example_tracks$energy), acousticness = scale(example_tracks$acousticness)) tracks_scale &lt;- na.omit(tracks_scale) kmeans_clusters &lt;- kmeans(tracks_scale[-1], 2) kmeans_clusters$centers ## energy acousticness ## 1 -1.43946637 1.32346535 ## 2 0.50068396 -0.46033577 The kmeans function returns, among other statistics, the centers of each cluster and a cluster identifier for each observation which we can add to our original data. In our case one cluster’s center is rather low in energy and high acousticness and the second one has higher energy and lower acousticness. In our plot we can add a color for each cluster and a different marker shape for each artist. We observe that cluster 1 corresponds mostly to Robin Schulz songs and cluster 2 mostly to Adele. Alternatively we can also look at the counts in each cluster per artist using the table function. tracks_scale$cluster &lt;- as.factor(kmeans_clusters$cluster) ggplot(tracks_scale, aes(x = energy, y = acousticness, color = cluster, shape = artist)) + geom_point(size = 3) + theme_bw() table(tracks_scale$artist, tracks_scale$cluster) ## ## 1 2 ## Adele 14 9 ## Robin Schulz 2 37 In the previous example it was easy to set the number of clusters. However, if we use all artists in our data the best value for “K” is not immediately obvious. Surely some artists should be in the same cluster. We can user the NbClust package to determine the best number of clusters according to various indices (see ?NbClust). First we scale all our variables and then we use the scaled versions to determine “K”. To make computations faster we will use songs by 5 famous artists. Then we count how many indices would choose a certain number of clusters. The two best candidates are 3 clusters, chosen by 13 indices and 2 clusters, chosen by 5 indices. library(NbClust) famous_artists &lt;- c(&quot;Ed Sheeran&quot;, &quot;Eminem&quot;, &quot;Rihanna&quot;, &quot;Taylor Swift&quot;, &quot;Queen&quot;) famous_tracks &lt;- tracks[tracks$artistName %in% famous_artists, ] famous_tracks_scale &lt;- scale(famous_tracks[4:ncol(famous_tracks)]) set.seed(123) opt_K &lt;- NbClust(famous_tracks_scale, method = &quot;kmeans&quot;, max.nc = 10) table(opt_K$Best.nc[&quot;Number_clusters&quot;, ]) ## ## 0 2 3 4 8 10 ## 2 5 13 1 1 4 We can now proceed as before with running the k-means algorithm. Looking at the centers for each of the clusters could give us an indication for the types of songs we can expect in each of them (recall that they are assigned based on their distance to the center). Cluster 2, for example will include acoustic soungs and cluster 3 includes more energetic, faster songs. kmeans_tracks &lt;- kmeans(famous_tracks_scale, 3) kmeans_tracks$centers ## danceability energy loudness mode speechiness acousticness ## 1 0.27583013 0.45262138 0.48533019 -0.14613775 -0.25764006 -0.56189652 ## 2 -0.53855482 -0.95664951 -0.87423829 0.26329095 -0.41476830 0.97728432 ## 3 0.36783417 0.75439003 0.49548619 -0.14929736 1.55461550 -0.50152699 ## instrumentalness liveness valence tempo duration_ms ## 1 0.062663241 -0.25242508 0.40120798 0.037899761 -0.090474590 ## 2 -0.068167189 -0.27281478 -0.61580855 -0.177610227 0.097542547 ## 3 -0.028493444 1.24692568 0.18851883 0.264828616 0.042956919 To get a quick overview of the centers we can user a radar plot. This allows us to quickly observe similarities and distinguishing features of clusters. library(ggiraph) library(ggiraphExtra) centers &lt;- data.frame(kmeans_tracks$centers) centers$cluster &lt;- 1:3 ggRadar(centers, aes(color = cluster), rescale = FALSE) + ggtitle(&quot;Centers&quot;) + theme_bw() We can use a barplot to visualize the number of songs an artist has in each cluster. While Eminem’s songs are mostly in cluster 3, Taylor Swift’s and Ed Sheeran’s are mostly in cluster 1 and 2. famous_tracks$cluster &lt;- as.factor(kmeans_tracks$cluster) ggplot(famous_tracks, aes(y = cluster, fill = artistName)) + geom_bar() + theme_bw() table(famous_tracks$artistName, famous_tracks$cluster) ## ## 1 2 3 ## Ed Sheeran 23 34 2 ## Eminem 10 3 32 ## Queen 9 9 6 ## Rihanna 13 1 1 ## Taylor Swift 64 44 3 We could use the clustering to make recommendations on both the artist and song level (assuming that people like songs with similar audio features). If you like “Lose Yourself” by Eminem (cluster 3), we would recommend “I Forgot That You Existed” (cluster 3) bu not “The Archer” (cluster 2) by Taylor Swift. recommendation &lt;- famous_tracks[str_detect(famous_tracks$trackName, &quot;Lose Yourself|I Forgot That You Existed|The Archer&quot;), ] recommendation[c(&quot;trackName&quot;, &quot;artistName&quot;, &quot;cluster&quot;)] ggplot(recommendation, aes(instrumentalness, speechiness, color = cluster)) + geom_point() + geom_label(aes(label = trackName), hjust = &quot;inward&quot;) + theme_bw() We can use the fviz_cluster function from the factoextra library to get a partial picture. If there are more than 2 variables used for clustering, the package performs a PCA and uses the first two principal components for the visualization. library(factoextra) fviz_cluster(kmeans_tracks, data = famous_tracks_scale, palette = hcl.colors(3, palette = &quot;Dynamic&quot;), geom = &quot;point&quot;, ellipse.type = &quot;convex&quot;, ggtheme = theme_bw()) 9.2 Hierarchical Clustering Another popular clustering algorithm is hierarchical clustering. It is based on the idea that similar clusters can be merged. It starts off assigning each observation, in our case song, its own cluster. In a second step the two most similar or closest songs are combined to a single cluster. Then, in each iteration, the two most similar clusters are merged until all songs are in a single cluster. Hierarchical clustering requires us to provide a distance matrix rather then the song features. Distances between observations can be calculated using the dist function. There are multiple distance measures that can be used to calculate the distances. One of the most popular ones, and also the default, is the euclidean distance, defined as the square-root of the sum of squared element wise differences between two vectors. So in our case to calculate the distance between two songs we would take the squared difference in valence, danceability, liveness and so on, sum them up and take the square root of the sum. To get a better overview let’s use songs by Pink Floyd and Rihanna in this example. pf_ri &lt;- tracks[tracks$artistName %in% c(&quot;Pink Floyd&quot;, &quot;Rihanna&quot;), ] pf_ri_scale &lt;- scale(pf_ri[, 4:ncol(pf_ri)]) rownames(pf_ri_scale) &lt;- pf_ri$trackName hclust_tracks &lt;- hclust(dist(pf_ri_scale)) plot(hclust_tracks) Again, we have to decide on the number of clusters. Based on a visual inspection of the hierarchy, choosing 4 clusters seems reasonable. We can get cluster assignments by “cutting the tree” such that we get the desired number of clusters. With hierarchical clustering we do not get the centers of each cluster as a return value as it is not calculated by the method. However we can reduce the clusters manually by calculating the mean of each variable for each cluster using the aggregate function. The . in the formula stands for “all other variables”. As we can see in the middle of the dendrogram there will be two small clusters with 1 and 2 songs in them respectively (“Needed me” in cluster 1 and “dogs”, “pigs” in cluster 4). hclusters &lt;- cutree(hclust_tracks, 4) pf_ri_hier &lt;- data.frame(pf_ri_scale) pf_ri_hier$cluster &lt;- as.factor(hclusters) hier_centers &lt;- aggregate(. ~ cluster, pf_ri_hier, mean) ggRadar(hier_centers, aes(color = cluster), rescale = T) + ggtitle(&quot;Centers&quot;) + theme_bw() "],["r-markdown.html", "10 R Markdown 10.1 Introduction to R Markdown 10.2 Assignment 1: Solution 10.3 Assignment 2: Solution 10.4 Assignment 3: Solution 10.5 Assignment 4: Solution", " 10 R Markdown 10.1 Introduction to R Markdown You can download the example markdown file here This page will guide you through creating and editing R Markdown documents. This is a useful tool for reporting your analysis (e.g. for homework assignments). Of course, there is also a cheat sheet for R-Markdown and this book contains a comprehensive discussion of the format. The following video contains a short introduction to the R Markdown format. Creating a new R Markdown document In addition to the video, the following text contains a short description of the most important formatting options. Let’s start to go through the steps of creating and .Rmd file and outputting the content to an HTML file. If an R-Markdown file was provided to you, open it with R-Studio and skip to step 4 after adding your answers. Open R-Studio Create a new R-Markdown document Save with appropriate name 3.1. Add your answers 3.2. Save again “Knit” to HTML Hand in appropriate file (ending in .html) on learn@WU Text and Equations R-Markdown documents are plain text files that include both text and R-code. Using RStudio they can be converted (‘knitted’) to HTML or PDF files that include both the text and the results of the R-code. In fact this website is written using R-Markdown and RStudio. In order for RStudio to be able to interpret the document you have to use certain characters or combinations of characters when formatting text and including R-code to be evaluated. By default the document starts with the options for the text part. You can change the title, date, author and a few more advanced options. First lines of an R-Markdown document The default is text mode, meaning that lines in an Rmd document will be interpreted as text, unless specified otherwise. Headings Usually you want to include some kind of heading to structure your text. A heading is created using # signs. A single # creates a first level heading, two ## a second level and so on. It is important to note here that the # symbol means something different within the code chunks as opposed to outside of them. If you continue to put a # in front of all your regular text, it will all be interpreted as a first level heading, making your text very large. Lists Bullet point lists are created using *, + or -. Sub-items are created by indenting the item using 4 spaces or 2 tabs. * First Item * Second Item + first sub-item - first sub-sub-item + second sub-item First Item Second Item first sub-item first sub-sub-item second sub-item Ordered lists can be created using numbers and letters. If you need sub-sub-items use A) instead of A. on the third level. 1. First item a. first sub-item A) first sub-sub-item b. second sub-item 2. Second item First item first sub-item first sub-sub-item second sub-item Second item Text formatting Text can be formatted in italics (*italics*) or bold (**bold**). In addition, you can ad block quotes with &gt; &gt; Lorem ipsum dolor amet chillwave lomo ramps, four loko green juice messenger bag raclette forage offal shoreditch chartreuse austin. Slow-carb poutine meggings swag blog, pop-up salvia taxidermy bushwick freegan ugh poke. Lorem ipsum dolor amet chillwave lomo ramps, four loko green juice messenger bag raclette forage offal shoreditch chartreuse austin. Slow-carb poutine meggings swag blog, pop-up salvia taxidermy bushwick freegan ugh poke. R-Code R-code is contained in so called “chunks”. These chunks always start with three backticks and r in curly braces ({r} ) and end with three backticks ( ). Optionally, parameters can be added after the r to influence how a chunk behaves. Additionally, you can also give each chunk a name. Note that these have to be unique, otherwise R will refuse to knit your document. Global and chunk options The first chunk always looks as follows ```{r setup, include = FALSE} knitr::opts_chunk$set(echo = TRUE) ``` It is added to the document automatically and sets options for all the following chunks. These options can be overwritten on a per-chunk basis. Keep knitr::opts_chunk$set(echo = TRUE) to print your code to the document you will hand in. Changing it to knitr::opts_chunk$set(echo = FALSE) will not print your code by default. This can be changed on a per-chunk basis. ```{r cars, echo = FALSE} summary(cars) plot(dist~speed, cars) ``` ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 ```{r cars2, echo = TRUE} summary(cars) plot(dist~speed, cars) ``` summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 plot(dist ~ speed, cars) A good overview of all available global/chunk options can be found here. LaTeX Math Writing well formatted mathematical formulas is done the same way as in LaTeX. Math mode is started and ended using $$. $$ f_1(\\omega) = \\frac{\\sigma^2}{2 \\pi},\\ \\omega \\in[-\\pi, \\pi] $$ \\[ f_1(\\omega) = \\frac{\\sigma^2}{2 \\pi},\\ \\omega \\in[-\\pi, \\pi] \\] (for those interested this is the spectral density of white noise) Including inline mathematical notation is done with a single $ symbol. ${2\\over3}$ of my code is inline. \\({2\\over3}\\) of my code is inline. Take a look at this wikibook on Mathematics in LaTeX and this list of Greek letters and mathematical symbols if you are not familiar with LaTeX. In order to write multi-line equations in the same math environment, use \\\\ after every line. In order to insert a space use a single \\. To render text inside a math environment use \\text{here is the text}. In order to align equations start with \\begin{align} and place an &amp; in each line at the point around which it should be aligned. Finally end with \\end{align} $$ \\begin{align} \\text{First equation: }\\ Y &amp;= X \\beta + \\epsilon_y,\\ \\forall X \\\\ \\text{Second equation: }\\ X &amp;= Z \\gamma + \\epsilon_x \\end{align} $$ \\[ \\begin{align} \\text{First equation: }\\ Y &amp;= X \\beta + \\epsilon_y,\\ \\forall X \\\\ \\text{Second equation: }\\ X &amp;= Z \\gamma + \\epsilon_x \\end{align} \\] Important symbols Symbol Code \\(a^{2} + b\\) a^{2} + b \\(a^{2+b}\\) a^{2+b} \\(a_{1}\\) a_{1} \\(a \\leq b\\) a \\leq b \\(a \\geq b\\) a \\geq b \\(a \\neq b\\) a \\neq b \\(a \\approx b\\) a \\approx b \\(a \\in (0,1)\\) a \\in (0,1) \\(a \\rightarrow \\infty\\) a \\rightarrow \\infty \\(\\frac{a}{b}\\) \\frac{a}{b} \\(\\frac{\\partial a}{\\partial b}\\) \\frac{\\partial a}{\\partial b} \\(\\sqrt{a}\\) \\sqrt{a} \\(\\sum_{i = 1}^{b} a_i\\) \\sum_{i = 1}^{b} a_i \\(\\int_{a}^b f(c) dc\\) \\int_{a}^b f(c) dc \\(\\prod_{i = 0}^b a_i\\) \\prod_{i = 0}^b a_i \\(c \\left( \\sum_{i=1}^b a_i \\right)\\) c \\left( \\sum_{i=1}^b a_i \\right) The {} after _ and ^ are not strictly necessary if there is only one character in the sub-/superscript. However, in order to place multiple characters in the sub-/superscript they are necessary. e.g. Symbol Code \\(a^b = a^{b}\\) a^b = a^{b} \\(a^b+c \\neq a^{b+c}\\) a^b+c \\neq a^{b+c} \\(\\sum_i a_i = \\sum_{i} a_{i}\\) \\sum_i a_i = \\sum_{i} a_{i} \\(\\sum_{i=1}^{b+c} a_i \\neq \\sum_i=1^b+c a_i\\) \\sum_{i=1}^{b+c} a_i \\neq \\sum_i=1^b+c a_i Greek letters Greek letters are preceded by a \\ followed by their name ($\\beta$ = \\(\\beta\\)). In order to capitalize them simply capitalize the first letter of the name ($\\Gamma$ = \\(\\Gamma\\)). 10.2 Assignment 1: Solution Load libraries and data library(tidyverse) music_data &lt;- read.csv2(&quot;https://short.wu.ac.at/ma22_musicdata&quot;) str(music_data) ## &#39;data.frame&#39;: 66796 obs. of 31 variables: ## $ isrc : chr &quot;BRRGE1603547&quot; &quot;USUM71808193&quot; &quot;ES5701800181&quot; &quot;ITRSE2000050&quot; ... ## $ artist_id : int 3679 5239 776407 433730 526471 1939 210184 212546 4938 119985 ... ## $ streams : num 11944813 8934097 38835 46766 2930573 ... ## $ weeks_in_charts : int 141 51 1 1 7 226 13 1 64 7 ... ## $ n_regions : int 1 21 1 1 4 8 1 1 5 1 ... ## $ danceability : num 50.9 35.3 68.3 70.4 84.2 35.2 73 55.6 71.9 34.6 ... ## $ energy : num 80.3 75.5 67.6 56.8 57.8 91.1 69.6 24.5 85 43.3 ... ## $ speechiness : num 4 73.3 14.7 26.8 13.8 7.47 35.5 3.05 3.17 6.5 ... ## $ instrumentalness : num 0.05 0 0 0.000253 0 0 0 0 0.02 0 ... ## $ liveness : num 46.3 39 7.26 8.91 22.8 9.95 32.1 9.21 11.4 10.1 ... ## $ valence : num 65.1 43.7 43.4 49.5 19 23.6 58.4 27.6 36.7 76.8 ... ## $ tempo : num 166 191.2 99 91 74.5 ... ## $ song_length : num 3.12 3.23 3.02 3.45 3.95 ... ## $ song_age : num 228.3 144.3 112.3 50.7 58.3 ... ## $ explicit : int 0 0 0 0 0 0 0 0 1 0 ... ## $ n_playlists : int 450 768 48 6 475 20591 6 105 547 688 ... ## $ sp_popularity : int 51 54 32 44 52 81 44 8 59 68 ... ## $ youtube_views : num 1.45e+08 1.32e+07 6.12e+06 0.00 0.00 ... ## $ tiktok_counts : int 9740 358700 0 13 515 67300 0 0 653 3807 ... ## $ ins_followers_artist : int 29613108 3693566 623778 81601 11962358 1169284 1948850 39381 9751080 343 ... ## $ monthly_listeners_artist : int 4133393 18367363 888273 143761 15551876 16224250 2683086 1318874 4828847 3088232 ... ## $ playlist_total_reach_artist: int 24286416 143384531 4846378 156521 90841884 80408253 7332603 24302331 8914977 8885252 ... ## $ sp_fans_artist : int 3308630 465412 23846 1294 380204 1651866 214001 10742 435457 1897685 ... ## $ shazam_counts : int 73100 588550 0 0 55482 5281161 0 0 39055 0 ... ## $ artistName : chr &quot;Luan Santana&quot; &quot;Alessia Cara&quot; &quot;Ana Guerra&quot; &quot;Claver Gold feat. Murubutu&quot; ... ## $ trackName : chr &quot;Eu, Você, O Mar e Ela&quot; &quot;Growing Pains&quot; &quot;El Remedio&quot; &quot;Ulisse&quot; ... ## $ release_date : chr &quot;2016-06-20&quot; &quot;2018-06-14&quot; &quot;2018-04-26&quot; &quot;2020-03-31&quot; ... ## $ genre : chr &quot;other&quot; &quot;Pop&quot; &quot;Pop&quot; &quot;HipHop/Rap&quot; ... ## $ label : chr &quot;Independent&quot; &quot;Universal Music&quot; &quot;Universal Music&quot; &quot;Independent&quot; ... ## $ top10 : int 1 0 0 0 0 1 0 0 0 0 ... ## $ expert_rating : chr &quot;excellent&quot; &quot;good&quot; &quot;good&quot; &quot;poor&quot; ... # head(music_data, 2) First, you should convert the variables to the correct types: library(magrittr) music_data %&lt;&gt;% mutate(release_date = as.Date(release_date), # convert to date explicit = factor(explicit, levels = 0:1, labels = c(&quot;not explicit&quot;, &quot;explicit&quot;)), # convert to factor w. new labels label = as.factor(label), # convert to factor with values as labels genre = as.factor(genre), top10 = as.logical(top10), expert_rating = factor(expert_rating, levels = c(&quot;poor&quot;, &quot;fair&quot;, &quot;good&quot;, &quot;excellent&quot;, &quot;masterpiece&quot;), ordered = TRUE)) head(music_data, 2) Task 1 Determine the most popular song by the artist “Billie Eilish”. Create a new data.frame that only contains songs by “Billie Eilish” (Bonus: Also include songs that feature both Billie Eilish and other artists, see e.g., “lovely (with Khalid)”) Save the data.frame sorted by success (number of streams) with the most popular songs occurring first. There might be multiple ways of tackling this task. For example, you could start from question 3 and first create the complete data frame with only Billie’s songs, ordered by popularity: billie_eilish &lt;- music_data |&gt; filter(artistName == &quot;Billie Eilish&quot;) |&gt; arrange(desc(streams)) #arrange by number of streams (in descending order) head(billie_eilish, 4) In that data frame, you could filter out and display the most popular song, using max() function: filter(billie_eilish, streams == max(streams)) |&gt; select(trackName) #print top-1 song OR, as long as this data frame is already saved with the most popular song on top, you can simply take the first element of the data frame: billie_eilish[1, &quot;trackName&quot;] ## [1] &quot;bad guy&quot; Bonus: For finding all songs featuring Billie Eilish, you could use str_detect() function from stringr package. It searches for all variables in artistName, containing the string “Billie Eilish”. The rest stays the same: billie_eilish_full &lt;- filter(music_data, str_detect(artistName, &quot;Billie Eilish&quot;)) |&gt; #filter all Billie&#39;s appearances arrange(desc(streams)) #arrange by number of streams (in descending order) #filter(billie_eilish_full, streams == max(streams)) |&gt; select(trackName) #print the top-1 song head(billie_eilish_full, 3) Task 2 Create a new data.frame containing the 100 most streamed songs. Here you could simply arrange the whole data set by streams and then take 100 first rows using slice_head(): top_100 &lt;- arrange(music_data, desc(streams)) |&gt; slice_head(n = 100) head(top_100) Task 3 Determine the most popular genres. Group the data by genre and calculate the total number of streams within each genre. Sort the result to show the most popular genre first. Create a bar plot in which the heights of the bars correspond to the total number of streams within a genre (Bonus: order the bars by their height) The correct order of the dplyr functions would be as follows: you first group the observations by genre, then summarize the streams using sum(), and finally arrange the sums of streams. If you create an object, don’t forget to print it to show the result: genres_popularity &lt;- music_data |&gt; group_by(genre) |&gt; summarize(streams = sum(streams)) |&gt; arrange(desc(streams)) genres_popularity Ideally, you should provide some textual conclusion, e.g., “as can be seen, Pop is the most popular genre when the total number of streams is considered”. To create a bar plot, you need the data frame with the sums of streams by labels. Then you should use ggplot() function as follows: genres_popularity &lt;- as.data.frame(genres_popularity) # head(genres_popularity) library(colorspace) ggplot(genres_popularity, aes(x = genre, y = streams)) + geom_col(aes(fill = streams)) + ylab(&quot;Total streams&quot;) + xlab(&quot;Genre&quot;) + theme_minimal() + scale_fill_continuous_sequential(palette = &quot;Purple-Orange&quot;) + theme(axis.text.x = element_text(angle = 45, vjust = 0.6), legend.title = element_blank()) Figure 1.8: Total streams by genre Bonus: if you want to reorder the bars to clearly show the most/least popular genres, use function fct_reorder() from the package forcats (part of tidyverse): ggplot(genres_popularity, aes(x = genre, y = streams)) + geom_col(aes(x = fct_reorder(genre, streams), fill = streams)) + ylab(&quot;Total streams&quot;) + xlab(&quot;Genre&quot;) + theme_minimal() + scale_fill_continuous_sequential(palette = &quot;Purple-Orange&quot;) + theme(axis.text.x = element_text(angle = 45, vjust = 0.6), legend.title = element_blank()) Figure 1.9: Total streams by genre, ordered Task 4 Rank the music labels by their success (total number of streams of all their songs) Show the total number of streams as well as the average and the median of all songs by label. (Bonus: Also add the artist and track names and the number of streams of each label’s top song to the result) Just like in the previous task, it would be enough to group the observations (in this case, by labels), get the sums of streams, and arrange them: music_data |&gt; group_by(label) |&gt; summarize(total_streams = sum(streams)) |&gt; arrange(desc(total_streams)) Again, you need to report the result of sorting, e.g., Universal Music is the leader by number of streams of their songs. To add more descriptive statistics (mean and median), you should also use summarize(): music_data |&gt; group_by(label) |&gt; summarize(total_streams = sum(streams), avg_streams = mean(streams), median_streams = median(streams)) |&gt; arrange(desc(total_streams)) Here, you can compare labels by means: for example, it’s already clear that Independent label(s) have more songs than Warner Music, thus it has more total streams; however, Warner Music’s songs are more successful than Independent’s in average streams. Bonus: to add most popular artists’ names and their hit songs, create three more columns using first() function from dplyr (you need to use dplyr::first() because the first() function exists in some other R packages): music_data |&gt; group_by(label) |&gt; summarize(total_streams = sum(streams), avg_streams = mean(streams), median_streams = median(streams), artist = dplyr::first(artistName, order_by = desc(streams)), song = dplyr::first(trackName, order_by = desc(streams)), song_streams = dplyr::first(streams, order_by = desc(streams))) |&gt; arrange(desc(total_streams)) Task 5 How do genres differ in terms of song features (audio features + song length + explicitness + song age)? Select appropriate summary statistics for each of the variables and highlight the differences between genres using the summary statistics. Create an appropriate plot showing the differences of “energy” across genres. All audio features, song length and song age are variables measured on a ratio scale, which means that we can evaluate their average values. We can use describeBy() function, which displays mean by default alongside with median and range values. Let’s have a look at some of the features: library(psych) describeBy(select(music_data, danceability, energy, speechiness, song_length, song_age), music_data$genre) ## ## Descriptive statistics by group ## group: Classics/Jazz ## vars n mean sd median trimmed mad min max range ## danceability 1 80 46.00 18.34 46.60 46.05 20.39 7.33 83.70 76.37 ## energy 2 80 30.85 19.51 28.10 29.00 18.46 0.26 85.00 84.74 ## speechiness 3 80 6.11 6.55 3.92 4.53 1.15 2.46 46.70 44.24 ## song_length 4 80 3.69 1.29 3.46 3.65 1.14 0.82 7.98 7.16 ## song_age 5 80 819.66 780.21 590.93 689.94 572.28 17.29 4255.29 4238.00 ## skew kurtosis se ## danceability -0.05 -0.74 2.05 ## energy 0.72 -0.03 2.18 ## speechiness 3.89 18.08 0.73 ## song_length 0.45 0.53 0.14 ## song_age 1.78 4.00 87.23 ## ------------------------------------------------------------ ## group: Country ## vars n mean sd median trimmed mad min max range ## danceability 1 504 59.67 11.98 59.70 59.64 9.49 19.20 92.20 73.00 ## energy 2 504 69.71 18.71 75.00 71.50 17.12 4.84 97.70 92.86 ## speechiness 3 504 5.16 4.10 3.78 4.28 1.30 2.48 35.10 32.62 ## song_length 4 504 3.35 0.54 3.27 3.31 0.48 1.69 5.40 3.70 ## song_age 5 504 244.21 437.55 109.29 133.08 99.33 2.29 2755.14 2752.86 ## skew kurtosis se ## danceability -0.05 0.40 0.53 ## energy -0.85 0.16 0.83 ## speechiness 3.97 20.41 0.18 ## song_length 0.81 1.18 0.02 ## song_age 3.51 12.80 19.49 ## ------------------------------------------------------------ ## group: Electro/Dance ## vars n mean sd median trimmed mad min max range ## danceability 1 2703 66.55 11.87 67.40 67.09 11.42 22.40 97.30 74.90 ## energy 2 2703 74.51 13.99 76.20 75.58 13.49 2.62 99.90 97.28 ## speechiness 3 2703 7.82 6.33 5.38 6.46 2.59 2.37 47.40 45.03 ## song_length 4 2703 3.36 0.74 3.25 3.28 0.49 0.56 9.83 9.27 ## song_age 5 2703 187.77 194.72 157.29 154.42 84.51 3.14 2285.57 2282.43 ## skew kurtosis se ## danceability -0.45 0.22 0.23 ## energy -0.85 1.08 0.27 ## speechiness 2.52 7.77 0.12 ## song_length 2.59 13.64 0.01 ## song_age 4.48 28.86 3.75 ## ------------------------------------------------------------ ## group: German Folk ## vars n mean sd median trimmed mad min max range ## danceability 1 539 63.03 15.36 65.20 63.81 15.57 20.60 96.40 75.80 ## energy 2 539 61.73 22.56 66.60 63.03 25.06 5.48 99.90 94.42 ## speechiness 3 539 9.80 10.20 4.91 7.57 2.67 2.45 49.90 47.45 ## song_length 4 539 3.65 0.97 3.63 3.64 0.76 0.72 6.93 6.22 ## song_age 5 539 436.39 552.94 212.29 301.88 70.53 3.29 2985.57 2982.29 ## skew kurtosis se ## danceability -0.42 -0.40 0.66 ## energy -0.44 -0.85 0.97 ## speechiness 1.77 2.18 0.44 ## song_length -0.06 1.23 0.04 ## song_age 2.44 5.37 23.82 ## ------------------------------------------------------------ ## group: HipHop/Rap ## vars n mean sd median trimmed mad min max range ## danceability 1 21131 73.05 12.30 74.80 73.86 11.86 8.39 98.00 89.61 ## energy 2 21131 65.10 13.28 65.70 65.41 13.49 0.54 99.00 98.46 ## speechiness 3 21131 20.92 13.55 19.00 19.74 15.72 2.54 96.60 94.06 ## song_length 4 21131 3.22 0.81 3.14 3.17 0.61 0.50 29.78 29.28 ## song_age 5 21131 109.30 96.83 96.29 100.31 75.40 0.29 1837.57 1837.29 ## skew kurtosis se ## danceability -0.63 0.16 0.08 ## energy -0.31 0.20 0.09 ## speechiness 0.84 0.97 0.09 ## song_length 5.28 125.03 0.01 ## song_age 5.37 55.22 0.67 ## ------------------------------------------------------------ ## group: other ## vars n mean sd median trimmed mad min max range ## danceability 1 5228 64.53 15.39 67.00 65.81 14.53 7.83 96.70 88.87 ## energy 2 5228 63.91 20.46 67.70 65.58 20.76 3.32 98.80 95.48 ## speechiness 3 5228 9.30 10.38 5.58 7.12 3.39 2.36 95.50 93.14 ## song_length 4 5228 3.43 0.96 3.35 3.38 0.72 0.53 22.17 21.64 ## song_age 5 5228 395.45 651.78 142.43 230.38 130.68 0.43 4268.43 4268.00 ## skew kurtosis se ## danceability -0.75 0.35 0.21 ## energy -0.65 -0.29 0.28 ## speechiness 4.09 24.16 0.14 ## song_length 3.47 50.56 0.01 ## song_age 2.80 8.07 9.01 ## ------------------------------------------------------------ ## group: Pop ## vars n mean sd median trimmed mad min max range ## danceability 1 30069 63.74 14.46 65.10 64.39 14.53 0.00 98.30 98.30 ## energy 2 30069 62.91 18.62 65.00 63.97 19.13 0.00 100.00 100.00 ## speechiness 3 30069 9.85 10.20 5.37 7.58 3.28 0.00 95.60 95.60 ## song_length 4 30069 3.52 0.84 3.43 3.47 0.65 0.02 29.35 29.34 ## song_age 5 30069 238.36 374.54 143.29 150.48 99.12 0.29 6325.00 6324.71 ## skew kurtosis se ## danceability -0.42 -0.09 0.08 ## energy -0.49 -0.22 0.11 ## speechiness 2.36 7.21 0.06 ## song_length 3.02 52.35 0.00 ## song_age 4.28 25.68 2.16 ## ------------------------------------------------------------ ## group: R&amp;B ## vars n mean sd median trimmed mad min max range ## danceability 1 1881 67.97 13.43 70.10 69.07 12.60 8.66 97.00 88.34 ## energy 2 1881 61.25 15.80 62.30 61.92 15.86 2.46 96.10 93.64 ## speechiness 3 1881 12.34 10.10 8.38 10.59 6.33 2.29 85.60 83.31 ## song_length 4 1881 3.46 0.72 3.43 3.43 0.63 0.89 8.53 7.64 ## song_age 5 1881 229.74 460.38 109.71 118.87 82.39 2.29 3277.00 3274.71 ## skew kurtosis se ## danceability -0.77 0.42 0.31 ## energy -0.42 0.01 0.36 ## speechiness 1.69 3.64 0.23 ## song_length 0.85 3.31 0.02 ## song_age 4.43 20.72 10.62 ## ------------------------------------------------------------ ## group: Reggae ## vars n mean sd median trimmed mad min max range ## danceability 1 121 75.06 9.33 76.70 75.55 7.71 40.40 94.40 54.00 ## energy 2 121 67.61 14.91 69.60 68.47 14.83 14.50 91.10 76.60 ## speechiness 3 121 11.96 8.69 7.85 10.58 5.49 2.62 36.30 33.68 ## song_length 4 121 3.50 0.57 3.44 3.43 0.52 2.48 5.37 2.89 ## song_age 5 121 343.68 530.67 152.29 219.77 126.02 13.29 2307.14 2293.86 ## skew kurtosis se ## danceability -0.66 0.89 0.85 ## energy -0.66 0.52 1.36 ## speechiness 1.16 0.44 0.79 ## song_length 1.00 0.98 0.05 ## song_age 2.67 6.75 48.24 ## ------------------------------------------------------------ ## group: Rock ## vars n mean sd median trimmed mad min max range ## danceability 1 4214 54.75 13.98 55.00 55.05 13.79 6.28 98.00 91.72 ## energy 2 4214 67.77 21.37 70.85 69.41 23.35 1.37 99.80 98.43 ## speechiness 3 4214 6.19 5.22 4.32 5.03 1.82 2.22 54.60 52.38 ## song_length 4 4214 3.85 0.99 3.72 3.78 0.73 0.66 15.73 15.06 ## song_age 5 4214 356.17 531.81 160.29 223.63 112.68 1.29 3309.71 3308.43 ## skew kurtosis se ## danceability -0.21 0.02 0.22 ## energy -0.58 -0.44 0.33 ## speechiness 3.34 14.68 0.08 ## song_length 2.11 15.15 0.02 ## song_age 2.52 6.17 8.19 ## ------------------------------------------------------------ ## group: Soundtrack ## vars n mean sd median trimmed mad min max range ## danceability 1 326 52.82 16.25 54.10 52.84 17.79 15.00 91.50 76.50 ## energy 2 326 52.05 21.96 50.20 52.24 22.98 1.26 97.90 96.64 ## speechiness 3 326 6.82 7.51 3.99 5.17 1.46 2.42 81.80 79.38 ## song_length 4 326 3.55 0.99 3.50 3.54 0.80 0.77 8.84 8.07 ## song_age 5 326 230.16 318.20 147.29 162.42 81.54 3.43 3068.29 3064.86 ## skew kurtosis se ## danceability -0.03 -0.70 0.90 ## energy -0.05 -0.58 1.22 ## speechiness 4.59 33.21 0.42 ## song_length 0.50 3.06 0.05 ## song_age 4.73 28.67 17.62 Please note that it is not enough to simply print the means. You should always explain (a.k.a. “highlight”) the differences between genres in terms of song features: on average, Reggae and HipHop are the most danceable genres (their mean danceabilities are 75.06 and 73.05, respectively); Rock songs have the longest average song duration across all genres (3.85 min); Classic and Jazz songs are the oldest (average song age is 819.66 weeks); etc. However, explicitness is a categorical (nominal) variable, i.e., we cannot use mean or median to describe genres by explicitness. To describe genres by it, we should get and examine the frequencies of explicit and not explicit songs: # table(select(music_data, genre, explicit)) # #absolute frequencies prop.table(table(select(music_data, genre, explicit)), 1) |&gt; round(3) #relative frequencies ## explicit ## genre not explicit explicit ## Classics/Jazz 0.825 0.175 ## Country 0.980 0.020 ## Electro/Dance 0.660 0.340 ## German Folk 0.701 0.299 ## HipHop/Rap 0.948 0.052 ## other 0.922 0.078 ## Pop 0.845 0.155 ## R&amp;B 0.922 0.078 ## Reggae 0.909 0.091 ## Rock 0.828 0.172 ## Soundtrack 0.868 0.132 This can also be visualized with a grouped bar chart: #genres_explicit &lt;- as.data.frame(table(select(music_data, genre, explicit))) #absolute frequencies genres_explicit_rel &lt;- as.data.frame(prop.table(table(select(music_data, genre, explicit)), 1)) #relative frequencies library(colorspace) ggplot(genres_explicit_rel, aes(x = genre, y = Freq, fill = explicit)) + #use &quot;fill&quot; argument for different colors geom_col(position = &quot;dodge&quot;) + #use &quot;dodge&quot; to display bars next to each other (instead of stacked on top) geom_text(aes(label = sprintf(&quot;%.0f%%&quot;, Freq * 100)), position = position_dodge(width = 0.9), vjust = -0.25) + #labels in % scale_fill_discrete_qualitative(palette = &quot;Dynamic&quot;) + labs(x = &quot;Genre&quot;, y = &quot;Relative frequency&quot;) + theme_minimal() + scale_fill_discrete_sequential(palette = &quot;PurpOr&quot;) + theme(axis.text.x = element_text(angle = 45, vjust = 1.1, hjust = 1)) Figure 1.14: Explicit lyrics share by genre From the plot above it can be concluded, that Electro/Dance has the greatest share of explicit songs across all genres (34%); Country, in contrast, has the least share of explicit songs (only 2%). For showing the differences in energy in songs across genres, it would make sense to plot the means of all genres’ songs’ energy using boxplot: ggplot(music_data, aes(x = fct_reorder(genre, energy), y = energy)) + geom_boxplot(coef = 3, fill = &quot;lavenderblush3&quot;, color = &quot;thistle4&quot;) + labs(x = &quot;Genre&quot;, y = &quot;Energy&quot;) + theme_minimal() + theme(axis.text.x = element_text(angle = 45, vjust = 1.1, hjust = 1), legend.position = &quot;none&quot;) Figure 1.15: Boxplot of energy by genre Also, you could have a look at the plot of means: library(Rmisc) mean_data &lt;- summarySE(music_data, measurevar = &quot;energy&quot;, groupvars = &quot;genre&quot;) # mean_data ggplot(mean_data, aes(x = fct_reorder(genre, energy), y = energy)) + geom_bar(position = position_dodge(0.9), fill = &quot;lavenderblush3&quot;, stat = &quot;identity&quot;, width = 0.55) + geom_errorbar(position = position_dodge(0.9), width = 0.15, aes(ymin = energy - ci, ymax = energy + ci)) + theme_minimal() + labs(x = &quot;Genre&quot;, y = &quot;Average energy of songs&quot;) + theme(axis.text.x = element_text(angle = 45, vjust = 0.8, hjust = 1)) Figure 1.16: Average energy of songs by genre Task 6 Visualize the number of songs by label. “Visualize” means “create a plot”. Thus, you should create a bar plot (to show differences in sum of streams by labels, where labels are categorical variables). It is enough to visualize count of all observations by labels, i.e., it was not necessary to drop duplicates or repeated ISRCs. However, both solutions are correct. labels_songs &lt;- as.data.frame(table(music_data$label)) # frequencies labels_songs &lt;- dplyr::rename(labels_songs, label = Var1, number_of_songs = Freq) # labels_songs ggplot(labels_songs, aes(x = label, y = number_of_songs)) + geom_col(width = 0.55, fill = &quot;lavenderblush3&quot;) + ylab(&quot;Number of songs&quot;) + xlab(&quot;Label&quot;) + theme_minimal() Figure 1.18: Count of songs by label Here we can see a confirmation of one of our previous conclusions about the difference in songs count between Warner Music and Independent labels, which resulted in the lower average streams of the latter. Task 7 Visualize the share/relative frequency of songs by genre. Again, you need to build an appropriate plot. It is a bar plot again, but it illustrates the relative frequencies between number of songs by genres. First, create a data frame with relative frequencies: genres_songs_rel &lt;- as.data.frame(prop.table(table(music_data$genre))) #relative frequencies genres_songs_rel &lt;- dplyr::rename(genres_songs_rel, genre = Var1, share = Freq) # head(genres_songs_rel) Then create the bar plot as usual: ggplot(genres_songs_rel, aes(x = genre, y = share)) + geom_col(aes(fill = share)) + ylab(&quot;Share of songs&quot;) + xlab(&quot;Label&quot;) + geom_text(aes(label = sprintf(&quot;%.0f%%&quot;, share * 100)), vjust = -0.2) + theme_minimal() + scale_fill_continuous_sequential(palette = &quot;Purple-Orange&quot;) + theme(axis.text.x = element_text(angle = 45, vjust = 0.75)) Figure 1.20: Share of songs by genre Task 8 Create a histogram of the variable “valence”. This is a simple plot of valence distribution across all songs in your data (we can see that it follows normal distribution): music_data |&gt; ggplot(aes(valence)) + geom_histogram(binwidth = 4, col = &quot;white&quot;, fill = &quot;lavenderblush3&quot;) + labs(x = &quot;Valence&quot;, y = &quot;Frequency&quot;) + theme_minimal() Figure 1.21: Distribution of valence Task 9 Create a scatter plot showing “valence” and “speechiness” (Bonus: add a regression line). Finally, we can visualize the relationship between valence and speechiness of songs in our data: ggplot(music_data, aes(speechiness, valence)) + geom_point(shape = 1) + labs(x = &quot;Speechiness&quot;, y = &quot;Valence&quot;) + labs(x = &quot;Speechiness&quot;, y = &quot;Valence&quot;) + theme_minimal() Figure 1.22: Scatterplot of speechiness and valence Bonus: to add regression line, use geom_smooth() function: ggplot(music_data, aes(speechiness, valence)) + geom_point(shape = 1) + labs(x = &quot;Speechiness&quot;, y = &quot;Valence&quot;) + geom_smooth(method = &quot;lm&quot;, color = &quot;lavenderblush4&quot;, alpha = 0.1) + #add regression line labs(x = &quot;Speechiness&quot;, y = &quot;Valence&quot;) + theme_minimal() Figure 1.23: Scatterplot of speechiness and valence The slope of the regression line suggests that there is positive relationship between valence and speechiness. 10.3 Assignment 2: Solution Assignment 2a Load data library(pastecs) library(ggplot2) library(psych) library(pwr) library(lsr) library(reshape2) library(ggstatsplot) library(Rmisc) library(plyr) library(car) options(scipen = 999) #scientific notation customer_data_a &lt;- read.table(&quot;https://raw.githubusercontent.com/WU-RDS/MA2022/main/data/data_1.csv&quot;, sep = &quot;,&quot;, header = TRUE) #read in data # head(customer_data_a) str(customer_data_a) Question 1 Let’s have a quick look at the revenues that we have in our data: psych::describe(customer_data_a$revenue) ggplot(customer_data_a, aes(revenue)) + geom_histogram(col = &quot;white&quot;, fill = &quot;lavenderblush3&quot;, bins = 50) + geom_vline(data = customer_data_a %&gt;% dplyr::summarise(mean = mean(revenue)), aes(xintercept = mean), size = 0.7, color = &quot;gray19&quot;) + labs(x = &quot;Revenue&quot;, y = &quot;Frequency&quot;) + ggtitle(&quot;Distribution of revenue per customer&quot;) + theme_minimal() To compute the confidence interval for the average revenue per customer, we will need three things: 1) the mean \\(\\bar x\\), 2) the standard error (\\(s \\over \\sqrt{n}\\)), and 3) the critical value for a t-distribution (\\(t_{crit}\\); we will use a t-distribution, because we are not sure of the variance in the population; for this assignment, also the normal distribution and the corresponding \\(z\\)-score would have been counted as correct). mean &lt;- mean(customer_data_a$revenue) #calculate the mean sd &lt;- sd(customer_data_a$revenue) n &lt;- nrow(customer_data_a) se &lt;- sd/sqrt(n) #calculate the standard error df &lt;- n - 1 t_crit &lt;- qt(0.975, df) #calculate the critical value The confidence interval can be computed as follows: \\[CI_{rev} = \\bar x \\pm t_{ \\alpha \\over 2}*SE_{\\bar x}\\] ci_lower &lt;- mean - t_crit * se ci_upper &lt;- mean + t_crit * se ci_lower ## [1] 1364.34 ci_upper ## [1] 1439.498 You could also use one-sample t.test() function to calculate the CIs around the mean: t.test(customer_data_a$revenue)$conf.int ## [1] 1364.340 1439.498 ## attr(,&quot;conf.level&quot;) ## [1] 0.95 We can see now that the confidence interval for revenues is \\(CI_{rev} = [1364.34,1439.50]\\). To communicate this information with the accounting department, you should interpret the intervals as follows: If we’d taken 100 samples and calculated the mean and confidence interval for each of them, then the true population mean would be included in 95% of these intervals. In the sample at hand, this interval spans from 1364.34 to 1439.50 EUR. Question 2 First we will analyze whether the personalization feature that was tested in the A/B-test had an effect on revenues. We need to formulate a hypothesis which we can test. In this case, the null hypothesis is that the feature had no effect on the mean revenue, i.e. that there is no difference in the mean revenue between the two populations. The alternative hypothesis states that the campaign did have an effect, meaning that there is a difference in the mean revenue between the populations. In more formal notation this is: \\[H_0: \\mu_0 = \\mu_1 \\\\ H_1: \\mu_0 \\neq \\mu_1\\] We need to transform the variable exp_group into a factor variable and inspect the data using descriptive statistics: customer_data_a$exp_group &lt;- factor(customer_data_a$exp_group, levels = c(0, 1), labels = c(&quot;control&quot;, &quot;treatment&quot;)) describeBy(customer_data_a$revenue, customer_data_a$exp_group) #describe control and treatment groups ## ## Descriptive statistics by group ## group: control ## vars n mean sd median trimmed mad min max range skew kurtosis ## X1 1 685 1288.58 675.54 1245 1269.56 751.68 1 3726 3725 0.31 -0.35 ## se ## X1 25.81 ## ------------------------------------------------------------ ## group: treatment ## vars n mean sd median trimmed mad min max range skew kurtosis ## X1 1 744 1506.27 751.71 1507.5 1480.48 774.66 3 4179 4176 0.34 -0.17 ## se ## X1 27.56 It can already be seen that the mean revenue is higher in the treatment group. Next, we should visualize the data. For this, we can use plot of means or boxplot: mean_data &lt;- summarySE(customer_data_a, measurevar = &quot;revenue&quot;, groupvars = c(&quot;exp_group&quot;)) # Plot of means ggplot(mean_data, aes(x = exp_group, y = revenue)) + geom_bar(position = position_dodge(0.9), fill = &quot;lavenderblush3&quot;, stat = &quot;identity&quot;, width = 0.5) + geom_errorbar(position = position_dodge(0.9), width = 0.15, aes(ymin = revenue - ci, ymax = revenue + ci)) + theme_minimal() + labs(x = &quot;Experiment group&quot;, y = &quot;Average revenue&quot;, title = &quot;Average revenue by group&quot;) + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) # Boxplot ggplot(customer_data_a, aes(x = exp_group, y = revenue)) + geom_boxplot() + geom_jitter(alpha = 0.2, color = &quot;lavenderblush4&quot;) + labs(x = &quot;Experiment group&quot;, y = &quot;Revenue&quot;, title = &quot;Boxplot of revenue by group&quot;) + theme_minimal() As we can see in both the descriptive statistics and the plot, the revenues were higher for the group that was exposed to the new personalization feature. To test whether or not this difference is significant, we need to use an independent-means t-test, since we have different customers in each group, meaning that we have collected the data using a between-subjects design (i.e., the customers in one condition are independent of the customers in the other condition). The requirements are clearly met: Our dependent variable (revenue) is measured on an ratio scale; Since we have more than 30 observations per group we do not really have to concern ourselves with whether the data is normally distributed or not (see central limit theorem); If a customer was exposed to the feature or not was assigned randomly (i.e., the groups are independent); R automatically performs Welch’s t-test, which corrects for unequal variance. t.test(revenue ~ exp_group, data = customer_data_a, paired = FALSE) ## ## Welch Two Sample t-test ## ## data: revenue by exp_group ## t = -5.7652, df = 1426.2, p-value = 0.00000000998 ## alternative hypothesis: true difference in means between group control and group treatment is not equal to 0 ## 95 percent confidence interval: ## -291.7562 -143.6193 ## sample estimates: ## mean in group control mean in group treatment ## 1288.581 1506.269 The test is significant, since the p-value is smaller than 0.05, leading us to reject the null hypothesis that there is no difference in the mean revenue. The p-value states the probability of finding a difference of the observed magnitude or higher, if the null hypothesis was in fact true (i.e., if there was in fact no difference between the populations). Effectively, this means that the personalization feature had an effect on the average expenditure. Another thing we can extract from this test result is the confidence interval around the difference in means. Since 0 (i.e., hypothetical difference in means from H0) is not included in the interval, it is not a plausible value, confirming the conclusion to reject the null hypothesis. We should also calculate the effect size: cohensD(revenue ~ exp_group, data = customer_data_a) ## [1] 0.303943 This magnitude of the effect size (0.30) suggests that the effect of the personalization feature on the revenue is small to medium. We can visualize the results of the test using ggstatsplot: ggbetweenstats( data = customer_data_a, plot.type = &quot;box&quot;, x = exp_group, #2 groups y = revenue , type = &quot;p&quot;, #default effsize.type = &quot;d&quot;, #display effect size (Cohen&#39;s d in output) messages = FALSE, bf.message = FALSE, mean.ci = TRUE, title = &quot;Average revenue per customer by group&quot; ) The results show that revenues are higher in the treatment group (Mean = 1506.27, SE = 27.56) compared to the control group (Mean = 1288.58, SE = 25.81). This means that, on average, the revenues were €217.69 higher in the treatment group, compared to the control group. An independent-means t-test showed that this difference is significant: t(1426.2) = 5.77, p &lt; .05 (95% CI = [143.62, 291.76]); effect size is small to medium = 0.30. Now we can test if the new personalization feature has an effect on time spent on our website. describeBy(customer_data_a$time_on_site, customer_data_a$exp_group) #describe control and treatment groups for time on site ## ## Descriptive statistics by group ## group: control ## vars n mean sd median trimmed mad min max range skew kurtosis ## X1 1 685 626.28 285.76 607 621.75 309.86 1 1504 1503 0.17 -0.44 ## se ## X1 10.92 ## ------------------------------------------------------------ ## group: treatment ## vars n mean sd median trimmed mad min max range skew kurtosis ## X1 1 744 640.45 287.01 629 634.19 292.07 23 1622 1599 0.23 -0.23 ## se ## X1 10.52 mean_data_time &lt;- summarySE(customer_data_a, measurevar = &quot;time_on_site&quot;, groupvars = c(&quot;exp_group&quot;)) # Plot of means ggplot(mean_data_time, aes(x = exp_group, y = time_on_site)) + geom_bar(position = position_dodge(0.9), fill = &quot;lavenderblush3&quot;, stat = &quot;identity&quot;, width = 0.5) + geom_errorbar(position = position_dodge(0.9), width = 0.15, aes(ymin = time_on_site - ci, ymax = time_on_site + ci)) + theme_minimal() + labs(x = &quot;Experiment group&quot;, y = &quot;Average time on site&quot;, title = &quot;Average time on site by group&quot;) + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) # Boxplot ggplot(customer_data_a, aes(x = exp_group, y = time_on_site)) + geom_boxplot() + geom_jitter(alpha = 0.2, color = &quot;lavenderblush4&quot;) + labs(x = &quot;Experiment group&quot;, y = &quot;Time on site&quot;, title = &quot;Boxplot of time on site by group&quot;) + theme_minimal() There is some difference in average time spent on site, however, we need to conduct a statistical test. We are examining if there is difference in mean time on site between the populations; our formal notation for the null and alternative hypotheses stays the same: \\[H_0: \\mu_0 = \\mu_1 \\\\ H_1: \\mu_0 \\neq \\mu_1\\] We use the independent-means t-test again: The dependent variable (time on site) is measured on an ratio scale We still have more than 30 observations per group The groups are independent t.test(time_on_site ~ exp_group, data = customer_data_a, paired = FALSE) ## ## Welch Two Sample t-test ## ## data: time_on_site by exp_group ## t = -0.93495, df = 1418.3, p-value = 0.35 ## alternative hypothesis: true difference in means between group control and group treatment is not equal to 0 ## 95 percent confidence interval: ## -43.92214 15.56805 ## sample estimates: ## mean in group control mean in group treatment ## 626.2759 640.4530 cohensD(time_on_site ~ exp_group, data = customer_data_a) ## [1] 0.04949881 The test results show that the difference that we observed before is not statistically significant as p-value is &gt;0.05. Alternatively, we can see that the confidence interval around the difference in means includes 0 (which is the value of difference in means from the null hypothesis). Therefore, we cannot reject the null hypothesis. The effect is very small. ggbetweenstats( data = customer_data_a, plot.type = &quot;box&quot;, x = exp_group, #2 groups y = time_on_site, type = &quot;p&quot;, # default effsize.type = &quot;d&quot;, #display effect size (Cohen&#39;s d in output) messages = FALSE, bf.message = FALSE, mean.ci = TRUE, title = &quot;Average time on site per customer by group&quot; ) This test revealed that time on site was slightly higher in the treatment group (Mean = 640.45, SE = 10.52) compared to the control group (Mean = 626.28, SE = 10.92). This difference is not statistically significant: t(1418.3) = 0.93, p &gt; .05 (95% CI = [-15.56; 43.92]). Finally, we can conclude from this study that the personalization feature causes users to increase their expenditures, but does not result in increased time spent on the website. If the primary goal of the company is to increase the revenues, this feature might be implemented on the website. Question 3 To define the number of users that should be placed in two different conditions, pwr.t.test() function should be used. As far as the aim of the experiment is to simply detect significant difference between the groups, the sample size definition should be based on two-sided test. Given the effect size = 0.1, significance level = 0.05, and power = 0.8, sample size for each group will be: pwr.t.test(d = 0.1, sig.level = 0.05, power = 0.8, type = c(&quot;two.sample&quot;), alternative = c(&quot;two.sided&quot;)) ## ## Two-sample t test power calculation ## ## n = 1570.733 ## d = 0.1 ## sig.level = 0.05 ## power = 0.8 ## alternative = two.sided ## ## NOTE: n is number in *each* group To achieve our desired effect size of 0.1, a significance level of 0.5 and a power of 0.8 we would need to include at least 1,571 customers per group in the planned experiment. Assignment 2b: Question 4 Load data customer_data_b &lt;- read.table(&quot;https://raw.githubusercontent.com/WU-RDS/MA2022/main/data/data_2.csv&quot;, sep = &quot;,&quot;, header = TRUE) #read in data # head(customer_data_b) str(customer_data_b) Next we want to examine whether the alternative page layout has an effect on the time that a user spends on the website. The null hypothesis here is that there is no difference in the mean time spend on the website for the same customers between the two page layouts. Because the observations come from the same population of customers (i.e., a within-subject design), we refer to the difference in the means for the same population as \\(\\mu_D\\) when stating our hypotheses. The alternative hypothesis states that that there is a difference between the time on site variables for the same customers. In mathematical notation this can be written as \\[H_0: \\mu_D = 0 \\\\ H_1: \\mu_D \\neq 0\\] Again, we start with descriptive statistics to get a feel for the data: psych::describe(customer_data_b[!is.na(customer_data_b$time_on_site_2), c(&quot;time_on_site_1&quot;, &quot;time_on_site_2&quot;)]) We can observe the difference in means from the table above; we can also visualize the data: # Plot of means customer_data_long &lt;- melt(customer_data_b[!is.na(customer_data_b$time_on_site_2), c(&quot;time_on_site_1&quot;, &quot;time_on_site_2&quot;)]) names(customer_data_long) &lt;- c(&quot;layout&quot;, &quot;time_on_site&quot;) mean_data &lt;- summarySE(customer_data_long, measurevar = &quot;time_on_site&quot;, groupvars = c(&quot;layout&quot;)) # Plot of means ggplot(mean_data, aes(x = layout, y = time_on_site)) + geom_bar(position = position_dodge(0.9), fill = &quot;lavenderblush3&quot;, stat = &quot;identity&quot;, width = 0.5) + geom_errorbar(position = position_dodge(0.9), width = 0.15, aes(ymin = time_on_site - ci, ymax = time_on_site + ci)) + theme_minimal() + labs(x = &quot;&quot;, y = &quot;Average time on site&quot;, title = &quot;Average time on site by group&quot;) + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) # Boxplot ggplot(customer_data_long, aes(x = layout, y = time_on_site)) + geom_boxplot() + geom_jitter(alpha = 0.2, color = &quot;lavenderblush4&quot;) + labs(x = &quot;&quot;, y = &quot;Revenue&quot;, title = &quot;Boxplot of revenue by group&quot;) + theme_minimal() It appears that there is a difference in the means. To test whether it is significant, we need to run a t-test again. However, this time we need a slightly different version of the t-test because the same customers are observed for the two page layouts (i.e., the same customers are shown both layouts). This means that we need a dependent means t-test, or paired samples t-test. The other assumptions are virtually identical to the independent-means t-test. The test can be executed in R by adding paired = TRUE to the code. t.test(customer_data_b$time_on_site_2, customer_data_b$time_on_site_1, mu = 0, alternative = &quot;two.sided&quot;, conf.level = 0.95, paired = TRUE) ## ## Paired t-test ## ## data: customer_data_b$time_on_site_2 and customer_data_b$time_on_site_1 ## t = 8.0093, df = 740, p-value = 0.000000000000004478 ## alternative hypothesis: true mean difference is not equal to 0 ## 95 percent confidence interval: ## 92.30401 152.24660 ## sample estimates: ## mean difference ## 122.2753 The p-value is again lower than the chosen significance level of 5% (i.e., p &lt; .05), which means that we can reject the null hypothesis that there is no difference in the mean time on site between the two page layouts. The confidence interval confirms the conclusion to reject the null hypothesis since \\(0\\) is not contained in the range of plausible values. We can now find out how strong this effect is: it is actually rather small. cohensD(customer_data_b$time_on_site_1, customer_data_b$time_on_site_2, method = &quot;paired&quot;) ## [1] 0.2942274 Alternatively, you could also use the ggstatsplot package to conduct the tests and extract the relevant information from there: ggwithinstats(data = customer_data_long, x = layout, y = time_on_site, path.point = FALSE, path.mean = TRUE, title = &quot;Time on site for different page layouts&quot;, messages = FALSE, bf.message = FALSE, mean.ci = TRUE, effsize.type = &quot;d&quot; # display effect size (Cohen&#39;s d in output) ) The results of this experiment show that, on average, the same users used the service more when it included the alternative layout (M = 747.55, SE = 11.06) compared to the service without the previous personalization feature only (M = 625.27, SE = 10.36). This difference was significant: t(740) = 8.01, p &lt; .05 (95% CI = [92.30, 152.25]); effect size is small = 0.29. The conclusion from this test would be that the alternative page layout increases the time that users spend on the website and, thus, the alternative layout might be implemented as the new standard. Assignment 2c: Question 5 Load data customer_data_c &lt;- read.table(&quot;https://raw.githubusercontent.com/WU-RDS/MA2022/main/data/data_3.csv&quot;, sep = &quot;,&quot;, header = TRUE) #read in data # head(customer_data_c) str(customer_data_c) To answer the question of whether the type of advertising has an effect on revenue, we need to formulate a testable null hypothesis. In our case, the null hypothesis is stating that the average level of sales is equal for all three advertising types. In mathematical notation this implies: \\[H_0: \\mu_1 = \\mu_2 = \\mu_3 \\] The alternate hypothesis is simply that the means are not all equal, i.e., \\[H_1: \\exists {i,j}: {\\mu_i \\ne \\mu_j} \\] or \\[H_1: \\textrm{Means are not all equal} \\] The appropriate test for such a hypothesis is one-way ANOVA since we have a metric-scaled dependent variable and a categorical independent variable with more than two levels. First, we need to recode relevant variables into factors and give them more descriptive level names: customer_data_c$retargeting &lt;- factor(customer_data_c$retargeting, levels = c(1, 2, 3), labels = c(&quot;no retargeting&quot;, &quot;generic retargeting&quot;, &quot;dynamic retargeting&quot;)) Next we calculate summary statistics for the data and build an appropriate plot. describeBy(customer_data_c$revenue, customer_data_c$retargeting) ## ## Descriptive statistics by group ## group: no retargeting ## vars n mean sd median trimmed mad min max range skew kurtosis ## X1 1 737 2166.14 791.85 2168 2158.39 796.16 190 4462 4272 0.08 -0.32 ## se ## X1 29.17 ## ------------------------------------------------------------ ## group: generic retargeting ## vars n mean sd median trimmed mad min max range skew kurtosis ## X1 1 777 2299.26 786.85 2289 2291.99 770.95 89 5541 5452 0.15 0.22 ## se ## X1 28.23 ## ------------------------------------------------------------ ## group: dynamic retargeting ## vars n mean sd median trimmed mad min max range skew kurtosis ## X1 1 690 2609.56 826.81 2594 2605.37 836.19 513 5036 4523 0.05 -0.24 ## se ## X1 31.48 # Plot of means mean_data_2 &lt;- summarySE(customer_data_c, measurevar = &quot;revenue&quot;, groupvars = c(&quot;retargeting&quot;)) ggplot(mean_data_2, aes(x = retargeting, y = revenue)) + geom_bar(position = position_dodge(1), fill = &quot;lavenderblush3&quot;, stat = &quot;identity&quot;, width = 0.5) + geom_errorbar(position = position_dodge(0.9), width = 0.15, aes(ymin = revenue - ci, ymax = revenue + ci)) + theme_minimal() + labs(x = &quot;&quot;, y = &quot;Average revenue&quot;, title = &quot;Average revenue by group&quot;) + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) # Boxplot ggplot(customer_data_c, aes(x = retargeting, y = revenue)) + geom_boxplot() + geom_jitter(colour = &quot;lavenderblush4&quot;, alpha = 0.1) + theme_minimal() + labs(x = &quot;&quot;, y = &quot;Revenue&quot;) + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) Both the summary statistics and the plots hint at the fact that the means may not be equal. Especially the difference between dynamic retargeting and no retargeting/generic regtargeting seem to be quite high. Before we move to the formal test, we need to see if a series of assumptions are met, namely: Independence of observations Distributional assumptions Homogeneity of variances The first assumption is satisfied due to the fact that the participants were randomly assigned to the advertisement groups. To see if we need to worry about distributional assumptions we first take a look at the number of observations in each advertising group. table(customer_data_c$retargeting) #check number of observations by group ## ## no retargeting generic retargeting dynamic retargeting ## 737 777 690 Due to the fact that there are always more than 30 observations in each group we can rely on the central limit theorem to satisfy the distributional assumptions. You can still test this assumption using Shapiro-Wilk normality test and plots: # test for normal distribution of variables - no # need because n &gt; 30 by(customer_data_c$revenue, customer_data_c$retargeting, shapiro.test) ## customer_data_c$retargeting: no retargeting ## ## Shapiro-Wilk normality test ## ## data: dd[x, ] ## W = 0.99692, p-value = 0.1719 ## ## ------------------------------------------------------------ ## customer_data_c$retargeting: generic retargeting ## ## Shapiro-Wilk normality test ## ## data: dd[x, ] ## W = 0.99705, p-value = 0.1682 ## ## ------------------------------------------------------------ ## customer_data_c$retargeting: dynamic retargeting ## ## Shapiro-Wilk normality test ## ## data: dd[x, ] ## W = 0.99777, p-value = 0.4959 # shapiro.test(customer_data_c[customer_data_c$retargeting # == &#39;no retargeting&#39;, ]$revenue) # shapiro.test(customer_data_c[customer_data_c$retargeting # == &#39;generic retargeting&#39;, ]$revenue) # shapiro.test(customer_data_c[customer_data_c$retargeting # == &#39;dynamic retargeting&#39;, ]$revenue) qqnorm(customer_data_c[customer_data_c$retargeting == &quot;no retargeting&quot;, ]$revenue) qqline(customer_data_c[customer_data_c$retargeting == &quot;no retargeting&quot;, ]$revenue) qqnorm(customer_data_c[customer_data_c$retargeting == &quot;generic retargeting&quot;, ]$revenue) qqline(customer_data_c[customer_data_c$retargeting == &quot;generic retargeting&quot;, ]$revenue) qqnorm(customer_data_c[customer_data_c$retargeting == &quot;dynamic retargeting&quot;, ]$revenue) qqline(customer_data_c[customer_data_c$retargeting == &quot;dynamic retargeting&quot;, ]$revenue) Homogeneity of variances can be checked with Levene’s test (implemented as leveneTest() from the car package). The null hypothesis of this test is that the variances are equal, with the alternative hypothesis being that the variances are not all equal. Note that this step could also be skipped and replaced by the use of the robust ANOVA using the oneway.test() function. leveneTest(revenue ~ retargeting, data = customer_data_c) As we can see, we cannot reject the H0 of variances being equal, thus we can proceed with ANOVA. aov &lt;- aov(revenue ~ retargeting, data = customer_data_c) summary(aov) #if levene&#39;s test would be significant, compute the Welch&#39;s F-ratio instead ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## retargeting 2 73393103 36696551 57.16 &lt;0.0000000000000002 *** ## Residuals 2201 1412939750 641954 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 lsr::etaSquared(aov) ## eta.sq eta.sq.part ## retargeting 0.04937865 0.04937865 summary(aov)[[1]]$&quot;Sum Sq&quot;[1]/(summary(aov)[[1]]$&quot;Sum Sq&quot;[1] + summary(aov)[[1]]$&quot;Sum Sq&quot;[2]) #another way ## [1] 0.04937865 Or, as was mentioned, you could also run a more robust test with oneway.test(): oneway.test(revenue ~ retargeting, data = customer_data_c) ## ## One-way analysis of means (not assuming equal variances) ## ## data: revenue and retargeting ## F = 55.412, num df = 2.0, denom df = 1454.6, p-value &lt; ## 0.00000000000000022 In both tests, the p-value is way smaller than 0.05, which we chose as our significance level, meaning that we reject the null hypothesis of the means being equal in the three advertising groups. Again, there is an option to show the test results in a graph: library(ggstatsplot) ggbetweenstats( data = customer_data_c, x = retargeting, y = revenue, plot.type = &quot;box&quot;, pairwise.comparisons = TRUE, pairwise.annotation = &quot;p.value&quot;, p.adjust.method = &quot;bonferroni&quot;, effsize.type = &quot;eta&quot;, #if var.equal = FALSE, returns partial eta^2 var.equal = TRUE, mean.plotting = TRUE, mean.ci = TRUE, mean.label.size = 2.5, type = &quot;parametric&quot;, k = 3, outlier.label.color = &quot;darkgreen&quot;, title = &quot;Comparison of revenues between groups&quot;, xlab = &quot;Experimental group&quot;, ylab = &quot;Revenue&quot;, messages = FALSE, bf.message = FALSE, ) Next we will briefly inspect the residuals of the ANOVA to see if the assumptions of the test really are justified. plot(aov, 1) plot(aov, 2) The first plot gives us a feel for the distribution of the residuals of the three groups. The residuals seem to be roughly equally distributed, which speaks for the fact that the homogeneity of variances assumption is fulfilled. The second plot is a QQ-plot of the residuals, meant as a quick visual check to see if the normality assumption is fulfilled. Leading up to the test we only checked if there were more than 30 observations per group to satisfy the normality assumption but despite this being fulfilled it is still important to check the normality of the residuals, as any strange behavior here may indicate problems with the model specification. To further confirm that the residuals are roughly normally distributed we employ the Shapiro-Wilk test. The null hypothesis is that the distribution of the data is normal, with the alternative hypothesis positing that the data is not normally distributed. shapiro.test(resid(aov)) ## ## Shapiro-Wilk normality test ## ## data: resid(aov) ## W = 0.99865, p-value = 0.07655 The p-value is above the significance level and thus we cannot reject the null hypothesis of normal distribution, which further implies that the normality assumption is fulfilled. According to the test, the effect of different types of advertising on revenues was detected: F(2, 2201) = 57.16, p &lt; 0.05, \\(\\eta^2\\) = 0.049. The ANOVA result only tells us that the means of the three groups are not equal, but it does not tell us anything about which pairs of means are unequal. To find this out we need to conduct post-hoc tests to check the following null hypotheses for the respective pairwise comparisons: \\[1) H_0: \\mu_1 = \\mu_2; H_1: \\mu_1 \\neq \\mu_2 \\\\ 2) H_0: \\mu_2 = \\mu_3; H_1: \\mu_2 \\neq \\mu_3 \\\\ 3) H_0: \\mu_1 = \\mu_3; H_1: \\mu_1 \\neq \\mu_3 \\] Here we will conduct both the Bonferroni correction as well as Tukey’s HSD test, however, either would be sufficient for your homework. Bonferroni’s correction conducts multiple pairwise t-tests, with the null hypothesis being that of equal means in each case and the alternative hypothesis stating that the means are unequal. # bonferroni pairwise.t.test(customer_data_c$revenue, customer_data_c$retargeting, data = customer_data_c, p.adjust.method = &quot;bonferroni&quot;) ## ## Pairwise comparisons using t tests with pooled SD ## ## data: customer_data_c$revenue and customer_data_c$retargeting ## ## no retargeting generic retargeting ## generic retargeting 0.0038 - ## dynamic retargeting &lt; 0.0000000000000002 0.00000000000056 ## ## P value adjustment method: bonferroni According to the Bonferroni test, we can reject the null hypotheses in all cases, which means that the revenue means are significantly different from each other: dynamic regargeting vs. no retargeting dynamic regargeting vs. generig retargeting generic retargeting vs. no retargeting Alternatively, you could have also chosen to use Tukey’s HSD to conduct the post-hoc test: # tukey correction using the mult-comp package library(multcomp) tukeys &lt;- glht(aov, linfct = mcp(retargeting = &quot;Tukey&quot;)) summary(tukeys) ## ## Simultaneous Tests for General Linear Hypotheses ## ## Multiple Comparisons of Means: Tukey Contrasts ## ## ## Fit: aov(formula = revenue ~ retargeting, data = customer_data_c) ## ## Linear Hypotheses: ## Estimate Std. Error t value ## generic retargeting - no retargeting == 0 133.12 41.20 3.231 ## dynamic retargeting - no retargeting == 0 443.42 42.44 10.447 ## dynamic retargeting - generic retargeting == 0 310.30 41.91 7.404 ## Pr(&gt;|t|) ## generic retargeting - no retargeting == 0 0.00358 ** ## dynamic retargeting - no retargeting == 0 &lt; 0.0001 *** ## dynamic retargeting - generic retargeting == 0 &lt; 0.0001 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## (Adjusted p values reported -- single-step method) Tukey’s correction confirms the conclusion from the Bonferroni test. There seems to be difference in the means of generic retargeting vs. no retargeting, and dynamic retargeting vs. both generic retargeting and no retargeting. We can estimate the difference in means with corresponding confidence intervals: confint(tukeys) ## ## Simultaneous Confidence Intervals ## ## Multiple Comparisons of Means: Tukey Contrasts ## ## ## Fit: aov(formula = revenue ~ retargeting, data = customer_data_c) ## ## Quantile = 2.3451 ## 95% family-wise confidence level ## ## ## Linear Hypotheses: ## Estimate lwr upr ## generic retargeting - no retargeting == 0 133.1202 36.5094 229.7310 ## dynamic retargeting - no retargeting == 0 443.4211 343.8896 542.9527 ## dynamic retargeting - generic retargeting == 0 310.3009 212.0159 408.5859 par(mar = c(5, 19, 4, 2)) #the mar parameter changes the margins around created plots. This is done so the labels on the side of the Tukey plot are visible (however, this was not expected) plot(tukeys) It is clearly visible that none of the CIs cross the 0 bound (it’s not even visible), which further indicates that all differences in means are statistically significantly different from 0. From a reporting standpoint we can say that revenue is higher when using dynamic retargeting vs. no retargeting and generic retargeting; generic retargeting is though also more effective than no retargeting. Managerially, this means that dynamic retargeting helps us to increase sales and should thus be the preferred choice. Bonus: if you decided to check if the effectiveness of the retargeting depends on the gender, you could implement 2-way ANOVA. You should also describe the data using descriptive statistics and plots: customer_data_c$gender &lt;- factor(customer_data_c$gender, levels = c(0, 1), labels = c(&quot;male&quot;, &quot;female&quot;)) data_summary &lt;- summarySE(customer_data_c, measurevar = &quot;revenue&quot;, groupvars = c(&quot;retargeting&quot;, &quot;gender&quot;)) data_summary # Grouped plot of means ggplot(data_summary, aes(x = retargeting, y = revenue, fill = gender)) + geom_bar(position = position_dodge(0.9), stat = &quot;identity&quot;) + geom_errorbar(position = position_dodge(0.9), width = 0.2, aes(ymin = revenue - ci, ymax = revenue + ci)) + scale_fill_manual(values = c(&quot;snow2&quot;, &quot;lavenderblush3&quot;)) + theme_minimal() + labs(x = &quot;&quot;, y = &quot;Average revenue&quot;, title = &quot;Average revenue by type of retargeting and gender&quot;) + theme(plot.title = element_text(hjust = 0.5, color = &quot;#666666&quot;)) We can see that average expenditures of male customers are slightly higher than those of females when the customers receive generic or dynamic ads (for dynamic retargeting, we can also see the highest average revenues). We should check if revenues are affected by both retargeting type and gender, while also assessing the interaction effect between the independent variables. Thus, the model would look as follows: two_way_aov &lt;- aov(revenue ~ retargeting * gender, data = customer_data_c) summary(two_way_aov) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## retargeting 2 73393103 36696551 57.864 &lt; 0.0000000000000002 *** ## gender 1 4715691 4715691 7.436 0.00644 ** ## retargeting:gender 2 14285794 7142897 11.263 0.0000136 *** ## Residuals 2198 1393938265 634185 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 The results of the test show that there are indeed significant effects of retargeting, gender, and interaction between them on revenues, as the respective p-values are &lt;.05. If we conduct Tukey’s comparisons, we can see which combinations result in higher revenues: tukey &lt;- TukeyHSD(two_way_aov) print(tukey) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = revenue ~ retargeting * gender, data = customer_data_c) ## ## $retargeting ## diff lwr upr p adj ## generic retargeting-no retargeting 133.1202 37.08653 229.1539 0.0033452 ## dynamic retargeting-no retargeting 443.4211 344.48414 542.3581 0.0000000 ## dynamic retargeting-generic retargeting 310.3009 212.60306 407.9987 0.0000000 ## ## $gender ## diff lwr upr p adj ## female-male -92.51169 -159.042 -25.9814 0.0064446 ## ## $`retargeting:gender` ## diff lwr ## generic retargeting:male-no retargeting:male 241.0582 75.88444 ## dynamic retargeting:male-no retargeting:male 643.2603 473.04322 ## no retargeting:female-no retargeting:male 108.6701 -58.66557 ## generic retargeting:female-no retargeting:male 133.8618 -31.41542 ## dynamic retargeting:female-no retargeting:male 352.3995 182.18235 ## dynamic retargeting:male-generic retargeting:male 402.2021 234.22288 ## no retargeting:female-generic retargeting:male -132.3881 -297.44685 ## generic retargeting:female-generic retargeting:male -107.1964 -270.16795 ## dynamic retargeting:female-generic retargeting:male 111.3412 -56.63799 ## no retargeting:female-dynamic retargeting:male -534.5902 -704.69568 ## generic retargeting:female-dynamic retargeting:male -509.3985 -677.47946 ## dynamic retargeting:female-dynamic retargeting:male -290.8609 -463.80162 ## generic retargeting:female-no retargeting:female 25.1917 -139.97055 ## dynamic retargeting:female-no retargeting:female 243.7294 73.62389 ## dynamic retargeting:female-generic retargeting:female 218.5377 50.45671 ## upr p adj ## generic retargeting:male-no retargeting:male 406.23201 0.0004677 ## dynamic retargeting:male-no retargeting:male 813.47743 0.0000000 ## no retargeting:female-no retargeting:male 276.00578 0.4322698 ## generic retargeting:female-no retargeting:male 299.13903 0.1902849 ## dynamic retargeting:female-no retargeting:male 522.61656 0.0000001 ## dynamic retargeting:male-generic retargeting:male 570.18132 0.0000000 ## no retargeting:female-generic retargeting:male 32.67061 0.1994249 ## generic retargeting:female-generic retargeting:male 55.77511 0.4172311 ## dynamic retargeting:female-generic retargeting:male 279.32046 0.4082007 ## no retargeting:female-dynamic retargeting:male -364.48476 0.0000000 ## generic retargeting:female-dynamic retargeting:male -341.31758 0.0000000 ## dynamic retargeting:female-dynamic retargeting:male -117.92012 0.0000253 ## generic retargeting:female-no retargeting:female 190.35395 0.9980315 ## dynamic retargeting:female-no retargeting:female 413.83481 0.0006450 ## dynamic retargeting:female-generic retargeting:female 386.61859 0.0029269 We might be more interested in interactions between type of retargeting and gender. We can see that, for example, the following combinations work significantly better: generic retargeting works better than no retargeting across male customers, and so does dynamic retargeting; dynamic retargeting also works better than generic retargeting =&gt; for men, we can simply choose dynamic retargeting dynamic retargeting also works best with females; however, we can see that dynamic retargeting works worse for women compared to men (diff. -290.86, p-value &lt;.05). We can make a conclusion that our algorithms of dynamic retargeting are more fit for male customers, thus, depending on our strategy and target audience, we might need to adjust the algorithms. Question 6 For this question we want to examine whether the scores from the NPS measurement are significantly different for the experimental groups (i.e., three types of retargeting). Because we are dealing with data on an ordinal scale, we can not use ANOVA for this analysis. The non-parametric counterpart is the Kruskal-Wallis test, which tests for differences in medians between more than two groups. Hence, the null hypothesis is that the medians are equal in each group, and the alternative hypothesis is that there is a difference in medians. \\[H_0: \\bar{\\mu}_1 = \\bar{\\mu}_2 = \\bar{\\mu}_3 \\\\ H_1: \\bar{\\mu}_1 \\neq \\bar{\\mu}_2 \\neq \\bar{\\mu}_3 \\] Let’s inspect the descriptive statistics first: # Descriptive statistics for NPS, split by group describeBy(customer_data_c$nps, customer_data_c$retargeting) ## ## Descriptive statistics by group ## group: no retargeting ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 737 6.52 2.72 7 6.64 4.45 2 10 8 -0.17 -1.29 0.1 ## ------------------------------------------------------------ ## group: generic retargeting ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 777 7.19 2.59 7 7.24 2.97 3 11 8 -0.12 -1.28 0.09 ## ------------------------------------------------------------ ## group: dynamic retargeting ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 690 8.16 2.58 8 8.2 2.97 4 12 8 -0.15 -1.23 0.1 A good way to visualize ordinal data is through a boxplot. ggplot(data = customer_data_c, aes(x = retargeting, y = nps)) + geom_boxplot(color = &quot;lavenderblush4&quot;) + geom_jitter(colour = &quot;lavenderblush3&quot;, alpha = 0.1) + theme_minimal() + labs(x = &quot;&quot;, y = &quot;Rank&quot;) The descriptive statistics and boxplot seem to indicate that the median NPS without retargeting and with generic retargetng is the same; median NPS for dynamic retargeting is slightly higher. The reason might be, for example, that due to the use of dynamic retargeting, customers spend more money (as was shown in ANOVA), but it doesn’t result in higher NPS, possibly because customers are not comfortable with the use of their personal data for advertising purposes. The only assumption that we require for this test is that the dependent variable is at least ordinal, which is fulfilled for customer ranks. Hence we can move on to performing the test: kruskal.test(nps ~ retargeting, data = customer_data_c) ## ## Kruskal-Wallis rank sum test ## ## data: nps by retargeting ## Kruskal-Wallis chi-squared = 120.93, df = 2, p-value &lt; ## 0.00000000000000022 ggbetweenstats( data = customer_data_c, plot.type = &quot;box&quot;, x = retargeting, #3 groups y = nps, type = &quot;nonparametric&quot;, pairwise.comparisons = TRUE, pairwise.annotation = &quot;p.value&quot;, p.adjust.method = &quot;bonferroni&quot;, messages = FALSE, title = &quot;Median NPS for different retargeting groups&quot; ) The p-value is below 0.05 and thus we reject the null hypothesis of equal medians. This means that the NPS of customers is different for the groups that saw different types of ads, implying that the type of retargeting has an effect on the NPS. Even though the medians of ‘no retargeting’ and ‘generic retargeting’ groups are the same, we can see the distribution of NPS for both groups; it is clear that after being exposed to generic retargeting ads instead of no retargeting at all, customers give our website higher scores, which should be considered while making a managerial decision regarding which type of promotion to use. We should not forget to test for differences between groups using a post-hoc test. Nemenyi test for pairwise multiple comparisons of the ranked data can be used: library(PMCMRplus) PMCMRplus::kwAllPairsNemenyiTest(x = customer_data_c$nps, g = customer_data_c$retargeting, dist = &quot;Tukey&quot;) ## no retargeting generic retargeting ## generic retargeting 0.000017155029390 - ## dynamic retargeting 0.000000000000029 0.000000000175138 It appears that the differences between median NPS for “no retargeting vs. generic retargeting”, “generic retargeting vs. dynamic retargeting”, and “no retargeting vs. dynamic retargeting” are significant. Assignment 2d: Question 7 Load data customer_data_d &lt;- read.table(&quot;https://raw.githubusercontent.com/WU-RDS/MA2022/main/data/data_4.csv&quot;, sep = &quot;,&quot;, header = TRUE) #read in data # head(customer_data_d) str(customer_data_d) To find out if the new personalization feature has an effect on the conversion rate, we can use a test for proportions instead of a test for mean differences. To test for the equality of proportions (and therefore no difference between them) we can use a chi-square (\\(\\chi^2\\)) test. Our null hypothesis in this case states that the proportions of conversion are the same for groups with and without the personalization feature. Our alternative hypothesis states that these proportions are unequal. \\[H_0: \\pi_1 = \\pi_2 \\\\ H_1: \\pi_1 \\neq \\pi_2\\] First, we will recode the relevant variables into factors and give them more descriptive level names: customer_data_d$conversion &lt;- factor(customer_data_d$conversion, levels = c(0, 1), labels = c(&quot;no&quot;, &quot;yes&quot;)) customer_data_d$exp_group &lt;- factor(customer_data_d$exp_group, levels = c(0, 1), labels = c(&quot;control&quot;, &quot;treatment&quot;)) Don’t forget to create a summary plot to get a feeling for the data. #conditional relative frequencies rel_freq_table &lt;- as.data.frame(prop.table(table(customer_data_d$exp_group, customer_data_d$conversion), 1)) names(rel_freq_table) &lt;- c(&quot;group&quot;, &quot;conversion&quot;, &quot;freq&quot;) # changing names of the columns rel_freq_table library(colorspace) ggplot(rel_freq_table, aes(x = group, y = freq, fill = conversion)) + #plot data geom_col(width = .7) + geom_text(aes(label = paste0(round(freq*100,0), &quot;%&quot;)), position = position_stack(vjust = 0.5), size = 4) + #add percentages ylab(&quot;Proportion of conversions&quot;) + xlab(&quot;group&quot;) + # specify axis labels theme_minimal() + scale_fill_discrete_sequential(palette = &quot;Reds 2&quot;, nmax = 4, order = 2:4) We see that our conversion seems to be slightly better for the group with the personalization feature, but let´s check whether these proportions are significantly different. n1 &lt;- nrow(subset(customer_data_d, exp_group == &quot;control&quot;)) #number of observations for control group n2 &lt;- nrow(subset(customer_data_d, exp_group == &quot;treatment&quot;)) #number of observations for treatment group n1_conv &lt;- nrow(subset(customer_data_d, exp_group == &quot;control&quot; &amp; conversion == &quot;yes&quot;)) #number of conversions for control group n2_conv &lt;- nrow(subset(customer_data_d, exp_group == &quot;treatment&quot; &amp; conversion == &quot;yes&quot;)) #number of conversions for treatment group prop.test(x = c(n1_conv, n2_conv), n = c(n1, n2), conf.level = 0.95, correct = FALSE) #without Yates correction ## ## 2-sample test for equality of proportions without continuity correction ## ## data: c(n1_conv, n2_conv) out of c(n1, n2) ## X-squared = 7.3461, df = 1, p-value = 0.006721 ## alternative hypothesis: two.sided ## 95 percent confidence interval: ## -0.019121056 -0.003037661 ## sample estimates: ## prop 1 prop 2 ## 0.04100601 0.05208537 table_1 &lt;- table(customer_data_d$conversion, customer_data_d$exp_group) chisq.test(table_1, correct = FALSE) #without Yates correction ## ## Pearson&#39;s Chi-squared test ## ## data: table_1 ## X-squared = 7.3461, df = 1, p-value = 0.006721 test_stat &lt;- chisq.test(table_1, correct = FALSE)$statistic n &lt;- nrow(customer_data_d) phi1 &lt;- sqrt(test_stat/n) phi1 ## X-squared ## 0.02633293 It can be clearly seen from the test that p-value is &lt; 0.05, so the result of the treatment on the conversion rate is statistically significant. We also calculated the effect size (Cohen’s d = Cramer’s V = 0.026): it is pretty small. Finally, we can use ggbarstats() for the test results visualization: library(ggstatsplot) library(ghibli) ggbarstats(data = customer_data_d, x = conversion, y = exp_group, title = &quot;Conversion by experiment group&quot;, xlab = &quot;Group&quot;, correct = TRUE, messages = FALSE, bar.proptest = FALSE, bf.message = FALSE) + scale_fill_ghibli_d(&quot;PonyoLight&quot;) + theme_minimal() The test (as well as the graph above) shows that the conversion rate for the treatment group was higher than for the control group by 1 p.p. This difference is though significant: \\(\\chi^2\\) (1) = 7.35, p &lt; .05 (95% CI = [0.003,0.02]), but the effect size is rather tiny (Cohen’s d = 0.026), so the personalization feature can be considered positive, but not too influential factor for conversion rate increase. 10.4 Assignment 3: Solution Assignment A: Multiple linear regression library(tidyverse) library(psych) library(Hmisc) library(ggstatsplot) library(ggcorrplot) library(car) library(lmtest) library(lm.beta) options(scipen = 999) set.seed(123) sales_data &lt;- read.table(&quot;https://raw.githubusercontent.com/WU-RDS/MA2022/main/data/assignment4.dat&quot;, sep = &quot;\\t&quot;, header = TRUE) #read in data sales_data$market_id &lt;- 1:nrow(sales_data) # head(sales_data) str(sales_data) Question 1 In a first step, we specify the regression equation. In this case, sales is the dependent variable which is regressed on the different types of advertising expenditures that represent the independent variables for product i. Thus, the regression equation is: \\[Sales_{i}=\\beta_0 + \\beta_1 * tv\\_adspend_{i} + \\beta_2 * online\\_adspend_{i} + \\beta_3 * radio\\_adspend_{i} + \\epsilon_i\\] This equation will be used later to turn the output of the regression analysis (namely the coefficients: \\(\\beta_0\\) - intersect coefficient, and \\(\\beta_1\\), \\(\\beta_2\\), and \\(\\beta_3\\) that represent the unknown relationship between sales and advertising expenditures on TV, online channels and radio, respectively) to the “managerial” form and draw marketing conclusions. To save the formula, simply assign it to an object: formula &lt;- sales ~ tv_adspend + online_adspend + radio_adspend You can use this formula in the regression formula. Question 2 The descriptive statistics can be checked using the describe() function: psych::describe(sales_data) ## vars n mean sd median trimmed mad min max range skew ## tv_adspend 1 236 148.65 89.77 141.85 147.45 117.27 1.1 299.6 298.5 0.12 ## online_adspend 2 236 25.61 14.33 24.35 24.70 14.53 1.6 74.9 73.3 0.61 ## radio_adspend 3 236 27.70 12.57 27.00 27.36 13.34 2.0 63.0 61.0 0.22 ## sales 4 236 14.83 5.40 14.15 14.72 5.93 1.4 29.0 27.6 0.16 ## market_id 5 236 118.50 68.27 118.50 118.50 87.47 1.0 236.0 235.0 0.00 ## kurtosis se ## tv_adspend -1.26 5.84 ## online_adspend 0.08 0.93 ## radio_adspend -0.53 0.82 ## sales -0.57 0.35 ## market_id -1.22 4.44 Inspecting the correlation matrix reveals that the sales variable is positively correlated with TV advertising and online advertising expenditures. The correlations among the independent variables appear to be low to moderate. rcorr(as.matrix(sales_data[, c(&quot;sales&quot;, &quot;tv_adspend&quot;, &quot;online_adspend&quot;, &quot;radio_adspend&quot;)])) ## sales tv_adspend online_adspend radio_adspend ## sales 1.00 0.78 0.54 -0.04 ## tv_adspend 0.78 1.00 0.05 0.03 ## online_adspend 0.54 0.05 1.00 -0.07 ## radio_adspend -0.04 0.03 -0.07 1.00 ## ## n= 236 ## ## ## P ## sales tv_adspend online_adspend radio_adspend ## sales 0.0000 0.0000 0.5316 ## tv_adspend 0.0000 0.4127 0.6735 ## online_adspend 0.0000 0.4127 0.2790 ## radio_adspend 0.5316 0.6735 0.2790 Since we have continuous variables, we use scatterplots to investigate the relationship between sales and each of the predictor variables. ggplot(sales_data, aes(x = tv_adspend, y = sales)) + geom_point(shape = 1) + geom_smooth(method = &quot;lm&quot;, fill = &quot;gray&quot;, color = &quot;lavenderblush3&quot;, alpha = 0.1) + theme_minimal() ggplot(sales_data, aes(x = online_adspend, y = sales)) + geom_point(shape = 1) + geom_smooth(method = &quot;lm&quot;, fill = &quot;gray&quot;, color = &quot;lavenderblush3&quot;, alpha = 0.1) + theme_minimal() ggplot(sales_data, aes(x = radio_adspend, y = sales)) + geom_point(shape = 1) + geom_smooth(method = &quot;lm&quot;, fill = &quot;gray&quot;, color = &quot;lavenderblush3&quot;, alpha = 0.1) + theme_minimal() The plots including the fitted lines from a simple linear model already suggest that there might be a positive linear relationship between sales and TV- and online-advertising. However, there does not appear to be a strong relationship between sales and radio advertising. Further steps include estimate of a multiple linear regression model in order to determine the relative influence of each type of advertising on sales and test of the model’s assumptions. Question 3 The estimate the model, we will use the lm() function: linear_model &lt;- lm(formula, data = sales_data) #estimate linear model # summary(linear_model) Before we can inspect the results, we need to test if there might be potential problems with our model specification. Outliers To check for outliers, we extract the studentized residuals from our model and test if there are any absolute values larger than 3. sales_data$stud_resid &lt;- rstudent(linear_model) plot(1:nrow(sales_data), sales_data$stud_resid, ylim = c(-3.3, 3.3)) abline(h = c(-3, 3), col = &quot;red&quot;, lty = 2) Since there are no residuals with absolute values larger than 3, we conclude that there are no severe outliers. Influential observations To test for influential observations, we use Cook’s Distance. You may use the following two plots to verify if any Cook’s Distance values are larger than the cutoff of 1. plot(linear_model, 4) plot(linear_model, 5) Since all values are well below the cutoff, we conclude that influential observations are not a problem in our model. Non-linear relationships Next, we test if a linear specification appears feasible. You could test this using the added variable plots: avPlots(linear_model, col.lines = palette()[2]) The plots suggest that the linear specification is appropriate. In addition, you could also use the residuals plot to see if the linear specification is appropriate. The red line is a smoothed curve through the residuals plot and if it deviates from the dashed grey horizontal line a lot, this would suggest that a linear specification is not appropriate. plot(linear_model, 1) In this example, the red line is close to the dashed grey line, so the linear specification appears reasonable. Heteroscedasticity Next, we test if the residual variance is approximately the same at all levels of the predicted outcome variables (i.e., homoscedasticity). To do this, we use the residuals plot again. plot(linear_model, 1) The spread of residuals at different levels of the predicted outcome does not appear to be very different. Thus, we can conclude that heteroscedasticity is unlikely to be a problem. We can also confirm this conclusion by using the Breusch-Pagan test, which shows an insignificant results, meaning that we cannot reject the Null Hypothesis of equal variances. bptest(linear_model) ## ## studentized Breusch-Pagan test ## ## data: linear_model ## BP = 1.7583, df = 3, p-value = 0.6241 Non-normally distributed errors Next, we test if the residuals are approximately normally distributed using the Q-Q plot from the output: plot(linear_model, 2) The Q-Q plot does not suggest a severe deviation from a normal distribution. This could also be validated using the Shapiro test (we again can’t reject the Null Hypothesis that suggests normal distribution): shapiro.test(resid(linear_model)) ## ## Shapiro-Wilk normality test ## ## data: resid(linear_model) ## W = 0.99412, p-value = 0.4875 Correlation of errors We actually wouldn’t need to test this assumption here since there is not natural order in the data. Multicollinearity To test for linear dependence of the regressors, we first test the bivariate correlations for any extremely high correlations (i.e., &gt;0.8). rcorr(as.matrix(sales_data[, c(&quot;tv_adspend&quot;, &quot;online_adspend&quot;, &quot;radio_adspend&quot;)])) ## tv_adspend online_adspend radio_adspend ## tv_adspend 1.00 0.05 0.03 ## online_adspend 0.05 1.00 -0.07 ## radio_adspend 0.03 -0.07 1.00 ## ## n= 236 ## ## ## P ## tv_adspend online_adspend radio_adspend ## tv_adspend 0.4127 0.6735 ## online_adspend 0.4127 0.2790 ## radio_adspend 0.6735 0.2790 The results show that the bivariate correlations are low to moderate. This can also be shown in plots: plot(sales_data[,c(&quot;tv_adspend&quot;,&quot;online_adspend&quot;,&quot;radio_adspend&quot;)]) ggcorrmat( data = sales_data[,c(&quot;tv_adspend&quot;, &quot;online_adspend&quot;, &quot;radio_adspend&quot;)], matrix.type = &quot;upper&quot;, colors = c(&quot;skyblue4&quot;, &quot;white&quot;, &quot;palevioletred4&quot;) #title = &quot;Correlalogram of independent variables&quot;, ) In the next step, we compute the variance inflation factor for each predictor variable. The values should be close to 1 and values larger than 4 indicate potential problems with the linear dependence of regressors. vif(linear_model) ## tv_adspend online_adspend radio_adspend ## 1.003873 1.008157 1.006028 Here, all VIF values are well below the cutoff, indicating that there are no problems with multicollinearity. Question 4 In a next step, we will investigate the results from the model using the summary() function. summary(linear_model) ## ## Call: ## lm(formula = formula, data = sales_data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -5.1113 -1.4161 -0.0656 1.3233 5.5198 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3.604140 0.460057 7.834 0.000000000000169 *** ## tv_adspend 0.045480 0.001491 30.508 &lt; 0.0000000000000002 *** ## online_adspend 0.186859 0.009359 19.965 &lt; 0.0000000000000002 *** ## radio_adspend -0.011469 0.010656 -1.076 0.283 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.048 on 232 degrees of freedom ## Multiple R-squared: 0.8582, Adjusted R-squared: 0.8564 ## F-statistic: 468.1 on 3 and 232 DF, p-value: &lt; 0.00000000000000022 For each of the individual predictors, we test the following hypothesis: \\[H_0: \\beta_k=0\\] \\[H_1: \\beta_k\\ne0\\] where k denotes the number of the regression coefficient. In the present example, we reject the null hypothesis for tv_adspend and online_adspend, where we observe a significant effect (i.e., p &lt; 0.05). However, we fail to reject the null for the “radio_adspend” variable (i.e., the effect is insignificant). The interpretation of the coefficients is as follows: tv_adspend (β1): when TV advertising expenditures increase by 1000 Euro, sales will increase by 45 units; online_adspend (β2): when online advertising expenditures increase by 1000 Euro, sales will increase by 187 units; radio_adspend (β3): when radio advertising expenditures increase by 1000 Euro, sales will increase by -11 units (i.e., decrease by 11 units). You should always provide a measure of uncertainty that is associated with the estimates. You could compute the confidence intervals around the coefficients using the confint() function. confint(linear_model) ## 2.5 % 97.5 % ## (Intercept) 2.69771633 4.51056393 ## tv_adspend 0.04254244 0.04841668 ## online_adspend 0.16841843 0.20529924 ## radio_adspend -0.03246402 0.00952540 The results show that, for example, with a 95% probability the effect of online advertising will be between 0.168 and 0.205. Although the variables are measured on the same scale, you should still test the relative influence by inspecting the standardized coefficients that express the effects in terms of standard deviations. lm.beta(linear_model) ## ## Call: ## lm(formula = formula, data = sales_data) ## ## Standardized Coefficients:: ## (Intercept) tv_adspend online_adspend radio_adspend ## NA 0.75566632 0.49556807 -0.02668878 Here, we conclude that TV advertising has the largest ROI followed by online advertising and radio advertising (that actually has negative effect). Another significance test is the F-test. It tests the null hypothesis: \\[H_0: R^2=0\\] This is equivalent to the following null hypothesis: \\[H_0: \\beta_1=\\beta_2=\\beta_3=\\beta_k=0\\] The result of the test is provided in the output above (F-statistic: 468.1 on 3 and 232 DF, p-value: &lt; 2.2e-16). Since the p-value is smaller than 0.05, we reject the null hypothesis that all coefficients are zero. Regarding the model fit, the R2 statistic tells us that approximately 86% of the variance can be explained by the model. This can be visualized as follows: sales_data$yhat &lt;- predict(linear_model) ggplot(sales_data, aes(yhat, sales)) + geom_point(size = 2, shape = 1) + scale_x_continuous(name = &quot;predicted values&quot;) + scale_y_continuous(name = &quot;observed values&quot;) + geom_abline(intercept = 0, slope = 1) + theme_minimal() Of course, you could have also used the functions included in the ggstatsplot package to report the results from your regression model. ggcoefstats(x = linear_model, k = 3, title = &quot;Sales predicted by adspend, airplay, &amp; starpower&quot;) Question 5 Finally, we can predict the outcome for the given marketing mix using the following equation: \\[\\hat{Sales} = \\beta_0 + \\beta_1*150 + \\beta_2*26 + \\beta_3*15 \\] The coefficients can be extracted from the summary of the linear model and used for quick sales value prediction as follows: summary(linear_model)$coefficients[1, 1] + summary(linear_model)$coefficients[2, 1] * 150 + summary(linear_model)$coefficients[3, 1] * 26 + summary(linear_model)$coefficients[4, 1] * 15 ## [1] 15.11236 \\[\\hat{sales}= 3.6 + 0.045*150 + 0.187*26 + (-0.011)*15 = 15.11\\] This means that given the planned marketing mix, we would expect to sell around 15,112 units. Equivalently one can use the predict function predict(linear_model, data.frame(tv_adspend = 150, online_adspend = 26, radio_adspend = 15)) ## 1 ## 15.11236 Assignment B: Logistic regression music_data &lt;- read.csv2(&quot;https://raw.githubusercontent.com/WU-RDS/RMA2022/main/data/music_data_group.csv&quot;, sep = &quot;;&quot;, header = TRUE, dec = &quot;,&quot;) music_data$genre &lt;- as.factor(music_data$genre) music_data$label &lt;- as.factor(music_data$label) # str(music_data) Question 1 For this model, we need to consider the logistic function, so the final mathematical representation (with three main predictors of interest so far) would look as follows: \\[f(\\mathbf{X}) = P(y_i = 1) = \\frac{1}{1 + e^{-(\\beta_0 + \\beta_1 * x_{1,i} + \\beta_2 * x_{2,i} +\\beta_3 * x_{3,i})}}\\] where \\(\\beta_0\\) is the intercept coefficient, and \\(\\beta_1\\), \\(\\beta_2\\), and \\(\\beta_3\\) represent the parameters of our model: weeks in charts, age of song, and label. We should create the model using glm() and have a look at the summary: mult_logit_model &lt;- glm(top10 ~ weeks_in_charts + song_age + label, family = binomial(link = &quot;logit&quot;), data = music_data) summary(mult_logit_model) ## ## Call: ## glm(formula = top10 ~ weeks_in_charts + song_age + label, family = binomial(link = &quot;logit&quot;), ## data = music_data) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -5.6045 -0.3220 -0.2694 -0.2028 3.8245 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -3.78534560 0.03989841 -94.88 &lt;0.0000000000000002 *** ## weeks_in_charts 0.01254730 0.00013573 92.45 &lt;0.0000000000000002 *** ## song_age -0.00122201 0.00009152 -13.35 &lt;0.0000000000000002 *** ## labelSony Music 0.59344756 0.04967676 11.95 &lt;0.0000000000000002 *** ## labelUniversal Music 0.86912676 0.04284308 20.29 &lt;0.0000000000000002 *** ## labelWarner Music 0.52810825 0.05383487 9.81 &lt;0.0000000000000002 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 43430 on 66795 degrees of freedom ## Residual deviance: 27523 on 66790 degrees of freedom ## AIC: 27535 ## ## Number of Fisher Scoring iterations: 6 confint(mult_logit_model) ## Waiting for profiling to be done... ## 2.5 % 97.5 % ## (Intercept) -3.864138137 -3.707725224 ## weeks_in_charts 0.012282716 0.012814786 ## song_age -0.001404812 -0.001046036 ## labelSony Music 0.496029832 0.690783386 ## labelUniversal Music 0.785399531 0.953358727 ## labelWarner Music 0.422364414 0.633423323 From the summary of the model we can see that weeks in charts, age of song, and label can be used to predict if a song will end up in top-10 or not. We can also assess the model fit: logisticPseudoR2s &lt;- function(LogModel) { dev &lt;- LogModel$deviance nullDev &lt;- LogModel$null.deviance modelN &lt;- length(LogModel$fitted.values) R.l &lt;- 1 - dev/nullDev R.cs &lt;- 1 - exp(-(nullDev - dev)/modelN) R.n &lt;- R.cs/(1 - (exp(-(nullDev/modelN)))) cat(&quot;Pseudo R^2 for logistic regression\\n&quot;) cat(&quot;Hosmer and Lemeshow R^2 &quot;, round(R.l, 3), &quot;\\n&quot;) cat(&quot;Cox and Snell R^2 &quot;, round(R.cs, 3), &quot;\\n&quot;) cat(&quot;Nagelkerke R^2 &quot;, round(R.n, 3), &quot;\\n&quot;) } # Inspect Pseudo R2s logisticPseudoR2s(mult_logit_model) ## Pseudo R^2 for logistic regression ## Hosmer and Lemeshow R^2 0.366 ## Cox and Snell R^2 0.212 ## Nagelkerke R^2 0.443 To make conclusions about the effect that predictors have on success, we should convert the log-odds ratios to odds ratios using exp() function: exp(coef(mult_logit_model)) ## (Intercept) weeks_in_charts song_age ## 0.02270102 1.01262635 0.99877873 ## labelSony Music labelUniversal Music labelWarner Music ## 1.81021850 2.38482742 1.69572138 The results tell us, for example, that when a song is one week older, it is slightly less likely to get to the top-10 chart. If we are concerned about the labels to which the songs belong, we can see that in comparison to rather unknown (independent) labels, songs from Universal are 2.38 times more likely to appear in the top-10 chart. We should visualize the relationship between IVs and DV: ggplot(music_data, aes(weeks_in_charts, top10)) + geom_point(shape = 1) + geom_smooth(method = &quot;glm&quot;, method.args = list(family = &quot;binomial&quot;), se = FALSE, color = &quot;lavenderblush3&quot;) + theme_minimal() ## `geom_smooth()` using formula = &#39;y ~ x&#39; ggplot(music_data, aes(song_age, top10)) + geom_point(shape = 1) + geom_smooth(method = &quot;glm&quot;, method.args = list(family = &quot;binomial&quot;), se = FALSE, color = &quot;lavenderblush3&quot;) + theme_minimal() ## `geom_smooth()` using formula = &#39;y ~ x&#39; There are several ways of plotting the effect of factor variables. Let’s do it as follows to gain a better understanding of predicted values in logistic regression: library(forcats) labels &lt;- as.factor(c(&quot;Warner Music&quot;, &quot;Sony Music&quot;, &quot;Independent&quot;, &quot;Universal Music&quot;)) top10_predictions &lt;- data.frame(pred = predict(glm(top10 ~ label, data = music_data), data.frame(label = labels), type = &quot;response&quot;), label = labels) top10_counts &lt;- table(music_data$top10, music_data$label) top10_share &lt;- prop.table(top10_counts, margin = 2) data.frame(top10_share) |&gt; dplyr::filter(Var1 == 1) |&gt; left_join(top10_predictions, by = c(Var2 = &quot;label&quot;)) |&gt; dplyr::rename(Share = Freq) |&gt; ggplot(aes(fct_reorder(Var2, Share), Share)) + geom_bar(stat = &quot;identity&quot;, fill = &quot;lavenderblush3&quot;) + geom_point(aes(x = Var2, y = pred), color = &quot;red4&quot;) + theme_minimal() + theme(axis.title.x = element_blank()) For factor variables, it would be also fine to plot the proportion plots (e.g., using ggbarstats() or prop.table() functions) as far as when considered separately, factor levels’ proportions represent the exact probability of getting the 1 probability of a DV. To find out which other variables might have a significant effect on the chart performance, we can either load variables one-by-one manually or use a step-wise approach. For the latter, we basically need a model to start with (usually it’s a “null” model, however, we already have a model that works for us, i.e., mult_logit_model) and the most loaded model that includes all the variables (we will only drop all character and date variables). Let’s create it in the next step (please note that we already drop some variables that potentially might be influenced if a song appears in top-10: streams, sp_popularity, n_regions, etc.) music_data$explicit &lt;- factor(music_data$explicit, levels = c(0,1), labels = c(&quot;not explicit&quot;, &quot;explicit&quot;)) full_model &lt;- glm(top10 ~ weeks_in_charts + song_age + label + #our basic model. Next we add the rest of the variables to it: danceability + energy + speechiness + instrumentalness + liveness + valence + tempo + song_length + explicit + n_playlists + genre, family = binomial(link = &#39;logit&#39;), data = music_data) Let’s have a look at how the fullest model possible works: summary(full_model) ## ## Call: ## glm(formula = top10 ~ weeks_in_charts + song_age + label + danceability + ## energy + speechiness + instrumentalness + liveness + valence + ## tempo + song_length + explicit + n_playlists + genre, family = binomial(link = &quot;logit&quot;), ## data = music_data) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -5.4936 -0.3174 -0.2192 -0.1425 4.5267 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -8.234476683 6.600555763 -1.248 0.2122 ## weeks_in_charts 0.012805679 0.000146602 87.350 &lt; 0.0000000000000002 *** ## song_age -0.001926650 0.000114801 -16.783 &lt; 0.0000000000000002 *** ## labelSony Music 0.309879886 0.053399277 5.803 0.00000000651 *** ## labelUniversal Music 0.499093803 0.048106669 10.375 &lt; 0.0000000000000002 *** ## labelWarner Music 0.258651532 0.057686712 4.484 0.00000733501 *** ## danceability 0.013853338 0.001511801 9.163 &lt; 0.0000000000000002 *** ## energy -0.005334606 0.001202794 -4.435 0.00000919959 *** ## speechiness -0.003606707 0.001622321 -2.223 0.0262 * ## instrumentalness -0.002757251 0.002982653 -0.924 0.3553 ## liveness 0.005200933 0.001189734 4.372 0.00001233918 *** ## valence 0.001499900 0.000934395 1.605 0.1084 ## tempo 0.002969109 0.000619852 4.790 0.00000166755 *** ## song_length -0.290130550 0.026500912 -10.948 &lt; 0.0000000000000002 *** ## explicitexplicit -0.704911363 0.073710237 -9.563 &lt; 0.0000000000000002 *** ## n_playlists 0.000268906 0.000008005 33.593 &lt; 0.0000000000000002 *** ## genreCountry 6.047536675 6.599669764 0.916 0.3595 ## genreElectro/Dance 4.619610060 6.598946035 0.700 0.4839 ## genreGerman Folk 3.391558357 6.604926105 0.513 0.6076 ## genreHipHop/Rap 4.562287429 6.598559475 0.691 0.4893 ## genreother 5.425089472 6.598558812 0.822 0.4110 ## genrePop 4.004199096 6.598387935 0.607 0.5440 ## genreR&amp;B 5.016578570 6.598943542 0.760 0.4471 ## genreReggae 4.454352459 6.610053417 0.674 0.5004 ## genreRock 4.145180994 6.598981122 0.628 0.5299 ## genreSoundtrack 4.901752648 6.601845142 0.742 0.4578 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 43430 on 66795 degrees of freedom ## Residual deviance: 24891 on 66770 degrees of freedom ## AIC: 24943 ## ## Number of Fisher Scoring iterations: 9 We don’t really need to go too much in details and apply step-by-step comparisons of the models using the suggested variables, so we can pick five significant factors from the summary above. For example, we can proceed with the model as follows: final_model &lt;- glm(top10 ~ weeks_in_charts + song_age + label + #our basic model. Next we add the rest of the variables to it: danceability + liveness + tempo + song_length + n_playlists, family = binomial(link = &#39;logit&#39;), data = music_data) summary(final_model) ## ## Call: ## glm(formula = top10 ~ weeks_in_charts + song_age + label + danceability + ## liveness + tempo + song_length + n_playlists, family = binomial(link = &quot;logit&quot;), ## data = music_data) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -5.4825 -0.3163 -0.2419 -0.1724 4.5433 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -4.490099261 0.172198935 -26.075 &lt; 0.0000000000000002 *** ## weeks_in_charts 0.012594243 0.000141167 89.215 &lt; 0.0000000000000002 *** ## song_age -0.001977611 0.000117389 -16.847 &lt; 0.0000000000000002 *** ## labelSony Music 0.441955048 0.050888299 8.685 &lt; 0.0000000000000002 *** ## labelUniversal Music 0.624039605 0.044146953 14.136 &lt; 0.0000000000000002 *** ## labelWarner Music 0.376806825 0.055148947 6.833 0.0000000000083430 *** ## danceability 0.017307850 0.001345825 12.860 &lt; 0.0000000000000002 *** ## liveness 0.008612684 0.001138928 7.562 0.0000000000000397 *** ## tempo 0.003637005 0.000610442 5.958 0.0000000025536638 *** ## song_length -0.315709255 0.025965257 -12.159 &lt; 0.0000000000000002 *** ## n_playlists 0.000260104 0.000007804 33.330 &lt; 0.0000000000000002 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 43430 on 66795 degrees of freedom ## Residual deviance: 25856 on 66785 degrees of freedom ## AIC: 25878 ## ## Number of Fisher Scoring iterations: 7 logisticPseudoR2s(final_model) ## Pseudo R^2 for logistic regression ## Hosmer and Lemeshow R^2 0.405 ## Cox and Snell R^2 0.231 ## Nagelkerke R^2 0.484 exp(coef(final_model)) ## (Intercept) weeks_in_charts song_age ## 0.01121953 1.01267388 0.99802434 ## labelSony Music labelUniversal Music labelWarner Music ## 1.55574581 1.86645257 1.45762271 ## danceability liveness tempo ## 1.01745850 1.00864988 1.00364363 ## song_length n_playlists ## 0.72927145 1.00026014 # confint(final_model) The interpretation of odds ratios stays the same (and should be discussed in your solution). Alternatively, some used average partial effect as means of model interpretation: library(mfx) ## Loading required package: sandwich ## Loading required package: betareg # Average partial effect logitmfx(final_model, data = music_data, atmean = FALSE) ## Call: ## logitmfx(formula = final_model, data = music_data, atmean = FALSE) ## ## Marginal Effects: ## dF/dx Std. Err. z ## weeks_in_charts 0.00065127618 0.00001374186 47.3936 ## song_age -0.00010226667 0.00000631172 -16.2027 ## labelSony Music 0.02493232144 0.00312422560 7.9803 ## labelUniversal Music 0.03427289513 0.00257631776 13.3031 ## labelWarner Music 0.02113194448 0.00334627810 6.3151 ## danceability 0.00089502724 0.00007104537 12.5980 ## liveness 0.00044538097 0.00005937804 7.5008 ## tempo 0.00018807759 0.00003171436 5.9304 ## song_length -0.01632602458 0.00136992030 -11.9175 ## n_playlists 0.00001345055 0.00000046827 28.7241 ## P&gt;|z| ## weeks_in_charts &lt; 0.00000000000000022 *** ## song_age &lt; 0.00000000000000022 *** ## labelSony Music 0.00000000000000146 *** ## labelUniversal Music &lt; 0.00000000000000022 *** ## labelWarner Music 0.00000000027005798 *** ## danceability &lt; 0.00000000000000022 *** ## liveness 0.00000000000006344 *** ## tempo 0.00000000302271850 *** ## song_length &lt; 0.00000000000000022 *** ## n_playlists &lt; 0.00000000000000022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## dF/dx is for discrete change for the following variables: ## ## [1] &quot;labelSony Music&quot; &quot;labelUniversal Music&quot; &quot;labelWarner Music&quot; Please note that these coefficients are interpreted as follows: if a song is one week older, the probability of this song appearing in top-10 chart decreases by 0.01 pp (percentage points). There was a typo on the website, thus the “pp” was lost. The plots for the remaining variables can be created analogously to the ones above. If we still want to choose a parsimonious model using step-wise comparisons, we can do it as follows: the function below takes the “base” model, adds variables from the fullest model one-by-one to it, and shows the new models’ performance: step(mult_logit_model, #our base model scope = list(upper = full_model), direction = &quot;both&quot;, test = &quot;Chisq&quot;, data = music_data) ## Start: AIC=27535.11 ## top10 ~ weeks_in_charts + song_age + label ## ## Df Deviance AIC LRT Pr(&gt;Chi) ## + n_playlists 1 26335 26349 1187.9 &lt; 0.00000000000000022 *** ## + genre 10 26504 26536 1019.5 &lt; 0.00000000000000022 *** ## + danceability 1 27256 27270 267.1 &lt; 0.00000000000000022 *** ## + song_length 1 27335 27349 187.9 &lt; 0.00000000000000022 *** ## + explicit 1 27376 27390 146.8 &lt; 0.00000000000000022 *** ## + valence 1 27445 27459 77.7 &lt; 0.00000000000000022 *** ## + liveness 1 27480 27494 42.9 0.00000000005728 *** ## + tempo 1 27504 27518 19.4 0.00001085601584 *** ## + speechiness 1 27510 27524 12.9 0.0003209 *** ## + instrumentalness 1 27516 27530 7.2 0.0071563 ** ## + energy 1 27519 27533 3.8 0.0523575 . ## &lt;none&gt; 27523 27535 ## - song_age 1 27781 27791 258.3 &lt; 0.00000000000000022 *** ## - label 3 27963 27969 439.7 &lt; 0.00000000000000022 *** ## - weeks_in_charts 1 43159 43169 15635.8 &lt; 0.00000000000000022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Step: AIC=26349.16 ## top10 ~ weeks_in_charts + song_age + label + n_playlists ## ## Df Deviance AIC LRT Pr(&gt;Chi) ## + genre 10 25312 25346 1023.2 &lt; 0.00000000000000022 *** ## + song_length 1 26086 26102 248.7 &lt; 0.00000000000000022 *** ## + danceability 1 26112 26128 222.7 &lt; 0.00000000000000022 *** ## + explicit 1 26175 26191 160.3 &lt; 0.00000000000000022 *** ## + valence 1 26240 26256 95.2 &lt; 0.00000000000000022 *** ## + liveness 1 26293 26309 41.7 0.0000000001046 *** ## + tempo 1 26314 26330 21.4 0.0000036320174 *** ## + speechiness 1 26322 26338 13.0 0.0003193 *** ## + instrumentalness 1 26329 26345 6.3 0.0118075 * ## &lt;none&gt; 26335 26349 ## + energy 1 26334 26350 1.1 0.2954805 ## - label 3 26565 26573 230.1 &lt; 0.00000000000000022 *** ## - song_age 1 27044 27056 708.7 &lt; 0.00000000000000022 *** ## - n_playlists 1 27523 27535 1187.9 &lt; 0.00000000000000022 *** ## - weeks_in_charts 1 40541 40553 14206.0 &lt; 0.00000000000000022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Step: AIC=25345.92 ## top10 ~ weeks_in_charts + song_age + label + n_playlists + genre ## ## Df Deviance AIC LRT Pr(&gt;Chi) ## + song_length 1 25133 25169 178.5 &lt; 0.00000000000000022 *** ## + danceability 1 25185 25221 127.3 &lt; 0.00000000000000022 *** ## + explicit 1 25206 25242 106.0 &lt; 0.00000000000000022 *** ## + valence 1 25278 25314 34.4 0.000000004499 *** ## + tempo 1 25301 25337 11.4 0.000753 *** ## + liveness 1 25302 25338 9.8 0.001713 ** ## &lt;none&gt; 25312 25346 ## + energy 1 25310 25346 1.7 0.195014 ## + instrumentalness 1 25310 25346 1.6 0.202913 ## + speechiness 1 25312 25348 0.0 0.884998 ## - label 3 25474 25502 161.7 &lt; 0.00000000000000022 *** ## - song_age 1 25913 25945 600.6 &lt; 0.00000000000000022 *** ## - genre 10 26335 26349 1023.2 &lt; 0.00000000000000022 *** ## - n_playlists 1 26504 26536 1191.7 &lt; 0.00000000000000022 *** ## - weeks_in_charts 1 39511 39543 14199.3 &lt; 0.00000000000000022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Step: AIC=25169.45 ## top10 ~ weeks_in_charts + song_age + label + n_playlists + genre + ## song_length ## ## Df Deviance AIC LRT Pr(&gt;Chi) ## + explicit 1 25029 25067 104.2 &lt; 0.00000000000000022 *** ## + danceability 1 25050 25088 83.6 &lt; 0.00000000000000022 *** ## + valence 1 25119 25157 14.6 0.0001309 *** ## + tempo 1 25121 25159 12.6 0.0003769 *** ## + liveness 1 25125 25163 8.1 0.0045244 ** ## + instrumentalness 1 25131 25169 2.3 0.1276459 ## + energy 1 25131 25169 2.2 0.1340637 ## &lt;none&gt; 25133 25169 ## + speechiness 1 25132 25170 1.4 0.2289231 ## - label 3 25273 25303 139.3 &lt; 0.00000000000000022 *** ## - song_length 1 25312 25346 178.5 &lt; 0.00000000000000022 *** ## - song_age 1 25647 25681 513.9 &lt; 0.00000000000000022 *** ## - genre 10 26086 26102 953.0 &lt; 0.00000000000000022 *** ## - n_playlists 1 26385 26419 1251.7 &lt; 0.00000000000000022 *** ## - weeks_in_charts 1 39507 39541 14373.3 &lt; 0.00000000000000022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Step: AIC=25067.21 ## top10 ~ weeks_in_charts + song_age + label + n_playlists + genre + ## song_length + explicit ## ## Df Deviance AIC LRT Pr(&gt;Chi) ## + danceability 1 24948 24988 81.3 &lt; 0.00000000000000022 *** ## + valence 1 25016 25056 13.6 0.0002280 *** ## + tempo 1 25017 25057 11.8 0.0005785 *** ## + liveness 1 25022 25062 7.4 0.0067056 ** ## + energy 1 25026 25066 3.6 0.0574725 . ## &lt;none&gt; 25029 25067 ## + speechiness 1 25028 25068 1.6 0.2008558 ## + instrumentalness 1 25028 25068 1.3 0.2576454 ## - label 3 25130 25162 100.3 &lt; 0.00000000000000022 *** ## - explicit 1 25133 25169 104.2 &lt; 0.00000000000000022 *** ## - song_length 1 25206 25242 176.7 &lt; 0.00000000000000022 *** ## - song_age 1 25542 25578 513.2 &lt; 0.00000000000000022 *** ## - genre 10 25933 25951 904.0 &lt; 0.00000000000000022 *** ## - n_playlists 1 26278 26314 1248.5 &lt; 0.00000000000000022 *** ## - weeks_in_charts 1 39340 39376 14311.0 &lt; 0.00000000000000022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Step: AIC=24987.94 ## top10 ~ weeks_in_charts + song_age + label + n_playlists + genre + ## song_length + explicit + danceability ## ## Df Deviance AIC LRT Pr(&gt;Chi) ## + tempo 1 24928 24970 19.6 0.000009785 *** ## + liveness 1 24934 24976 13.5 0.0002356 *** ## + energy 1 24940 24982 8.3 0.0039206 ** ## + speechiness 1 24945 24987 2.5 0.1106956 ## &lt;none&gt; 24948 24988 ## + valence 1 24947 24989 0.7 0.4151639 ## + instrumentalness 1 24947 24989 0.6 0.4396889 ## - danceability 1 25029 25067 81.3 &lt; 0.00000000000000022 *** ## - explicit 1 25050 25088 101.9 &lt; 0.00000000000000022 *** ## - label 3 25059 25093 111.5 &lt; 0.00000000000000022 *** ## - song_length 1 25081 25119 133.5 &lt; 0.00000000000000022 *** ## - song_age 1 25405 25443 456.7 &lt; 0.00000000000000022 *** ## - genre 10 25804 25824 856.0 &lt; 0.00000000000000022 *** ## - n_playlists 1 26155 26193 1206.9 &lt; 0.00000000000000022 *** ## - weeks_in_charts 1 39182 39220 14233.6 &lt; 0.00000000000000022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Step: AIC=24970.39 ## top10 ~ weeks_in_charts + song_age + label + n_playlists + genre + ## song_length + explicit + danceability + tempo ## ## Df Deviance AIC LRT Pr(&gt;Chi) ## + liveness 1 24915 24959 13.1 0.0002929 *** ## + energy 1 24917 24961 11.1 0.0008776 *** ## + speechiness 1 24925 24969 3.8 0.0510498 . ## &lt;none&gt; 24928 24970 ## + instrumentalness 1 24928 24972 0.5 0.4726447 ## + valence 1 24928 24972 0.2 0.6876102 ## - tempo 1 24948 24988 19.6 0.000009785 *** ## - danceability 1 25017 25057 89.0 &lt; 0.00000000000000022 *** ## - explicit 1 25029 25069 100.8 &lt; 0.00000000000000022 *** ## - label 3 25042 25078 113.1 &lt; 0.00000000000000022 *** ## - song_length 1 25061 25101 133.0 &lt; 0.00000000000000022 *** ## - song_age 1 25379 25419 450.2 &lt; 0.00000000000000022 *** ## - genre 10 25771 25793 842.2 &lt; 0.00000000000000022 *** ## - n_playlists 1 26134 26174 1205.9 &lt; 0.00000000000000022 *** ## - weeks_in_charts 1 39149 39189 14220.7 &lt; 0.00000000000000022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Step: AIC=24959.27 ## top10 ~ weeks_in_charts + song_age + label + n_playlists + genre + ## song_length + explicit + danceability + tempo + liveness ## ## Df Deviance AIC LRT Pr(&gt;Chi) ## + energy 1 24899 24945 16.2 0.00005738 *** ## + speechiness 1 24911 24957 4.2 0.0393970 * ## &lt;none&gt; 24915 24959 ## + instrumentalness 1 24915 24961 0.6 0.4557895 ## + valence 1 24915 24961 0.0 0.9239797 ## - liveness 1 24928 24970 13.1 0.0002929 *** ## - tempo 1 24934 24976 19.1 0.00001211 *** ## - danceability 1 25010 25052 95.2 &lt; 0.00000000000000022 *** ## - explicit 1 25015 25057 99.8 &lt; 0.00000000000000022 *** ## - label 3 25029 25067 114.2 &lt; 0.00000000000000022 *** ## - song_length 1 25045 25087 129.7 &lt; 0.00000000000000022 *** ## - song_age 1 25363 25405 447.3 &lt; 0.00000000000000022 *** ## - genre 10 25719 25743 803.4 &lt; 0.00000000000000022 *** ## - n_playlists 1 26117 26159 1201.8 &lt; 0.00000000000000022 *** ## - weeks_in_charts 1 39140 39182 14224.6 &lt; 0.00000000000000022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Step: AIC=24945.09 ## top10 ~ weeks_in_charts + song_age + label + n_playlists + genre + ## song_length + explicit + danceability + tempo + liveness + ## energy ## ## Df Deviance AIC LRT Pr(&gt;Chi) ## + speechiness 1 24894 24942 4.7 0.02962 * ## + valence 1 24896 24944 2.6 0.10756 ## &lt;none&gt; 24899 24945 ## + instrumentalness 1 24898 24946 0.8 0.36187 ## - energy 1 24915 24959 16.2 0.00005738 *** ## - liveness 1 24917 24961 18.2 0.00001954 *** ## - tempo 1 24922 24966 22.5 0.00000212 *** ## - explicit 1 25002 25046 102.5 &lt; 0.00000000000000022 *** ## - danceability 1 25003 25047 104.1 &lt; 0.00000000000000022 *** ## - label 3 25013 25053 113.8 &lt; 0.00000000000000022 *** ## - song_length 1 25028 25072 128.9 &lt; 0.00000000000000022 *** ## - song_age 1 25353 25397 454.3 &lt; 0.00000000000000022 *** ## - genre 10 25711 25737 811.9 &lt; 0.00000000000000022 *** ## - n_playlists 1 26103 26147 1204.0 &lt; 0.00000000000000022 *** ## - weeks_in_charts 1 39113 39157 14214.1 &lt; 0.00000000000000022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Step: AIC=24942.35 ## top10 ~ weeks_in_charts + song_age + label + n_playlists + genre + ## song_length + explicit + danceability + tempo + liveness + ## energy + speechiness ## ## Df Deviance AIC LRT Pr(&gt;Chi) ## + valence 1 24892 24942 2.7 0.10031 ## &lt;none&gt; 24894 24942 ## + instrumentalness 1 24893 24943 1.0 0.31346 ## - speechiness 1 24899 24945 4.7 0.02962 * ## - energy 1 24911 24957 16.7 0.0000443660 *** ## - liveness 1 24913 24959 18.9 0.0000139497 *** ## - tempo 1 24918 24964 24.0 0.0000009465 *** ## - explicit 1 24997 25043 102.8 &lt; 0.00000000000000022 *** ## - danceability 1 25001 25047 106.3 &lt; 0.00000000000000022 *** ## - label 3 25006 25048 111.4 &lt; 0.00000000000000022 *** ## - song_length 1 25027 25073 132.4 &lt; 0.00000000000000022 *** ## - song_age 1 25353 25399 458.5 &lt; 0.00000000000000022 *** ## - genre 10 25707 25735 813.0 &lt; 0.00000000000000022 *** ## - n_playlists 1 26100 26146 1205.9 &lt; 0.00000000000000022 *** ## - weeks_in_charts 1 39038 39084 14143.7 &lt; 0.00000000000000022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Step: AIC=24941.65 ## top10 ~ weeks_in_charts + song_age + label + n_playlists + genre + ## song_length + explicit + danceability + tempo + liveness + ## energy + speechiness + valence ## ## Df Deviance AIC LRT Pr(&gt;Chi) ## &lt;none&gt; 24892 24942 ## - valence 1 24894 24942 2.7 0.10031 ## + instrumentalness 1 24891 24943 0.9 0.34466 ## - speechiness 1 24896 24944 4.8 0.02777 * ## - liveness 1 24910 24958 18.5 0.000016707 *** ## - energy 1 24911 24959 19.4 0.000010799 *** ## - tempo 1 24915 24963 23.0 0.000001661 *** ## - danceability 1 24978 25026 86.0 &lt; 0.00000000000000022 *** ## - explicit 1 24995 25043 102.9 &lt; 0.00000000000000022 *** ## - label 3 25003 25047 111.1 &lt; 0.00000000000000022 *** ## - song_length 1 25018 25066 126.5 &lt; 0.00000000000000022 *** ## - song_age 1 25351 25399 459.3 &lt; 0.00000000000000022 *** ## - genre 10 25694 25724 802.2 &lt; 0.00000000000000022 *** ## - n_playlists 1 26100 26148 1208.5 &lt; 0.00000000000000022 *** ## - weeks_in_charts 1 39018 39066 14126.6 &lt; 0.00000000000000022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: glm(formula = top10 ~ weeks_in_charts + song_age + label + n_playlists + ## genre + song_length + explicit + danceability + tempo + liveness + ## energy + speechiness + valence, family = binomial(link = &quot;logit&quot;), ## data = music_data) ## ## Coefficients: ## (Intercept) weeks_in_charts song_age ## -8.250268 0.012811 -0.001929 ## labelSony Music labelUniversal Music labelWarner Music ## 0.310207 0.500078 0.259754 ## n_playlists genreCountry genreElectro/Dance ## 0.000269 6.052952 4.617654 ## genreGerman Folk genreHipHop/Rap genreother ## 3.393965 4.565679 5.429574 ## genrePop genreR&amp;B genreReggae ## 4.007876 5.019629 4.456428 ## genreRock genreSoundtrack song_length ## 4.142870 4.896580 -0.289024 ## explicitexplicit danceability tempo ## -0.707333 0.013872 0.002971 ## liveness energy speechiness ## 0.005182 -0.005303 -0.003541 ## valence ## 0.001534 ## ## Degrees of Freedom: 66795 Total (i.e. Null); 66771 Residual ## Null Deviance: 43430 ## Residual Deviance: 24890 AIC: 24940 10.5 Assignment 4: Solution Assignment A: Factor Analysis Load data library(ggplot2) library(psych) library(dplyr) library(ggiraph) library(ggiraphExtra) library(NbClust) library(factoextra) library(GPArotation) music_data_pca &lt;- read.csv2(&quot;https://raw.githubusercontent.com/WU-RDS/RMA2022/main/data/pca_data.csv&quot;, sep = &quot;,&quot;, header = TRUE, dec = &quot;.&quot;) Create the subset for PCA: pca_data &lt;- music_data_pca |&gt; dplyr::select(c(&quot;log_n_playlists&quot;, &quot;log_streams&quot;, &quot;log_youtube_views&quot;, &quot;log_tiktok_counts&quot;, &quot;log_ins_followers_artist&quot;, &quot;log_monthly_listeners_artist&quot;, &quot;log_playlist_total_reach_artist&quot;, &quot;log_sp_fans_artist&quot;, &quot;log_shazam_counts&quot;)) As a starting point, we examine the correlation matrix and the correlation plot to make sure that the correlations between variables are acceptable: pca_matrix &lt;- cor(pca_data) # round(pca_matrix, 3) correlations &lt;- as.data.frame(pca_matrix) corPlot(correlations, numbers = TRUE, upper = FALSE, diag = FALSE, main = &quot;Correlations between variables&quot;) Then we check the number of low (&lt; 0.3) correlations: diag(correlations) &lt;- NA apply(abs(correlations) &lt; 0.3, 1, sum, na.rm = TRUE) ## log_n_playlists log_streams ## 2 6 ## log_youtube_views log_tiktok_counts ## 1 4 ## log_ins_followers_artist log_monthly_listeners_artist ## 4 2 ## log_playlist_total_reach_artist log_sp_fans_artist ## 3 2 ## log_shazam_counts ## 2 apply(abs(correlations), 1, mean, na.rm = TRUE) ## log_n_playlists log_streams ## 0.4650560 0.2252103 ## log_youtube_views log_tiktok_counts ## 0.3516450 0.3255983 ## log_ins_followers_artist log_monthly_listeners_artist ## 0.3959317 0.5315268 ## log_playlist_total_reach_artist log_sp_fans_artist ## 0.5097688 0.4499746 ## log_shazam_counts ## 0.4480021 We can see that there are some variables that are weakly correlated with others. However, as we remember, this is a subjective view, so, to strengthen our feeling of the data and variables that we have, we should conduct Bartlett’s test (its Null hypothesis states that the overall correlation between variables is 0): cortest.bartlett(pca_matrix, n = nrow(pca_data)) ## $chisq ## [1] 88510.86 ## ## $p.value ## [1] 0 ## ## $df ## [1] 36 Since the p-value of the test is &lt; .05, we reject the Null hypotheses and assume that the off-diagonal elements in the population correlation matrix are not zero. We should also make sure that the correlations are not too high (&gt; 0.8) and that there is no singularity (1). Again, we can check the number of such cases: apply(abs(correlations) &gt; 0.8, 1, sum, na.rm = TRUE) ## log_n_playlists log_streams ## 0 0 ## log_youtube_views log_tiktok_counts ## 0 0 ## log_ins_followers_artist log_monthly_listeners_artist ## 0 1 ## log_playlist_total_reach_artist log_sp_fans_artist ## 1 0 ## log_shazam_counts ## 0 But also, we must compute the determinant to see whether the correlation matrix is singular (determinant = 0), or if all variables are completely unrelated (determinant = 1), or somewhere in between (remember that we’re hoping for a value greater than 0.00001): det(pca_matrix) ## [1] 0.001403982 det(pca_matrix) &gt; 0.00001 ## [1] TRUE The overall correlation between variables is not too strong. Lastly, we compute the Kaiser-Meyer-Olkin measure of sampling adequacy to confirm that the data is appropriate for the factor analysis: KMO(pca_data) ## Kaiser-Meyer-Olkin factor adequacy ## Call: KMO(r = pca_data) ## Overall MSA = 0.8 ## MSA for each item = ## log_n_playlists log_streams ## 0.80 0.83 ## log_youtube_views log_tiktok_counts ## 0.84 0.83 ## log_ins_followers_artist log_monthly_listeners_artist ## 0.88 0.76 ## log_playlist_total_reach_artist log_sp_fans_artist ## 0.75 0.88 ## log_shazam_counts ## 0.75 As overall MSA is 0.8 (meritorious value), we can proceed with PCA using the data. Next, we should extract the correct number of factors. First, we inspect their eigenvalues and make decisions about which factors to extract: pc1 &lt;- principal(pca_data, nfactors = 9, rotate = &quot;none&quot;) #the initial number of variables pc1 ## Principal Components Analysis ## Call: principal(r = pca_data, nfactors = 9, rotate = &quot;none&quot;) ## Standardized loadings (pattern matrix) based upon correlation matrix ## PC1 PC2 PC3 PC4 PC5 PC6 PC7 PC8 ## log_n_playlists 0.78 0.13 -0.50 0.14 0.06 -0.02 0.16 0.27 ## log_streams 0.36 0.52 0.49 0.56 0.22 0.03 -0.02 0.01 ## log_youtube_views 0.56 0.47 0.22 -0.52 0.31 -0.22 -0.04 0.03 ## log_tiktok_counts 0.51 0.60 0.10 -0.08 -0.59 0.02 -0.10 0.03 ## log_ins_followers_artist 0.68 -0.34 0.47 -0.13 -0.11 0.09 0.39 -0.01 ## log_monthly_listeners_artist 0.89 -0.34 0.00 0.12 -0.05 -0.18 -0.10 -0.09 ## log_playlist_total_reach_artist 0.87 -0.35 -0.09 0.17 -0.06 -0.24 -0.07 -0.07 ## log_sp_fans_artist 0.78 -0.38 0.16 -0.14 0.10 0.33 -0.28 0.09 ## log_shazam_counts 0.73 0.37 -0.44 -0.03 0.12 0.22 0.09 -0.24 ## PC9 h2 u2 com ## log_n_playlists -0.01 1 0.00000000000000022 2.3 ## log_streams 0.00 1 0.00000000000000067 4.1 ## log_youtube_views 0.00 1 0.00000000000000011 4.3 ## log_tiktok_counts 0.00 1 -0.00000000000000067 3.1 ## log_ins_followers_artist 0.00 1 0.00000000000000000 3.3 ## log_monthly_listeners_artist -0.14 1 0.00000000000000033 1.5 ## log_playlist_total_reach_artist 0.14 1 -0.00000000000000022 1.7 ## log_sp_fans_artist 0.02 1 0.00000000000000044 2.5 ## log_shazam_counts 0.00 1 0.00000000000000078 2.9 ## ## PC1 PC2 PC3 PC4 PC5 PC6 PC7 PC8 PC9 ## SS loadings 4.47 1.50 1.00 0.69 0.54 0.31 0.29 0.16 0.04 ## Proportion Var 0.50 0.17 0.11 0.08 0.06 0.03 0.03 0.02 0.00 ## Cumulative Var 0.50 0.66 0.77 0.85 0.91 0.95 0.98 1.00 1.00 ## Proportion Explained 0.50 0.17 0.11 0.08 0.06 0.03 0.03 0.02 0.00 ## Cumulative Proportion 0.50 0.66 0.77 0.85 0.91 0.95 0.98 1.00 1.00 ## ## Mean item complexity = 2.8 ## Test of the hypothesis that 9 components are sufficient. ## ## The root mean square of the residuals (RMSR) is 0 ## with the empirical chi square 0 with prob &lt; NA ## ## Fit based upon off diagonal values = 1 plot(pc1$values, type = &quot;b&quot;) |&gt; abline(h = 1, lty = 2) From the sums of squared loadings and the scree plot we see, that we should extract either 2 or 3 factors (as the SS loading of the third component is exactly 1). Here, you could proceed with either of these numbers or even try both to make a well weighted decision. However, if you proceeded with only two factors, you would see later that the obtained model does not satisfy formal criteria. Thus, here you should have come up with three factors. pc2 &lt;- principal(pca_data, nfactors = 3, rotate = &quot;none&quot;) pc2 ## Principal Components Analysis ## Call: principal(r = pca_data, nfactors = 3, rotate = &quot;none&quot;) ## Standardized loadings (pattern matrix) based upon correlation matrix ## PC1 PC2 PC3 h2 u2 com ## log_n_playlists 0.78 0.13 -0.50 0.88 0.123 1.8 ## log_streams 0.36 0.52 0.49 0.63 0.366 2.8 ## log_youtube_views 0.56 0.47 0.22 0.58 0.417 2.3 ## log_tiktok_counts 0.51 0.60 0.10 0.64 0.362 2.0 ## log_ins_followers_artist 0.68 -0.34 0.47 0.81 0.190 2.3 ## log_monthly_listeners_artist 0.89 -0.34 0.00 0.91 0.089 1.3 ## log_playlist_total_reach_artist 0.87 -0.35 -0.09 0.88 0.117 1.3 ## log_sp_fans_artist 0.78 -0.38 0.16 0.77 0.231 1.5 ## log_shazam_counts 0.73 0.37 -0.44 0.87 0.131 2.2 ## ## PC1 PC2 PC3 ## SS loadings 4.47 1.50 1.00 ## Proportion Var 0.50 0.17 0.11 ## Cumulative Var 0.50 0.66 0.77 ## Proportion Explained 0.64 0.22 0.14 ## Cumulative Proportion 0.64 0.86 1.00 ## ## Mean item complexity = 1.9 ## Test of the hypothesis that 3 components are sufficient. ## ## The root mean square of the residuals (RMSR) is 0.07 ## with the empirical chi square 5272.11 with prob &lt; 0 ## ## Fit based upon off diagonal values = 0.97 From the output above we can see that the communalities of the items are high enough (&gt; 0.3), thus, at this step, we retain all variables. We also see that the model fit is good: 97%. Then we assess the residuals of value &gt; 0.05 (their share should be &lt; 50%, i.e., if fewer residuals than 50% have absolute values greater than 0.05 the model is a good fit): residuals &lt;- factor.residuals(pca_matrix, pc2$loadings) # round(residuals,3) reproduced_matrix &lt;- factor.model(pc2$loadings) residuals &lt;- as.matrix(residuals[upper.tri((residuals))]) large_res &lt;- abs(residuals) &gt; 0.05 sum(large_res) ## [1] 17 sum(large_res)/nrow(residuals) ## [1] 0.4722222 With 47% of large residuals, our model is fine. Mean residual (see model output above) is also acceptable. Finally, we should check if the residuals are normally distributed. Shapiro-Wilk test and the plots confirm this to us. hist(residuals) qqnorm(residuals) qqline(residuals) shapiro.test(residuals) ## ## Shapiro-Wilk normality test ## ## data: residuals ## W = 0.95781, p-value = 0.1838 Now, we can start describing the factors. We first examine the items’ loadings to principal components. Here you could proceed with either orthogonal or oblique factor rotation, effectively, the result would be the same, however, as factors might be intercorrelated, we might proceed with oblique rotation: pc3 &lt;- principal(pca_data, nfactors = 3, rotate = &quot;oblimin&quot;, scores = TRUE) # head(pc3$scores) pc3 print.psych(pc3, cut = 0.3, sort = TRUE) ## Principal Components Analysis ## Call: principal(r = pca_data, nfactors = 3, rotate = &quot;oblimin&quot;, scores = TRUE) ## Standardized loadings (pattern matrix) based upon correlation matrix ## item TC1 TC3 TC2 h2 u2 com ## log_ins_followers_artist 5 0.92 0.81 0.190 1.3 ## log_sp_fans_artist 8 0.86 0.77 0.231 1.0 ## log_monthly_listeners_artist 6 0.85 0.91 0.089 1.2 ## log_playlist_total_reach_artist 7 0.80 0.32 0.88 0.117 1.4 ## log_shazam_counts 9 0.86 0.87 0.131 1.1 ## log_n_playlists 1 0.84 0.88 0.123 1.1 ## log_streams 2 0.80 0.63 0.366 1.0 ## log_tiktok_counts 4 0.35 0.67 0.64 0.362 1.5 ## log_youtube_views 3 0.65 0.58 0.417 1.3 ## ## TC1 TC3 TC2 ## SS loadings 3.17 2.11 1.70 ## Proportion Var 0.35 0.23 0.19 ## Cumulative Var 0.35 0.59 0.77 ## Proportion Explained 0.45 0.30 0.24 ## Cumulative Proportion 0.45 0.76 1.00 ## ## With component correlations of ## TC1 TC3 TC2 ## TC1 1.00 0.38 0.22 ## TC3 0.38 1.00 0.22 ## TC2 0.22 0.22 1.00 ## ## Mean item complexity = 1.2 ## Test of the hypothesis that 3 components are sufficient. ## ## The root mean square of the residuals (RMSR) is 0.07 ## with the empirical chi square 5272.11 with prob &lt; 0 ## ## Fit based upon off diagonal values = 0.97 First, we see, that there might be correlation between components 1 and 3; second, we can get the list of items that comprise the components. We can finally create the factors based on the loadings: factor_1 &lt;- pca_data[, c(5, 6, 7, 8)] factor_2 &lt;- pca_data[, c(1, 9)] factor_3 &lt;- pca_data[, c(2, 4, 3)] Before we interpret the factors, we should do the reliability check: psych::alpha(factor_1) ## ## Reliability analysis ## Call: psych::alpha(x = factor_1) ## ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.89 0.91 0.92 0.72 10 0.0015 15 1.8 0.68 ## ## 95% confidence boundaries ## lower alpha upper ## Feldt 0.89 0.89 0.9 ## Duhachek 0.89 0.89 0.9 ## ## Reliability if an item is dropped: ## raw_alpha std.alpha G6(smc) average_r S/N ## log_ins_followers_artist 0.90 0.92 0.92 0.80 12.2 ## log_monthly_listeners_artist 0.84 0.85 0.79 0.65 5.7 ## log_playlist_total_reach_artist 0.85 0.87 0.82 0.69 6.7 ## log_sp_fans_artist 0.86 0.89 0.90 0.74 8.5 ## alpha se var.r med.r ## log_ins_followers_artist 0.0015 0.0178 0.76 ## log_monthly_listeners_artist 0.0023 0.0022 0.66 ## log_playlist_total_reach_artist 0.0021 0.0032 0.66 ## log_sp_fans_artist 0.0022 0.0350 0.66 ## ## Item statistics ## n raw.r std.r r.cor r.drop mean sd ## log_ins_followers_artist 13480 0.84 0.82 0.71 0.69 14 2.3 ## log_monthly_listeners_artist 13480 0.93 0.95 0.97 0.89 15 1.5 ## log_playlist_total_reach_artist 13480 0.89 0.91 0.93 0.81 17 1.8 ## log_sp_fans_artist 13480 0.89 0.88 0.80 0.77 13 2.3 psych::alpha(factor_2) ## ## Reliability analysis ## Call: psych::alpha(x = factor_2) ## ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.88 0.88 0.79 0.79 7.4 0.0021 9.1 1.7 0.79 ## ## 95% confidence boundaries ## lower alpha upper ## Feldt 0.87 0.88 0.88 ## Duhachek 0.87 0.88 0.88 ## ## Reliability if an item is dropped: ## raw_alpha std.alpha G6(smc) average_r S/N alpha se var.r ## log_n_playlists 0.72 0.79 0.62 0.79 3.7 NA 0 ## log_shazam_counts 0.86 0.79 0.62 0.79 3.7 NA 0 ## med.r ## log_n_playlists 0.79 ## log_shazam_counts 0.79 ## ## Item statistics ## n raw.r std.r r.cor r.drop mean sd ## log_n_playlists 13480 0.94 0.95 0.84 0.79 6.1 1.7 ## log_shazam_counts 13480 0.95 0.95 0.84 0.79 12.1 1.9 psych::alpha(factor_3) ## ## Reliability analysis ## Call: psych::alpha(x = factor_3) ## ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.64 0.65 0.56 0.38 1.9 0.0052 13 2 0.37 ## ## 95% confidence boundaries ## lower alpha upper ## Feldt 0.63 0.64 0.65 ## Duhachek 0.63 0.64 0.65 ## ## Reliability if an item is dropped: ## raw_alpha std.alpha G6(smc) average_r S/N alpha se var.r ## log_streams 0.61 0.62 0.45 0.45 1.65 0.0065 NA ## log_tiktok_counts 0.48 0.49 0.32 0.32 0.95 0.0088 NA ## log_youtube_views 0.54 0.54 0.37 0.37 1.18 0.0079 NA ## med.r ## log_streams 0.45 ## log_tiktok_counts 0.32 ## log_youtube_views 0.37 ## ## Item statistics ## n raw.r std.r r.cor r.drop mean sd ## log_streams 13480 0.74 0.74 0.50 0.41 14.3 2.7 ## log_tiktok_counts 13480 0.82 0.79 0.63 0.50 7.6 3.0 ## log_youtube_views 13480 0.73 0.77 0.59 0.47 16.7 2.2 For factors 1 and 2, we can confirm sufficient reliability, however, the Cronbach’s Alpha for factor 3 is below the acceptable threshold, thus, we retain two factors. The first one can be described as “artist’s funbase” (or artist’s overall popularity, artist’s listeners, artist’s followers, and other synonyms), while the second represents somewhat close to hit songs (let’s say, they are present in multiple playlists, and also they are played in malls/cafes/etc., and people Shazam them). For the future analysis, we can proceed with five factors: artist_funbase, artist_hits, and the three items that didn’t comprise a factor with sufficient reliability: streams, tiktok_counts, youtube_views. Assignment B: Cluster Analysis Load data music_data_cluster &lt;- read.csv2(&quot;https://raw.githubusercontent.com/WU-RDS/RMA2022/main/data/music_data_group.csv&quot;, sep = &quot;;&quot;, header = TRUE, dec = &quot;,&quot;) head(music_data_cluster) famous_artists &lt;- c(&quot;Ed Sheeran&quot;, &quot;Drake&quot;, &quot;Post Malone&quot;, &quot;Ariana Grande&quot;, &quot;Billie Eilish&quot;, &quot;Dua Lipa&quot;, &quot;Travis Scott&quot;, &quot;Taylor Swift&quot;, &quot;Imagine Dragons&quot;, &quot;Selena Gomez&quot;, &quot;Ozuna&quot;, &quot;Justin Bieber&quot;, &quot;Coldplay&quot;, &quot;Eminem&quot;) famous_tracks &lt;- music_data_cluster %&gt;% filter(artistName %in% famous_artists) famous_tracks_scale &lt;- famous_tracks %&gt;% mutate_at(vars(danceability:song_age), scale) famous_tracks_scale &lt;- famous_tracks_scale %&gt;% mutate_at(vars(danceability:song_age), as.vector) set.seed(123) First of all, regarding duplicates, you could either drop or keep them. In fact, the “repeating” songs are not always identical but without going into too many details, we might assume that the songs if our data set are different. Though, if you dropped duplicates, you’re also right, and we simply have two groups of managers. Ideally, the duplicates would be dropped. First, we identify the number of clusters: opt_K &lt;- NbClust(famous_tracks_scale %&gt;% dplyr::select(danceability:song_age), method = &quot;kmeans&quot;, max.nc = 10) ## *** : The Hubert index is a graphical method of determining the number of clusters. ## In the plot of Hubert index, we seek a significant knee that corresponds to a ## significant increase of the value of the measure i.e the significant peak in Hubert ## index second differences plot. ## ## *** : The D index is a graphical method of determining the number of clusters. ## In the plot of D index, we seek a significant knee (the significant peak in Dindex ## second differences plot) that corresponds to a significant increase of the value of ## the measure. ## ## ******************************************************************* ## * Among all indices: ## * 5 proposed 2 as the best number of clusters ## * 2 proposed 3 as the best number of clusters ## * 2 proposed 4 as the best number of clusters ## * 7 proposed 5 as the best number of clusters ## * 2 proposed 7 as the best number of clusters ## * 1 proposed 8 as the best number of clusters ## * 2 proposed 9 as the best number of clusters ## * 2 proposed 10 as the best number of clusters ## ## ***** Conclusion ***** ## ## * According to the majority rule, the best number of clusters is 5 ## ## ## ******************************************************************* table(opt_K$Best.nc[&quot;Number_clusters&quot;, ]) ## ## 0 1 2 3 4 5 7 8 9 10 ## 2 1 5 2 2 7 2 1 2 2 The “duplicates” people got 5 clusters, and the “non-duplicates” — 4. To conduct K-means clustering, we simply run the kmeans() function with the required set of variables and the proposed number of clusters: kmeans_tracks &lt;- kmeans(famous_tracks_scale %&gt;% dplyr::select(danceability:song_age), 5) After that, we’re free to visualize the clusters and describe them: kmeans_tracks$centers ## danceability energy speechiness instrumentalness liveness valence ## 1 0.1496741 0.5012567 1.10699352 -0.1949760 2.40793367 0.09053111 ## 2 -0.7994849 0.3742046 -0.01225973 -0.1336373 -0.06261713 -0.46238691 ## 3 -1.1326298 -0.6994597 -0.53010030 5.4950472 -0.04035494 -0.87837313 ## 4 -0.4024191 -0.6838371 -0.40767118 -0.1575615 -0.30620916 -0.63292119 ## 5 0.5882739 0.4004501 0.13780549 -0.1658458 -0.24110857 0.68203772 ## tempo song_length song_age ## 1 -0.10512203 0.42835544 -0.1251250 ## 2 0.83776889 0.89442720 1.7118870 ## 3 -0.21781391 0.24945442 -0.1694322 ## 4 -0.29824154 -0.04294918 -0.1726793 ## 5 0.05689749 -0.31210832 -0.2788934 centers &lt;- data.frame(kmeans_tracks$centers) centers$cluster &lt;- 1:5 ggRadar(centers, aes(color = cluster), rescale = FALSE) + ggtitle(&quot;Centers&quot;) + theme_minimal() Here we already see some distinguishable features of a couple of clusters. They are better seen in spikes of the radar plot and negative-to-positive differences in centres table. famous_tracks$cluster &lt;- as.factor(kmeans_tracks$cluster) ggplot(famous_tracks, aes(y = cluster, fill = artistName)) + geom_bar() + theme_minimal() table(famous_tracks$artistName, famous_tracks$cluster) ## ## 1 2 3 4 5 ## Ariana Grande 1 5 0 30 27 ## Billie Eilish 3 0 4 25 7 ## Coldplay 8 29 17 9 3 ## Drake 20 11 0 32 43 ## Dua Lipa 0 0 0 8 28 ## Ed Sheeran 3 6 0 28 15 ## Eminem 23 11 0 1 21 ## Imagine Dragons 3 8 0 24 29 ## Justin Bieber 2 1 0 13 18 ## Ozuna 1 0 0 4 38 ## Post Malone 1 2 1 18 22 ## Selena Gomez 0 0 0 6 22 ## Taylor Swift 3 12 0 60 42 ## Travis Scott 1 2 0 8 10 Using the plots and tables above, we can describe the clusters: Cluster 1 - it’s the Rap cluster (Drake and Eminem with high energy and extremely high speechiness). Travis Scott is excluded from Rap, based on our analysis; Cluster 2 - we have pretty lengthy songs with high tempo and danceability here, however, the valence is not too high; Cluster 3 - It’s just Coldplay that somehow formed a cluster of songs for emotionally turbulent people, including myself. Here we can actually see the drawbacks of proceeding with duplicates (and, as result, with 5 clusters). It makes no sense to have this cluster in results as (1) it is too small, and (2) it only has one artist; Cluster 4 - here we have very low energy, liveness, valence, and tempo, so these are probably somewhat melancholic songs (however, they come from some conventionally “party” artists like Ariana Grande, so here we can say something about variety of songs of these artists); Cluster 5 - cluster with high danceability and valence, so we have Pop party tracks (Selena Gomez, Dua Lipa, Ozuna, partly Taylor Swift and Ariana Grande). Last, we can plot the PCA visualization to examine the clusters: fviz_cluster(kmeans_tracks, data = famous_tracks_scale %&gt;% dplyr::select(danceability:song_age), palette = hcl.colors(5, palette = &quot;Dynamic&quot;), geom = &quot;point&quot;, ellipse.type = &quot;convex&quot;, ggtheme = theme_minimal()) We see that clusters 1 and 2 overlap quite a lot, and so do clusters 3 and 4 (that’s probably because of Coldplay again). Additionally (but not necessarily), we could make some recommendations (let’s say, for a home party or one of WUMA events): famous_tracks %&gt;% filter(trackName == &quot;New Rules&quot;) %&gt;% distinct(cluster, .keep_all = TRUE) %&gt;% dplyr::select(cluster) recommendations &lt;- famous_tracks %&gt;% filter(cluster == 5) %&gt;% filter(!artistName == &quot;Justin Bieber&quot;) %&gt;% dplyr::select(artistName, trackName) head(recommendations, 19) "],["survey-design-analysis.html", "11 Survey design &amp; analysis 11.1 Your tasks 11.2 Topics for the group project 11.3 General information 11.4 Part 1: Questionnaire design 11.5 Part 2: Data analysis", " 11 Survey design &amp; analysis 11.1 Your tasks In this section you will find all information related to the group project. Generally, the group project comprises two parts: Questionnaire design &amp; data collection: In the first part, you will work with your group on creating a questionnaire. Once you have created a draft of your questionnaire, you will present the draft to us and we will provide feedback. After implementing the feedback, you will submit the final version of the questionnaire and start the data collection using an online survey. Data analysis &amp; presentation: In the second part, you will apply the statistical knowledge acquired during the course to analyze your data and present your findings using a video recording and submit your report (data, R code, and video presentation). Figure 1.1: Structure of the group project Note that this assignment may require you to deal with and integrate knowledge that has not yet been covered in class! Students are expected to read ahead and collect additional information to the extent to which their project requires this. 11.2 Topics for the group project The first step is to select a topic from the list below. We will use an online survey, asking you to rank the top 5 topics that you would like to work on so that we can assign the topics according to your preferences. You can reach the online survey via this link. Please note that only one person per group needs to fill out the survey after you discussed which topic to chose within your groups. If two or more groups have the same preference for a topic, we will select one group randomly and the other group will receive the next topic in the order of their preference. Below, you can find the list of topics including a short description and some references to published studies on the respective topics that should help you with the design of your questionnaire. We expect you to read the stated papers and incorporate the relevant aspects into your own survey design. th, td { font-size: 12px; border-collapse: collapse; border-width:3px } No. Topic Description 1 The most liveable city Topic:Vienna is frequently listed as one of the most liveable cities in the world (e.g., by the Economist Intelligence Unit). Develop a questionnaire to investigate the reasons why Vienna ranks so high in different rankings. What are the factors that contribute to its image? Are there differences between different groups of people? What dimensions should be considered when measuring the liveability of a city?Literature:Merrilees, B., Miller, D., &amp; Herington, C. (2009). Antecedents of residents’ city brand attitudes. Journal of Business Research, 62 (3), 362-367.Economist Intelligence Unit (2022). The Global Liveability Index 2022.Kennedy, R. &amp; L. Buys. Dimensions of Liveability: A Tool for Sustainable CitiesPaul. A. &amp; Sen, J. (2017). Identifying Factors for Evaluating Livability Potential within a Metropolis: A Case of Kolkata. International Journal of Urban and Civil Engineering, 11(1), 50-55. 2 Drivers of green consumption Topic:The climate debate is currently on the agenda of many news media outlets. Explore in how far consumers are willing to change their consumption behavior to help protect the environment when it comes to grocery shopping. What factors influence the willingness to change (e.g., social factors, convenience, quality)? What are barriers that hinder consumers from shopping more sustainable products. Select one specific product and explore the impact of front-of-package labels indicating the carbon footprint of a product on consumer choice and willingness-to-pay. Can you identify different segments of consumers?Literature:Carrero, I. et al. (2021). Designed to Be Noticed: A Reconceptualization of Carbon Food Labels as Warning Labels. Sustainability, 13, 1581.Rondonia, A. &amp; Grassob, S. (2021). Consumers behaviour towards carbon footprint labels on food: A review of the literature and discussion of industry implications. Journal of Cleaner Production, 301 (June), 127031.White, K., Habib, R., &amp; Hardisty, D.J. (2019).How to SHIFT Consumer Behaviors to be More Sustainable: A Literature Review and Guiding Framework. Journal of Marketing, 83(3), 22-49. 3 Consumers’ willingness-to-pay for organic products Topic:Develop a questionnaire to measure consumers’ willingness to pay for organic products when it comes to groceries. Select one specific product and explore how much consumers are willing to pay for organic vs. conventional products? What is the observed price premium and what are its drivers? What dimensions can you identify when it comes to organic food preferences? For example, does it reflect a desire to achieve better health, eat better quality food, comply with social norms, or to contribute to environmental protection? What marketing messages are effective in stimulating demand for organic products?Literature:Testa et al. (2021). Drivers to green consumption: a systematic review Environment, Development and Sustainability, 23, 4826–4880.Bailey, A., Mishra, A., &amp; Tiamiyu, M. (2016). GREEN consumption values and Indian consumers’ response to marketing communications. The Journal of Consumer Marketing. 33 (7), 562-573.Aigner et al. (2019). The Effectiveness of Promotional Cues for Organic Products in the German Retail Market. Sustainability, 11, 6986.Krystallis, A., Fotopoulos, C. &amp; Zotos, Y. (2006). Organic Consumers’ Profile and Their Willingness to Pay (WTP) for Selected Organic Food Products in Greece. Journal of International Consumer Marketing, 19(1), 81-106. 4 Privacy in social media – consumers’ willingness to pay for a secure social network Topic:Over the last years, media reports about data leaks and questionable business practices through the exploitation of user data by social networks (e.g., Facebook) have increased. Develop a questionnaire to measure consumers’ willingness to pay for a social network that does not track online behavior and exploits this data for different purposes. What is the price premium users are willing to pay for privacy? How well are consumers informed about how their data is being used? How would measures aimed at increasing the awareness for privacy affect consumers attitude and willingness to pay? What are the main consumers concerns when it comes to privacy on social media? What factors (e.g., free content) make users give up their privacy? Can you identify distinct consumer segments? For how much money would users be willing to give up their privacy?Literature:Kokolakis, S. (2017). Privacy attitudes and privacy behavior: A review of current research on the privacy paradox phenomenon. Computers &amp; Security, 64, 122-134.Schreiner, M. &amp; Hess, T. (2015). Why Are Consumers Willing to Pay for Privacy? An Application of the Privacy-freemium Model to Media Companies, in Proceedings of the 23rd European Conference on Information. Muenster, Germany.Orito1, Y., Fukuta, Y., &amp; Murata, K. (2014). I Will Continue to Use This Nonetheless: Social Media Survive Users’ Privacy Concerns. International Journal of Virtual Worlds and Human Computer Interaction, 2, 92-107. 5 Consumers‘ attitude and willingness-to-pay for private labels Topic:Develop a questionnaire to measure consumers’ attitude towards and willingness to pay for private labels (e.g., “Clever”, “Billa”). Select specific product categories and explore if consumers are willing to pay more for the manufacturer brands than for the private labels? What factors affect consumers’ choice? Along which dimensions are private label brands perceived differently compared to manufacturer brands (e.g., quality, price)? Are there differences in consumer choice across different consumption settings (e.g., private consumption vs. social consumption with friends)?Literature:Burton, S. et al. (1998). A Scale for Measuring Attitude Toward Private Label Products and an Examination of Its Psychological and Behavioral Correlates.Journal of the Academy of Marketing Science. 26(4), 293-306.Mostafa, R. &amp; R. Elseidi (2018). Factors affecting consumers’ willingness to buy private label brands (PLBs): Applied study on hypermarkets. Spanish Journal of Marketing - ESIC, 22(3).Steenkamp, J.B., Van Heerde, H.J., &amp; Geyskens, I. (2010). What Makes Consumers Willing to Pay a Price Premium for National Brands over Private Labels?, Journal of Marketing Research, 47(6), 1011-1024. 6 Front-of-package nutrition labels Topic:Frequent consumption of unhealthy foods can lead to overweight or obesity, hypertension, and cardiovascular disease. The consequences of poor diets is putting a burden on health care systems and front-of-package labels have been proposed as a means to help consumers to gain a better understanding of the ingredients of a product. Develop a questionnaire to test how front-of-package nutrition labels affect consumer choice. Which type of label is most effective? Which label features might ensure higher effect on consumers?Literature:Ikonen, I. et al. (2020). Consumer effects of front-of-package nutrition labeling: an interdisciplinary meta-analysis. Journal of the Academy of Marketing Science, 48, 360–383.Hamlin, R. &amp; McNeill, L. (2018). The Impact of the Australasian ‘Health Star Rating’, Front-of-Pack Nutritional Label, on Consumer Choice: A Longitudinal Study, Nutrients, 10, 906.Roberto, C. et al. (2021). The Influence of Front-of-Package Nutrition Labeling on Consumer Behavior and Product Reformulation. Annual Review of Nutrition, 41(1), 529-550. 7 Going and being vegan: consumers willingness to make the change Topic:More and more people are turning to a vegan diet for many reasons, including health, concerns about animal welfare or a desire to protect the environment. Develop a questionnaire to measure consumers’ willingness to become a vegan and its drivers (e.g., health, environment, compassion for animals). Find out what dimensions underlie the decision making process. What type of messaging might change consumers attitude towards veganism? Are consumers willing to pay more or less for meat replacement products compared to conventional meat products. How large is the vegan segment, what characteristics does it have, and what are the implications for marketing?Literature:Proveg (2021). European consumer survey on plant-based foods.Miguel, I., Coelho, A., &amp; Bairrada, C. (2020). Modelling Attitude towards Consumption of Vegan Products, Sustainability, 13, 9.Raggiotto, F., Mason, M., &amp; Moretti, A. (2017). Religiosity, materialism, consumer environmental predisposition. Some insights on vegan purchasing intentions in Italy. International Journal of Consumer Studies, 42, 613-626. 8 Consumers’ preference and attitude towards online grocery shopping Topic:More and more people use online grocery shopping services and new companies in this space provide fast and convenient delivery options (e.g., Jokr, Gurkerl.at). In addition, the Coronavirus outbreak has lead to an increase in online shopping adoption. Develop a questionnaire to measure consumers’ attitudes and its drivers towards the online grocery shopping. How does online shopping compare to the conventional shopping experience across important dimensions (e.g., price, service, experience)? Are online channels a substitute or a complementary service to shopping in physical stores. What role does the speed of delivery play? In which situations is the online channels preferred and how large is the segment of online shoppers? Are there differences before, during and after the pandemic? What factors can explain the intention of consumers to continue using online shopping services in the future?Literature:Frank, D. &amp; Peschel, A. (2020). Sweetening the Deal: The Ingredients that Drive Consumer Adoption of Online Grocery Shopping. Journal of Food Products Marketing, 26(8), 535-544.Amorim, P. &amp; DeHoratius, N. (2021). Online Shoppers Don’t Always Care About Faster Delivery, MITSloan Management Review, Fall issue.Mehrolia, S, Alagarsamy, S, Solaikutty, VM. (2021). Customers response to online food delivery services during COVID-19 outbreak using binary logistic regression. International Journal of Consumer Studies, 45, 396–408.Dominici, A. et al. (2021). Determinants of online food purchasing: The impact of socio-demographic and situational factors. Journal of Retailing and Consumer Services, 60, 102473. 9 Sharing economy in the urban mobility Topic:Develop a questionnaire to explore the attractiveness of mobility sharing options for consumers (e.g., e-scooters). Are consumers willing and planning to substitute other transportation through sharing options? Is mobility sharing likely to affect the amount of spending and driving in other transport options? Which factors influence these decisions? What are the benefits and deterrents of e-scooter services?Literature:Möhlmann, M. (2015). Collaborative consumption: determinants of satisfaction and the likelihood of using a sharing economy option again, Journal of Consumer Behaviour, 14, 193-207.Martínez-González, J., Parra-López, E., &amp; Barrientos-Báez, A. (2021). Young Consumers’ Intention to Participate in the Sharing Economy: An Integrated Model, Sustainability, 13, 430.Prieto, M. et al. (2019). Shifting consumers into gear: car sharing services in urban areas.International Journal of Retail &amp; Distribution Management, 47(5), 552-570. 10 Consumers’ attitude towards legal video streaming providers and piracy Topic: On the one hand, video streaming providers like Netflix record a continuous increase in registered users. On the other hand, illegal video streaming portals (e.g., Popcorn Time) are heavily used by other consumers. Develop a questionnaire to measure consumers’ attitude towards and drivers (e.g. occupation, gender, usage behavior etc.) of legal video streaming service usage. What could be reasons for piracy and how can pirates be converted to paying customers? What is the willingness-to-pay for legal video streaming services in the current form and what is the price that users would pay if the service features (e.g., content selection) would be improved? How large is the piracy segment?Literature:Papies, D. &amp; M. Clement (2008). Adoption of New Movie Distribution Services on the Internet, Journal of Media Economics, 21(3), 131-157.Hennig-Thurau, T., Henning, V., Sattler, H. (2007). Consumer File Sharing of Motion Pictures. Journal of Marketing, 71(4), 63-83.Phau, I., Teah, M., &amp; Liang, J. (2016). Investigating the Factors Influencing Digital Movie Piracy. Journal of Promotion Management, 22(5), 637-664. 11 Local vs. global brands Topic:Some researchers argue that the increasing globalization leads to the homogenization of consumer needs and desires across the globe and some companies address this trend with standardized global products. However, some consumers appear to prefer local brands over global brands. Develop a questionnaire that investigates the drivers of consumers’ attitudes toward global and local brands. How do consumers rate global vs. local brands on relevant dimensions with regard to product choice (price, quality, sustainability, etc.)? Select a product category and conduct an experiment to find out what marketing messages for local brands might lead to a more favorable outcome in terms of consumer choice when competing with global brands (use a fictitious brand to avoid confounding effects of existing brand preferences). Can you identify different segments of consumers?Literature:Riefler, P. (2019). Local versus global food consumption: the role of brand authenticity. Journal of Consumer Marketing, 37(3), 317–327.Alden, D., Steenkamp, J.B., &amp; Batra, R. (2006). Consumer attitudes toward marketplace globalization: Structure, antecedents and consequences. 23, 227-239.Özsomer, A. (2012). The Interplay Between Global and Local Brands: A Closer Look at Perceived Brand Globalness and Local Iconness. Journal of International Marketing, 20(2), 72-95.Zhou, L., Yang, Z., &amp; M. Hui (2010). Non-local or local brands? A multi-level investigation into confidence in brand origin identification and its strategic implications. Journal of the Academy of Marketing Science, 38, 202–218.Steenkamp, J.B. &amp; de Jong, M. (2010). A Global Investigation into the Constellation of Consumer Attitudes Toward Global and Local Products. Journal of Marketing, 74(6), 18-40. 12 Consumer preferences for fair-trade products in the apparel industry Topic:Develop a questionnaire to measure consumers’ preferences for sustainable brands and eco-fashion. How do consumers rate eco vs. standard brands on relevant dimensions with regard to product choice (price, quality, sustainability, style, etc.)? Select a specific product and conduct an experiment to find out what the price premium consumers are willing to pay for fair-trade products (use a fictitious brand to avoid confounding effects of existing brand preferences). What factors can you identify that predict the price premium? Can you identify different segments of consumers?Literature:Balasubramanian, P. &amp; Soman, S. (2019). Awareness regarding fair trade concept and the factors influencing the fair trade apparel buying behaviour of consumers in Cochin City. Journal of Strategic Marketing, 27(7), 612-629.Irwin, J. &amp; Walker Naylor, R. (2009). Ethical Decisions and Response Mode Compatibility:Weighting of Ethical Attributes in Consideration Sets Formed by Excluding Versus Including Product Alternatives, Journal of Marketing Research, 46(2), 234–246.Ma, Y., Littrell, M., &amp; Niehm, L. (2011). Young female consumers’ intentions toward fair trade consumption. International Journal of Retail &amp; Distribution Management. 40(1), 41-63.Nilssen, R., Bick, G., &amp; Abratt, R. (2018). Comparing the relative importance of sustainability as a consumer purchase criterion of food and clothing in the retail sector. Journal of Brand Management, 26, 71-83.Harris, F., Roby, H., &amp; Dibb, S. (2016). Sustainable clothing: challenges, barriers and interventions for encouraging more sustainable consumer behaviour. International Journal of Consumer Studies, 40, 309–318. 13 Freemium business models in the music industry Topic:Many music streaming services (e.g., Spotify, YouTube) offer a baseline version free of charge to consumers but charge for a premium version with additional features. Develop a questionnaire to measure consumers’ willingness to pay for legal music streaming services. What factors (e.g., product range, sharing features, price, occupation, gender, usage behavior) drive the conversion from the free tier of the service to the paid tier, and how could companies motivate consumers to convert to the premium version of the service? What is the market potential for paid music subscription services?Literature:Wagner, T. &amp; Hess, T. (2013). What Drives Users to Pay for Freemium Services? Examining People’s Willingness to Pay for Music Services. Proceedings of the Nineteenth Americas Conference on Information Systems, Chicago, Illinois, August 15-17.Mäntymäki M, Islam A.N., Benbasat I. (2019). What drives subscribing to premium in freemium services? A consumer value-based view of differences between upgrading to and staying with premium. Informations Systems Journal, 30, 295–333.Hamari, J., Hanner, N., &amp; Koivisto, J. (2020). “Why pay premium in freemium services?” A study on perceived value, continued use and purchase intentions in free-to-play games, International Journal of Information Management, 51, 102040.Papies, D., Eggers, F., &amp; Wlömert, N. (2011). Music for free? How free ad-funded downloads affect consumer choice. Journal of the Academy of Marketing Science volume 39, 777–794. 14 Perceived influence of Social Media Influencers Topic:Confronted with declining effectiveness of traditional marketing channels, companies invest increasing amounts in Influencer Marketing, especially to reach a younger demographic. Develop a questionnaire to assess in which product categories influencer marketing is particularly prevalent. Can you identify changes in media consumption behavior that can explain why social media is so important to reach younger demographics (e.g., differences in media consumption patters across demographics). Conduct an experiment to find out the drivers of the perceived influence of social media Influencers. Particularly, you should investigate if the number of accounts that an Influencer follows affects the perceived influence of this influencer and the willingness to share the content for his/her followers. What could be moderators of these effects?Literature:Valsesia, F., Proserpio, D., &amp; Nunes, J. (2020). The Positive Effect of Not Following Others on Social Media. Journal of Marketing, 57(6), 1152-1168.Haenlein, M. et al. (2020): Navigating the New Era of Influencer Marketing: How to be Successful on Instagram, TikTok, &amp; Co. In: California Management Review 63 (1), 5–25. 15 Effects of brand activism on brand image Topic:Many brands engage in political activism or take part in emerging social movements, however, such actions do not always bring success (e.g., Gilette’s 2019 campaign). Does brand activism result in praise or criticism and what factors determine these outcomes? What are the consequences of brands’ participation in political or social actions that contradict their values (e.g., how customers start to evaluate such brands, how much they are willing to pay for brands’ products, etc.)? How do customers perceive “woke washing”? Can you identify different segments of consumers who are pro or contra brand activism? Literature:Mukherjee, S. &amp; Althuizen, N. (2020). Brand activism: Does courting controversy help or hurt a brand? International Journal of Research in Marketing, 37(4), 772-788.Cristobal, C., et al. (2022). Brand Activism: Impact of Woke Advertising on the Consumers’ Attitude and Brand Perceptions Towards Purchase Intention. Journal of Business and Management Studies, 4(2), 1–12. Jungblut, M., &amp; Johnen, M. (2021). When Brands (Don’t) Take My Stance: The Ambiguous Effectiveness of Political Brand Communication. Communication Research, 0(0). 16 Boycotting brands: understanding reasons and consequences Topic:Consumers react to brands’ production, advertising, and other actions in either positive or negative ways; with the rise of social media, boycotting became common practice for the latter. What reasons (e.g., company’s negative impact on the environment, controversial ads statements, etc.) make consumers participate in boycotts? Which actions do they take, and which tools or channels do they use (e.g., Twitter)? How do they justify boycotting brands (i.e., are there specific goals that consumers try to achieve by boycotting products)? Why and when would consumers stop boycotting and would they ever “come back”, i.e., start to buy brands’ products again? Literature:Klein, J. G., Smith, N. C., &amp; John, A. (2004). Why We Boycott: Consumer Motivations for Boycott Participation. Journal of Marketing, 68(3), 92–109.Hoffmann, S. et al. (2018). Under Which Conditions Are Consumers Ready to Boycott or Buycott? The Roles of Hedonism and Simplicity. Ecological Economics, 147, 167-178. Delistavrou, A., Krystallis, A., &amp; Tilikidou, I. (2020). Consumers’ decision to boycott “unethical” products: the role of materialism/post materialism. International Journal of Retail &amp; Distribution Management, 48(10), 1121-1138. 11.3 General information In this section, we provide some general guidelines regarding the group project. You will also find some additional guideline regarding the individual grading components below. Individual responsibility: Group members should plan to share responsibilities equally All members of the group must contribute to the project Each student will receive an individual grade To ensure an equal contribution of group members, a peer assessment will be conducted, which enters into the computation of the individual grades for the group project Submission There are two grading components: Questionnaire design &amp; data collection: When you submit your questionnaire draft, please submit 1) the pdf printout from Qualtrics, 2) a short slide deck explaining your research problem and how you intend to solve it (research design, measurement &amp; scaling, intended types of analyses). We will go through the presentation during the first coaching session. After this, you’ll have time to revise the questionnaire based on the feedback that you received. Data analysis &amp; presentation: When you submit your final presentation, please submit a .zip folder containing 1) the video recording, 2) the data, 3) the R code file, and 4) your slides. The code should be provided in a reproducible format, i.e., we should be able to reproduce your results by running the code. 11.4 Part 1: Questionnaire design 11.4.1 Guidelines for the submission and presentation In the presentation of your questionnaire design, you should address the following points: Problem statement &amp; research hypotheses What is the research problem &amp; why is it relevant from a managerial perspective? What research questions do you intend to answer with your research? What type are they (descriptive, preictive, causal inference) What are your hypotheses? What are the references that you used? Questionnaire structure &amp; research design Please provide a justification for the structure of your questionnaire Use appropriate wording in the questionnaire to obtain the desired information Provide explanations regarding your choice of research design to answer the research questions Reasons for variable selection &amp; measurement and scaling Please provide a justification of why you chose your variables and the associated choices regarding the measurement &amp; scaling of these variables What are the expected relationships between the independent variable(s) and your dependent variable(s)? Plan your statistical analyses Although we won’t have covered all methods when you submit your questionnaire design, you should plan ahead and present some ideas on how you plan to analyze your data It is important to consider this before collecting your data, since the type of data you will obtain affects the type of methods you can use 11.4.2 Guidelines for the design of your questionnaire This section provides some information regarding the first part of the group project: questionnaire design &amp; data collection. One aim of this course is to develop your ability to translate business problems into actionable research questions and to design an adequate research plan to answer these questions. Therefore, you need to be equipped with knowledge on how to create a survey and properly conduct a research project. The following sections are meant to assist you with the questionnaire design process to avoid common pitfalls. 11.4.2.1 Research design As you aim to conduct real marketing research, before you start writing down questions for a questionnaire, you need to come up with a research design. In particular, you should review the research questions and hypotheses to decide on which research design is appropriate. That is, if your research objective is descriptive, predictive, or to identify a causal relationship (see chapter 1). If you are interested in a causal effect of one particular (independent) variable on another (dependent) variable, an experimental design with random assignment of participants to the experimental groups is generally the best way to proceed. In this case, you particularly have to decide on the following: Which variable to manipulate? Whether to use a between-subjects or within-subjects design? The cause-effect sequence (the cause must occur before the effect) The number of experimental conditions Potential interactions and relationships with other variables (does the effect depend on another variable?) Here are some examples of causal research design applications: To assess the effect of Front-of-package nutrition labels on product choice To assess the effect of different marketing messages on consumer attitudes and purchase intentions If it is not feasible to run an experiment with random assignment (aka randomized controlled trial), you may still obtain non-experimental observational data from your survey to find answers to causal research questions. However, in this case you need to carefully consider whether there could be other variables (aka confounding factors) that may explain the relationship between the dependent and independent variables as the following figure shows. You should also carefully consider the direction of the hypothesized relationships of interest. Consider the example of a study analyzing the effect of the time that a person has been living in a city on the attitude that this person has towards that city. In this case, it could be that the living duration leads to a more positive attitude towards the city but it is just as well possible that a more positive attitude leads a person to stay in the city longer. Potentially bidirectional relationships like this naturally carry the risk of reversed causation and you should be certain when drafting your research design, that the effect only runs in one direction. In the case that you suspect that there could be potentially confounding variables, the best way would be to measure these variables in your survey and include them as control variables in your model. Consider the example of a study analyzing the effect of illegal movie streaming services (e.g., Popcorn Time) on paid movie streaming services (e.g., Netflix) and whether piracy harms movie revenues. If you would only measure the number of movies that someone consumes via illegal channels (independent variable) and via legal channels (dependent variables), you are likely to find a positive relationship. However, this does not mean that because someone uses illegal services, this person watches more movies via legal channels. Instead, it is likely that users with a high interest in movies in general have a higher consumption of both legal and illegal channels. In this case, if we would collect information about the general interest in movies and include this variable as a control variable, we may adjust for the general preference for movie products and the effect of illegal channels on legal channels might show a negative sign. If you would like to estimate the effects of multiple independent variables on one dependent variable as described above, you would need to use a regression model. In this case, you particularly have to decide on: How to measure the dependent variable (DV). This is particularly important, since you need a variable that is powerful in uncovering variation between subjects (e.g., ratio variables like “How much are you willing to pay for this product” are good candidates). Moreover, you also need to consider the nature of your DV, i.e., whether it is an continuous variable or a categorical variable. In the former case, you would run a linear regression model and in the latter case, you would run a logistic regression if the categorical variable only has two categories (i.e., it is a binary variable). Note that there are also models for categorical variables with more than two categories (e.g., ordinal regression) but we don’t cover them here. How to measure the independent variables (IV) (single-item vs. multi-item scales, categorical vs. continuous). In a regression model you may include nearly all of these variable types as independent variables. Bear in mind that the nature of the IV, together with DV, affects your choice of a statistical model as well. If you are uncertain, which model to use, you may check for example this website by UCLA which not only shows which type of test is appropriate but also has R code available for each of these tests given the nature of the DV and IV. On a more general note, in many cases it is also interesting to think about potential interaction effects (e.g., is the effect of variable X stronger for group A vs. B?). It rarely happens that an effect of one variable on another is the same for all people and there is usually heterogeneity between them. It could even be that the main effect of one variable on another variable is insignificant because the effect is positive for one group of people and negative for another group of people so that the effects cancel each other out. 11.4.2.2 Method of data collection In the next step you should review the method of data collection. For your group project, you will use an online survey, so this part does not require too much consideration. For the purpose of this course, we will provide you with a free Qualtrics account, which you may use to program your questionnaire. Here is the list of the online tools you can use to conduct an online survey (usually for free) outside the scope of this course: Google form Survey monkey Free online surverys Kwik surveys A questionnaire creation in Qualtrics starts with creation of a Qualtrics project. Each project consists of a survey, distribution record, and collection of responses and reports. There are three ways to create a questionnaire. First, you can create a new survey project from scratch. Second, you can create a new questionnaire from a copy of an existing questionnaire. Eventually, you can create surveys from a template in your Survey Library, or from an exported QSF file. By clicking on the following link you can download a template of a questionnaire in Qualtrics with guidelines and suggestions related to each question type. In order to create a completely new questionnaire, you need to do the following: Go to the Projects page by clicking “Projects” next to the XM logo Create a new project by clicking the blue button on the right side “Create project”: Go to “Create a project” Click on “survey”. Get started Enter a name for your survey and get started with a survey creation “Create a blank survey project”. 7./8./9. If you would like to import the example questionnaire, I provide above, you may do so using the “import from QSF file” option. If you would like to create a new questionnaire on the basis of an already existing one, then you choose “Copy a survey from an existing project” (you most likely will not need this option). If there is a questionnaire in the Qualtrics Library you would like to use, then you need to choose “From Library”, and indicate one library name in the dropdown menu (you most likely will not need this option). If you use the library or copy option, then you need to indicate the questionnaire you would like to copy. Now you are good to go! 10. Create your project 11.4.3 Questionnaire structure and contents Your task is to develop a questionnaire with approx. 30 questions (5 questions per person in your group) and there are some important things to keep in mind while developing a questionnaire, which will be highlighted in this section. 11.4.3.1 General structure The sequence of questions in a questionnaire plays an important role. Your questionnaire will usually start with an introductory page with a call-to-action to fill out the survey and a brief statement regarding the details about the survey (e.g., topic, duration). Note that you should carefully consider how much information you would like to disclose about the goal of the survey. If respondents are aware of the goal of the survey, they might strategically answer to influence the results. Nowadays, with the increasing sensitivity of respondents to privacy issues, it is also common practice to provide information about the usage of the data and if the responses are anonymous or not. If the questionnaire asks the respondents for personal information (e.g., an email address) you may also need a privacy statement. For transparency it is also recommended to provide an email-address that respondents may use in case of questions regarding the survey. After the introduction, it is usually a good idea to collect some information about the topic of your survey that you can later use to present descriptive statistics. At the same time, this is a good opportunity to familiarize the participants with the survey topic. For example, in a survey about store brands, you may show some logos of store brands and ask the respondents which store brands they know or purchase using a multiple-choice question. After the introductory questions you may proceed to collect information about your dependent and independent variables. If your research design contains an experimental manipulation, you need to carefully consider at which part of the questionnaire you will include the manipulation. The reason is that all questions that respondents answer after the manipulation may be influenced by it. It is usually a good idea to include most independent variables before the manipulation, while the dependent variable needs to be measured after the manipulation. Demographics (e.g., age, gender) should generally be included at the end of the questionnaire because these questions usually require less cognitive effort so that respondents can answer them reliably even at the end of the survey. It is also recommended to include sensitive questions at the end of the questionnaire since sensitive questions may lead respondents to exit the survey. You should also think about the respondents’ experience. For instance, it is usually better to spread the content over more short pages than have fewer long pages. Generally, respondents are reluctant to read and fill out long questionnaire pages. Hence, long pages will lead to a higher dropout rate. In order to reduce the dropout rate, you should state how long the survey will approximately take, in the introduction of the questionnaire. Consider that most people usually use their phones to fill it out. Think about how the questionnaire will appear on a phone screen too. In that regard, think of the length of questions especially. It should generally not take longer than 10 minutes to fill out the survey (depending on the incentive). Finally, the questionnaire structure should be aligned with the research design. For example, if your research design features an experiment, this needs to be reflected in the questionnaire (e.g., you need to assign the respondents randomly to the experimental conditions in case of a between-subjects comparison). 11.4.3.1.1 Questionnaire structure for experimental designs Questionnaire structure for a between-subjects experimental design In a between-subject design you randomly assign each respondent to different experimental conditions. They would then complete tasks only in the condition to which they are assigned. Consider the example of a survey analyzing the effect of different versions of an advertisement on purchase intention. Thus, one group of (randomly assigned) respondents will be exposed to one advertisement version while the other group (of randomly assigned respondents) will be exposed to another version. After that, both groups of respondents should express their intention to purchase the advertised product as shown in the following figure: Setting a randomizer in Qualtrics Here is a short description of how to set up a randomizer in Qualtrics, so that your participants are going to be assigned either to specific conditions. First, navigate to the Survey tab and open your Survey Flow. Then click Add Below or Add a New Element Here, depending to where you want to place a randomizer. Then choose Randomizer. Finally, you set the number (the one between - and +) to 1 and check the option “Evenly Present Elements”. Next you edit embedded data fields by naming it (e.g., “Group” and “Control”,“Test Group 1”,“Test Group 2”.) It is very important to think about the place to set a randomizer in a survey workflow. You want to place it always before you branch your survey flow, so that you can keep track of which respondent was exposed to which condition. If you do not set a randomizer before branching, it would remain unknown what condition each respondent was exposed to. Here is how it was done in our example of Qualtrics survey. After respondents are randomly assigned either to a specific condition, the embedded data field can be used as a criterion for branching, i.e., asking respondents in a condition A and B different blocks of questions. Questionnaire structure for a within-subjects experimental design This type of experimental design involves exposing each respondent to all experimental conditions you’re testing. For instance, we would like to test again the effect of two versions of an advertisement on purchase intentions, but this time in a within-subject design. First, each respondent will be exposed to the first version of advertisement and right after that asked to rate his/her intention to buy the advertised product. Subsequently, each participant will be shown another version of advertisement and again rate his/her intention to purchase the advertised product as shown in the figure below. Note that in situations in which the sequence of the conditions should not matter, a randomizer should be used to assign participants to see one or the other condition first. This is, for example, the case when you want to measure the effectiveness of two versions of an ad (i.e., you are interested in the effectiveness of a single ad and not the sequence of ads). However, in some cases (e.g., when measuring changes in attitudes due to a treatment) the order is important and everyone should be shown the questions in the same order. 11.4.3.2 General contents In this section, we will discuss some important issues regarding the contents of your questions. Generally, how you phrase the question impacts the reliability and validity of your variables, i.e., if it is possible for the respondent to understand what we intended to measure and whether the measure consistently measures the same variable across respondents. First, we will briefly highlight some points regarding the language and wording: Aim for brevity &amp; use simple language and avoid technical terms Don’t use more questions then needed (usually respondents’ fatigue increases when many questions with the same contents are included) Avoid asking double-barreled questions, i.e., a single question covering two issues (e.g., instead of asking “Do you think Nike Town offers better variety and prices than other Nike stores?”; –&gt; ask for price and variety separately) Make sure that your respondents are able to meaningfully answer your questions (e.g., asking for an opinion about a topic that the respondent may not be familiar with; –&gt; include a “don’t know” option; it is better than obtaining unreliable information) When asking participants to recall e.g., certain brands, decide between unaided and aided recall questions (unaided means you do not show the possible response option, which is harder but may also provide more valuable information) Use different question types to avoid respondent fatigue When asking participants to list something, minimize the effort required by respondents (e.g., open-ended questions like “Please list all the departments from which you purchased merchandise on your most recent shopping trip to department store X.” require more effort compared to providing the response options in the form of a multiple-choice question) When asking for information that could be considered sensitive (e.g. income, political beliefs), they should come at the end of the questionnaire and in form of response categories, rather than asking for specific figures (e.g., instead of asking the exact income, ask for income categories) Avoid leading questions that provide clues to what the answer should be and induce bias in a particular direction (e.g., ask “What is your favorite brand of toothpaste?” instead of “Is Colgate your favorite toothpaste?”). Avoid ambiguous words such as usually, normally, frequently, often, regularly, and other similar words that do not define frequency clearly enough. 11.4.3.3 Measurement scales and scaling techniques Every statistical analysis requires that variables have a specific levels of measurement (i.e., categorical = nominal &amp; ordinal; continuous = interval &amp; ratio). The measurement scales you choose for your questions in a survey will affect the answers you get and eventually determines the choice of statistical test you can apply. The flow chart below should help you to choosing a correct measurement scale for your variables depending on which type of analyses you plan to conduct (source: McElreath 2015). Here you can find another overview of statistical test associated with different types of independent and dependent variables. When it comes to scaling techniques, they are meant to study the relationship between objects. The basic scaling techniques classification is on comparative and non-comparative scales. 11.4.3.3.1 Non-comparative scales For non-comparative scales, each object is scaled independently of the other objects. The resulting data is supposed to be measured in an interval and ratio scaled. Itemized rating scales One of the most frequently used type of non-comparative scales are itemized rating scales: The respondents are provided with a scale that has a number or brief description associated with each category. The categories are ordered in terms of scale position, and the respondents are required to select the specified category that best describes the object being rated. The commonly used itemized rating scales are the Likert scale and the semantic differential A Likert scale has the following properties: Requires respondents to indicate their attitude towards the given object through the degree of agreement or disagreement with each of a series of statements within typically five or seven categories. Reversed code of some items increases validity. One limitation is time required to answer a question on a Likert scale. Compared to other itemized scaling techniques, Likert scale is more time consuming as each respondent is required to read every statement given in a questionnaire before assigning a numerical value to it. In the table below you can find a couple of commonly measured constructs in marketing research such as attitude, importance, purchase intention and similar. Semantic Differential A semantic differential scale has the following properties: Typically, participants rate objects on a number of itemized, seven-point rating scales bounded at each end by one of two bipolar adjectives. Semantic differential can measure respondent attitudes towards something (products,concepts, items, people…). It helps you find the respondent’s position is on a scale between two bipolar adjectives such as “Sweet-Sour” or “Bright-Dark”. In comparison to Likert scale, which uses generic scales (e.g. extremely dissatisfied to extremely satisfied), semantic differential questions are posed within the context of evaluating attitudes. Widely used rating scale in marketing research due to its versatility When using itemized rating questions (Likert and semantic differential), you should consider the following: Number of categories: Generally, there is no optimal number but the most frequently used number of categories are 5 and 7, depending on the context (e.g., how detailed the question can be answered). Balanced vs. unbalanced: Odd/even number of categories: Forced vs. non-forced response Verbal description: Continuous Rating Scales A continuous rating scale has the following properties: Participants rate the objects by placing a mark at the appropriate position on a line that runs from one extreme of the criterion variable to the other. One of the advantages of the continuous rating scale is that it is easy to administer. Once the ratings are collected, you also have the option of splitting up the obtained ratings into categories and then assign those depending on the category in which the ratings fall. You can see one example for a continuous rating scale below: 11.4.3.3.2 Comparative scales Comparative scales (or non-metric scaling) compare the stimulus object directly. As a result, the comparative data collected can only be interpreted in relative terms. In this section we will walk through the most important comparative scale types. Rank order A rank order question asks respondents to compare items to each other by placing them in order of preference. Note that the data obtained from a rank order question shows an order of a respondent’s preference, but not the difference between items. In the example below, if it turns out that the most important feature of a fitness tracker for a respondent is “Measuring steps” and the second most important feature “Calories burned”, we don’t know for how much more important the former is in comparison to the latter. Constant sum Using a constant sum question, respondents allocate a constant sum of units (e.g., points, dollars) among a set of stimulus objects with respect to some criterion. Thus, if you wish to obtain information about how much one attribute is preferred over another one, you may use a constant sum scale. The total box should always be displayed at the bottom to make it easier for respondents. A constant sum question permits collection of ratio data type. Constant sum is similar to rank order, but it carries specific units. With the data collected we are able to answer the question: what factor is the most important for our respondents when they go out for a dinner? With data obtained we would be able to express the relative importance of the options. 11.4.3.4 Other question types In this section, we present some examples of the most frequent types of questions students use. 11.4.3.4.1 Single choice question Single choice questions are questions where respondents select one response option from a set of pre-specified options. This usually makes sence, when the response options are mutually exclusive. In the example below, it is not possible to watch Netflix for 1-2 hours and more than 6 hours. Other examples are typical questions regarding the demographics (e.g., gender, education). Strictly speaking, Likert scales also represent a type of single choice question but since they usually appear in the form of multi-item batteries, this question type is highlighted separately here. The type of data obtained from this scale is categorical and you may use this type of scale, for example, to test for associations with other categorical variables (e.g., “Is there an association between gender and the hours of Netflix consumption?”). 11.4.3.4.2 Multiple choice question Multiple choice questions are questions where respondents select none, one or more response options from a set of pre-specified options. As an example, consider the question below regarding the familiarity of respondents with various store brands. Respondents could be familiar with none, one or more of the brands. The type of data you obtain from this scale is again categorical. It is usually a good idea to include a question like this at the beginning of the questionnaire to measure a respondents familiarity with brands and use this information to describe the sample (i.e., counting of responses per brand). For example, if you would conduct this research for one of the mentioned store brands, it would be interesting to know the share of respondents who are familiar with this brand compared to other brands. 11.4.3.4.3 Open-ended entry question An open entry type of question as a question asking the respondent to enter input in a specific format (e.g., text or numeric). Since this format requires cognitive effort, you should use it sparsely. However, the information that you can obtain from these scales can be quite valuable. In the first example below for numeric entries, you will obtain ratio data, which usually gives you lots of flexibility in terms of how what type of analyses you can run. For example, the willingness to pay measure in the example may be used as a dependent variable in a regression model. To avoid wrong entry types (e.g., someone might try to input text), you can specify the desired response format in most online survey software packages and it will conduct a validation check if the input format is correct when a respondent proceeds in the questionnaire. If you suspect that respondents might have issues using the intended input format, you may also use other scales types like the example below to make it easier for respondents to input the information (and for you to save time when analyzing the data). Our course, you may also include open-ended text questions like in the example below. The results could, for example be visualized in a word cloud or you could count the number of times a word has been stated. Since this question type requires cognitive effort, it is generally not recommended to force responses on these type of questions and allow respondents to proceed even if they may not be able to come up with three words. 11.4.3.5 More tipps for your questionnaire 11.4.3.5.1 Introduction As stated above, you should write a short an concise introduction to the questionnaire including a call-to-action, and information on the duration, topic, confidentiality, as well as contact details like in the example below. 11.4.3.5.2 Demographics As stated above, demographic questions are usually asked at the end of the questionnaire. You may generally include different demographic questions depending on the context and use different entry formats for them. For example, when asking about the respondents’ age, you may use response categories, or a drop-down menu, as shown below. The decision which format to choose generally requires you to trade-off between the additional information you gain by asking for the specific information (e.g., age, income) and the sensitivity of the information you ask. While it is generally desirable to have more detailed information (e.g., the exact age), this may not be feasible if many respondents may not want to disclose the exact information for privacy reasons. Hence, for income, it is usually recommended not to ask the specific income but to use categories instead. The selection of categories to include depends on the sample (e.g., if you expect many students with lower income levels, it might make sense to include categories in smaller increments at the lower end of the scale). If the place of residence is relevant to your research context, you may also collect this information in different ways, depending on the research context and sample. Note that there is also a difference between the current place of living and the nationality of a respondent as the examples show and you need to decide which one is relevant to your research context. It might even be relevant to ask for the place of residence within a country (e.g., if it is meaningful to differentiate between urban and non-urban areas). Education, gender, and occupation are other potentially relevant variables to include in the questionnaire. 11.4.3.5.3 Think carefully about your dependent variable When analyzing your data, the nature of the dependent variable is one limiting factor regarding the types of methods you can use. Usually, it is desirable to have more than less variability to explain in the data and for many methods (e.g., linear regression) you need the data to be measured using continuous scales. Thus, variables like the willingness to pay (ratio scale) are usually good candidates like in the example below. You may also be creative in the definition of your dependent variable. For example, you may also ask for the willingness to pay under two different scenarios and then compute the difference between the variables and use this difference (in Euros) as your dependent variable. In the example below, it was first assessed how much consumers are willing to pay for video streaming services like Netflix in the current form after describing the features (e.g., range of available content) of the service in detail. After that, respondents were told to imagine that the service is configured in the best possible way (e.g., all movies and TV series are available) and to state their willingness to pay under this scenario. In the analysis, you could now use the difference between the two values as the dependent variable and explain this additional willingness to pay as a function of the perceived limitations of the current offer to find our what the services need to improve. Individual itemized rating scales (e.g., Likert scales) are usually not good candidates for dependent variables since the variability is limited by the response option provided. For example, a 5-point Likert scale only provides 5 response options. In this case, it would be better to either use multiple items to measure the dependent variables, or use a different scale types like the ones below when measuring the purchase intention. 11.4.3.5.4 Uncovering dimensions underlying the topic of interest If the goal of your analysis is to uncover dimensions underlying the phenomenon of interest, it is usually best to do this using item-batteries in the example below. In your analysis, you may later inspect the relationships between the variables and explore if they can be meaningfully grouped together using principal component analysis. 11.4.3.5.5 Controlling for potentially confounding variables As indicated above, it is important to consider if there may be omitted variables that may bias the results you obtain from your model, especially if you did not obtain the data from an experiment with random assignment of participants to groups. For example, if you seek to explain the price premium that consumers are willing to spend for organic products and the level of education is one of your independent variables, you should consider which variables may be correlated with the education and the price premium variables. If, for example, consumers with a higher level of education are more likely to be vegetarians and vegetarians are willing to pay a higher price premium, you should control for the type of diet in your model in order not to overestimate the effect of education. 11.4.3.5.6 Using semantic differential questions Semantic differential questions like the ones shown below are usually a nice way of describing the perceptions of the products or brands under investigation. You may also use this type of data to highlight differences between groups (e.g., by visualizing the means for male and female consumers on each dimension). 11.4.3.5.7 Constant sum questions Although constant sum questions require more cognitive effort compared to simple ranking questions, you obtain more information from this type of question. An additional benefit of including a question like this is that it gets respondents to reflect on their own behavior and this might help to obtain more reliable responses when asking related questions later in the questionnaire. 11.4.3.5.8 Be precise in your wording of scenarios If you would like to obtain information about a specific aspect of a product or service, it is important to describe all other relevant aspects to ensure that all respondents base their response on the same information. If you are asking for the willingness to pay for a car-sharing service (like in the example below), it is important to provide information that describe all relevant aspects of this service (e.g., availability, parking options, etc.). Otherwise you might run the risk that respondents might put in information under the assumption that the service is not available in their hometown. 11.4.3.5.9 Price anchors If respondents are required to make a comparisons and it is reasonable to assume that your respondents are not fully informed, you may consider providing additional pieces of information. For example, when asking about the price premium for organic products, you may state the price of standard products like in the example below. 11.4.3.5.10 Keeping everything else contant in experiments If your questionnaire includes an experiment in which respondents are randomly assigned to different groups, it is usually important to keep all information constant, except for the variable that you are interested in. For example, if you are interested in differences between fair-trade and conventional apparel products, you should use the same brand and the same pictures and only vary the piece of information that you are interested in. Note that if you would like to avoid any existing associations with a brand, it is also an option to consider using a ficticious brand instead of real brand names. Condition A Condition B 11.4.4 Test your questionnaire Finally, before you distribute the questionnaire, there are some things to consider. First, you should always pretest your questionnaire before you start to collect data. Double-check all aspects of the questionnaire (content, wording, sequence, form &amp; layout, etc.). If possible, use test-respondents in the pretest that are similar to those who will be included in the actual survey. After each significant revision of the questionnaire, conduct another pretest, using a different sample of respondents. After pretesting your questionnaire you should be able to determine whether: The questions are properly framed The questions wording triggers any biases The questions are placed in the optimal order The questions are understandable Specifying questions are needed or some need to be eliminated Here are some more useful hints when setting up an online questionnaire: Add a progress bar so that respondents know how many pages are left (see “Look &amp; Feel” menu in Qualtrics). Remember to activate the “Force Response” field under “Validation Options” if you don’t want to allow respondents to skip questions. Check the usability on mobile devices using the preview option (make sure the “Mobile friendly” option is checked). 11.4.5 Data collection Your task in this group project is to collect real data from real people. More specifically, each group member is supposed to administer the questionnaire to 20 persons, i.e. a group of 6 = 120 people per group project. Usually, you would also need to take your sampling strategy into consideration (i.e., how to select the individuals who participate in the survey so that the sample is representative for the population). In this project, it is okay for you to use a convenience sampling approach and distribute the survey link to your family and friends. However, keep in mind that it usually helps with the analysis to have a heterogeneous sample (i.e., a more diverse sample). That is, if you only have students within a narrow age range in your sample, you may be limited in the ways you can explore heterogeneity (e.g., if the effects differ across age groups) because there is not enough variability to explore in your data. Usually, the story gets more interesting if you manage to uncover differences between individuals. Thus, if you can manage to increase the diversity of your sample (e.g., by including participants of different age groups, nationalities), this will allow you to explore the heterogeneity between these groups in your analyses. 11.5 Part 2: Data analysis 11.5.1 Guidelines for the submission and presentation For your data analysis &amp; final presentation, you should consider the following points: Problem statement Be clear about the management problem that you are trying to solve and the research question(s) you would like to answer Why is the problem relevant from a managerial perspective? Presentation structure Think about the overall structure of your presentation before you start designing the individual slides. Given your research problem/question, what slides/content do you need to have in the presentation to answer your research question or solve your problem? Please don’t include an accumulation of visualizations that lead nowhere. Instead, ask yourself, is this chart contributing to the answer of your research question? It is usually a good idea to start with an introduction to the topic and the research question(s) (e.g., include screenshots to explain the problem or show market figures that lead up to your research question). Next, you may describe and justify your research design (e.g., causal inference vs. predictive vs. descriptive) that you chose to address the research questions(s). After that, you should provide some descriptive statistics about your sample. In a next step, you should present your results regarding the central research questions. Remember to include all the necessary information that are required to understand the results (e.g., number of observations, wording of questions, etc.). It is usually a good idea to include appropriate visualizations of the variables that you are investigating. In fact, usually it is the visualizations in a presentation that tell the story. Thus, invest time to carefully consider different ways to visualize your data in order to tell your story. You do not need to include all assumption tests for the methods in the main body of the presentation. However, you should still test if the assumptions are met and include the results in the appendix in case there are questions. Finally, you should discuss/interpret your results with regard to the managerial research question(s) and list potential limitations of your research. Choice of appropriate statistical tests Please provide a justification for the choice of statistical test (e.g., t-test, regression, ANOVA, parametric vs. non-parametric) given your choices regarding the types of variables. This does not necessarily have to be in writing on the slides but it can also mean that you mention it briefly during your presentation which test you used. Remember to use the correct terminology and e.g., state the dependent and independent variables. If you use a regression model, also include a formal statement of the regression equation so it is clear what is being analyzed, e.g., \\(log(DV)=\\beta_0+\\beta_1*log(IDV1)+\\beta_2*log(IDV2)+\\epsilon\\). From the regression equation, it should be clear what type of model it is (linear regression vs. logistic regression), what the dependent variable is, what the independent variables are, and whether the values are transformed (e.g., logarithms) or not. If your analyses include multiple steps, make sure that it is clear to the audience why the individual steps were conducted and how they relate to each other (e.g., if you do a PCA first to reduce the dimensionality of the data and then include the resulting factor scores in a regression model, make sure that the purpose of each step is clear). Implementation of analysis Make sure that you store the R code you used for your analysis and submit it along with your data &amp; the slides to the assignment on Learn. This way, it is transparent how you arrived at your results. We should be able to replicate your results by running the code. This usually makes sence when you work on a project jointly with other team members. Visualizations Select appropriate plots to visualize your variables (e.g., scatter plot, boxplot, mean plot, histogram, wordcloud, cluster plots etc.) Not every visualization that you could potentially come up with really makes sense to put into a presentation. Again, ask yourself, is this chart contributing to the answer of your research question(s)? Do not forget legends and labels of the axes in your visualization! Make sure that the text on your graphics can be read easily. This means that when creating visualizations in ggplot, you may need to play around with the text size and plot size when writing the plot from R. If the text is too small relative to the graphic, you should either decrease the plot size, or increase the text size, or both. Remember to include all information that are required to understand the visualization (e.g., the wording of the question, the number of observations, axis labels) Keep it simple and make sure that a visualization can be easily understood. Adding too much information into a visualization is very often misleading for your audience and hurts more than you might think. In case a visualization is not easily comprehensible, you might think about adding a note that explains the audience how-to-read the visualization using an example. Reporting and interpretation of model results Report your analysis in an appropriate way (e.g., use the ‘stargazer’ package to report the results of regression models or use the ‘ggstatsplot’ package to provide test summaries). Interpret all relevant test statistics (e.g., test statistics, confidence intervals, coefficients and their significance and relative importance, R-squared, effect sizes, etc.). Discuss the recommendations derived from analysis. Do not skip this part! Always assume that you have an audience of decision makers. You need to tell them what to do based on your analysis. 11.5.2 Data export from Qualtrics You can export the answers to your survey in Qualtrics by going to the “Data &amp; Analysis” tab in your survey and clicking on the “Export &amp; Import” button on the right. One you choose the “Export Data…” option you will be presented with options for the data export. Make sure to choose “Use numeric values” and “Split multi-value fields into columns” (the latter is visible by expanding to “More options”) If you are not sure which numeric value corresponds to which answer, select a question in the “Survey” tab and click on “Recode values” to see/change which options correspond to which value. 11.5.3 Randomized groups You can check out the grouping variable(s)’s name(s) under “Survey Flow” in the “Survey” tab. These will be added to the exported data as a column with the name of the group as the value. In the example below there will be a column named “Group” with values “treat1”, “treat2”, and “ctrl”. 11.5.4 Importing Qualtrics data You can download the corresponding R-Code here You can download the green consumption data here You can download the carsharing data here To import the data to R you can use the “read_survey” function from the “qualtRics” library. library(qualtRics) green_consumption &lt;- read_survey(&quot;data/Green_Consumption.csv&quot;) head(green_consumption) At first some of the column names will be the question number. Question 8 in our example is: “How many times in a week do you do the grocery shopping for your household?” We can see the question and the first values using the str function str(green_consumption$Q8) ## num [1:278] 2 3 2 2 3 3 2 2 2 2 ... ## - attr(*, &quot;label&quot;)= Named chr &quot;How many times in a week do you do the grocery shopping for your household?&quot; ## ..- attr(*, &quot;names&quot;)= chr &quot;Q8&quot; Be careful when interpreting the values! They do not necessarily correspond directly to the answer given. Let’s take a look at “Recode values” for this question: The value \\(1\\) in our data actually corresponds to the answer \\(0\\), \\(2\\) to \\(1-2\\) and so on. It is important to keep that in mind when interpreting any results. 11.5.5 Data handling We can also get just the text of the question using get_label from the sjlabelled library. This function creates a labelled vector that we can subset using the column names in the data.frame to get the corresponding question. It is important to save the labels to a variable before transforming the data as some of the labels will be removed from the data.frame in the process (e.g., by transforming to a factor variable). library(sjlabelled) questions_green_consumption &lt;- get_label(green_consumption) questions_green_consumption[&quot;Q8&quot;] ## Q8 ## &quot;How many times in a week do you do the grocery shopping for your household?&quot; 11.5.5.1 Mutiple-choice, single answer For single answer multiple choice questions we can create a factor variable using the corresponding answers as labels. green_consumption$Q8 &lt;- factor(green_consumption$Q8, levels = 1:4, labels = c(&quot;0&quot;, &quot;1-2&quot;, &quot;3-4&quot;, &quot;&gt;4&quot;)) head(green_consumption$Q8) ## [1] 1-2 3-4 1-2 1-2 3-4 3-4 ## Levels: 0 1-2 3-4 &gt;4 11.5.5.2 Multiple answers In case there are multiple possible answers there will be multiple columns corresponding to the same question but different answers. For example, if we ask people for reasons why they use a car there are multiple options which are not mutually exclusive. carsharing &lt;- read_survey(&quot;data/Car_sharing.csv&quot;) questions_carsharing &lt;- get_label(carsharing) questions_carsharing[&quot;Q6_1&quot;] ## Q6_1 ## &quot;For what reason(s) do you use your car? - to visit somebody&quot; questions_carsharing[&quot;Q6_2&quot;] ## Q6_2 ## &quot;For what reason(s) do you use your car? - to go shopping&quot; questions_carsharing[&quot;Q6_3&quot;] ## Q6_3 ## &quot;For what reason(s) do you use your car? - to commute (work)&quot; The value of such a column is going to be \\(1\\) for the participants that chose the option and NA otherwise. We can easily replace all NAs with \\(0\\) if we would like to. The startsWith function can be helpful to select the names of multiple columns corresponding to the same question. Then replace function can replace the NA values with 0: head(carsharing$Q6_1) ## [1] 1 NA NA NA NA 1 carsharing[, startsWith(names(carsharing), &quot;Q6&quot;)] &lt;- replace(carsharing[, startsWith(names(carsharing), &quot;Q6&quot;)], is.na(carsharing[, startsWith(names(carsharing), &quot;Q6&quot;)]), 0) carsharing[, startsWith(names(carsharing), &quot;Q6&quot;)] This is useful, for example, to easily calculate the share of respondents who chose a given option share_go_shopping &lt;- mean(carsharing$Q6_2) share_go_shopping ## [1] 0.362069 11.5.5.3 Input text fields for numeric values Some fields allow for text input but we expect a certain format (e.g., a currency value formated as xxx.xx to assess willingness to pay). However, even if we instruct participants to enter values in that format they might not follow the instructions exactly. Let’s look at some example answers we might get: questions_green_consumption[&quot;Q33&quot;] ## Q33 ## &quot;How much would you pay for a kg (kilogram) of these apples?Please state your willingness to pay in the field below (xx.xx).&quot; green_consumption$Q33[c(1,2,6,24,34,58,82,98,102,157,158)] ## [1] &quot;02.50&quot; &quot;3&quot; &quot;04,50&quot; &quot;5,10€&quot; ## [5] &quot;€4,--&quot; &quot;04.00 Euro&quot; &quot;15 USD&quot; &quot;90,000.00&quot; ## [9] &quot;$5&quot; NA &quot;Error picture&quot; The first two examples can be converted to numbers easily: as.numeric(green_consumption$Q33[c(1,2)]) ## [1] 2.5 3.0 However the third will fail due to the comma. as.numeric(green_consumption$Q33[6]) ## [1] NA We can use the stringr package to replace all , with . and convert the third example (and equivalent values in the data) to numeric: library(stringr) green_consumption$Q33 &lt;- str_replace(green_consumption$Q33, &#39;,&#39;, &#39;.&#39;) as.numeric(green_consumption$Q33[6]) ## [1] 4.5 However, this creates a problem for values like \\(90,000.00\\) since those are now \\(90.000.00\\). We can identify them with which(str_count(..., fixed('.')) &gt; 1) which returns the row numbers of rows containing more than one .: bad_rows &lt;- which(str_count(green_consumption$Q33, fixed(&#39;.&#39;)) &gt; 1) green_consumption$Q33[bad_rows] ## [1] &quot;90.000.00&quot; In this case we only need to replace the first . but not the second. str_remove removes only the first occurrence (whether the resulting value is reasonable is up to you to judge): green_consumption$Q33[bad_rows] &lt;- str_remove(green_consumption$Q33[bad_rows], fixed(&#39;.&#39;)) green_consumption$Q33[bad_rows] ## [1] &quot;90000.00&quot; If we had values with a varying number of “.” we would like to remove we can use a while loop that runs as long as we still have rows with more than one .: values &lt;- c(&quot;90.1&quot;, &quot;12.345.000.23&quot;, &quot;12.000.4&quot;) bad_rows &lt;- which(str_count(values, fixed(&#39;.&#39;)) &gt; 1) while(length(bad_rows) &gt; 0){ values[bad_rows] &lt;- str_remove(values[bad_rows], fixed(&#39;.&#39;)) bad_rows &lt;- which(str_count(values, fixed(&#39;.&#39;)) &gt; 1) } values ## [1] &quot;90.1&quot; &quot;12345000.23&quot; &quot;12000.4&quot; Similarly we can remove € and the word euro or eur and -- with str_remove_all by chaining them together using |. It is also beneficial to ignore the case of the characters by wrapping the strings to be replaced in regex(..., ingnore_case = TRUE): green_consumption$Q33 &lt;- str_remove_all(green_consumption$Q33, regex(&#39;€|euro|eur|-&#39;, ignore_case = TRUE)) green_consumption$Q33[c(1,2,6,24,34,58,82,98,102,157,158)] ## [1] &quot;02.50&quot; &quot;3&quot; &quot;04.50&quot; &quot;5.10&quot; ## [5] &quot;4.&quot; &quot;04.00 &quot; &quot;15 USD&quot; &quot;90000.00&quot; ## [9] &quot;$5&quot; NA &quot;Error picture&quot; Values in a different currency can be converted using a given exchange rate. We first look for rows including $ or USD using the grepl function which unfortunately uses a slightly different syntax than stringr. Since $ also has a special meaning we need to prepend \\\\ to let R know that we mean a literal $. dollar_rows &lt;- grepl(&quot;\\\\$|usd&quot;, green_consumption$Q33, ignore.case = TRUE) dollar_values &lt;- green_consumption$Q33[dollar_rows] dollar_values ## [1] &quot;0.50$&quot; &quot;5$&quot; &quot;15 USD&quot; &quot;$4.50&quot; &quot;$5&quot; &quot;$5&quot; Now we can remove everything non-numeric, multiply by the exchange rate, and replace the dollar values in the column with the corresponding euro equivalent. exchange_rate &lt;- 0.9 dollar_values &lt;- str_remove_all(dollar_values, regex(&quot;\\\\$|usd&quot;, ignore_case = TRUE)) green_consumption$Q33[dollar_rows] &lt;- as.numeric(dollar_values) * exchange_rate green_consumption$Q33[dollar_rows] ## [1] &quot;0.45&quot; &quot;4.5&quot; &quot;13.5&quot; &quot;4.05&quot; &quot;4.5&quot; &quot;4.5&quot; green_consumption$Q33[c(1,2,6,24,34,58,82,98,102,157,158)] ## [1] &quot;02.50&quot; &quot;3&quot; &quot;04.50&quot; &quot;5.10&quot; ## [5] &quot;4.&quot; &quot;04.00 &quot; &quot;13.5&quot; &quot;90000.00&quot; ## [9] &quot;4.5&quot; NA &quot;Error picture&quot; Once we have formatted all values that are actually numbers correctly we can simply convert the whole variable to numeric replacing all non-numeric values with NA (which will result in a warning that we can ignore): as.numeric(green_consumption$Q33[c(1,2,6,24,34,58,82,98,102,157,158)]) ## [1] 2.5 3.0 4.5 5.1 4.0 4.0 13.5 90000.0 4.5 ## [10] NA NA For the whole variable: green_consumption$Q33 &lt;- as.numeric(green_consumption$Q33) str(green_consumption$Q33) ## num [1:278] 2.5 3 1.99 2.99 2.5 4.5 1.3 3 4 1.6 ... 11.5.5.4 Rankings In the following example we use data generated from a topic selection process similar to the one you did when you chose your project topic. In order to make ranking questions easier to analyze we first want to get them into a format where we have one column for the group (this could also be a user id), one column for the rank, and one for the topic (i.e., a “long” format). We can use the pivot_longer function from the tidyr package to combine all columns that start with “Q1” (our ranking question; cols = starts_with(\"Q1\")) into one long column. library(tidyr) topic_selection &lt;- read_survey(&quot;data/topic_selection.csv&quot;) topic_selection &lt;- pivot_longer(topic_selection, cols = starts_with(&quot;Q1&quot;), values_to = &quot;rank&quot;) topic_selection Next we want to filter out all the rows that do not contain ranks and those that have missing values for the ranks (i.e., were not selected at all by a given group; [endsWith(topic_selection$name, \"RANK\") &amp; !is.na(topic_selection$rank), ]). To get the topic of a row we extract the digits ([0-9]+, where the plus indicates one or more) from the name variable that come before _RANK ((?=_RANK)). topic_selection &lt;- topic_selection[endsWith(topic_selection$name, &quot;RANK&quot;) &amp; !is.na(topic_selection$rank), ] topic_selection$topic &lt;- as.factor(as.numeric(str_extract(topic_selection$name, &quot;[0-9]+(?=_RANK)&quot;))) topic_selection To get a feeling for how popular a question is we might also want to calculate the counts for each topic and rank. For plotting it is also convenient to have the rank as a factor in decreasing order of the rank (see below). rank_counts &lt;- data.frame(table(topic_selection$rank, topic_selection$topic)) colnames(rank_counts) &lt;- c(&quot;rank&quot;, &quot;topic&quot;, &quot;count&quot;) rank_counts$rank &lt;- factor(rank_counts$rank, levels = unique(rank_counts$rank)[order(unique(rank_counts$rank), decreasing = TRUE)]) rank_counts 11.5.6 Visualizations 11.5.6.1 Multiple-choice Multiple choice questions can be visualized using barplots of the counts of each possible answer. First we want to get appropriate labels for the different possible choices. For that we need to extract the part of the question that is specific to the option. Since the answers are appended to the question and separated by a - in the labels assigned by Qualtrics we can use pattern matching function to extract the relevant part. This pattern looks as follows: It starts with (?&lt;=- ) which tells the program to look for a - followed by a space. The (?&lt;=) part indicates that we want to look for the pattern but only extract text that comes after it. .* will extract any text Therefore, we will get any text that follows the - pattern. Similarly we can extract just the question with .*(?= -) matching anything before the - pattern. q6_columns &lt;- names(carsharing)[startsWith(names(carsharing), &quot;Q6&quot;)] q6_labels &lt;- questions_carsharing[q6_columns] q6_answers &lt;- str_extract(q6_labels, &quot;(?&lt;=- ).*&quot;) q6_answers ## [1] &quot;to visit somebody&quot; &quot;to go shopping&quot; ## [3] &quot;to commute (work)&quot; &quot;to commute (education)&quot; ## [5] &quot;to transport goods&quot; &quot;to escort somebody&quot; ## [7] &quot;for business reasons&quot; &quot;for airport transfer&quot; ## [9] &quot;for leisure/cultural activities&quot; q6_question &lt;- str_extract(questions_carsharing[&quot;Q6_1&quot;], &quot;.*(?= -)&quot;) q6_question ## [1] &quot;For what reason(s) do you use your car?&quot; The counts are just the column sums of the variables we transformed above. We add the reasons as labels for the y-axis and sort the factor by the corresponding counts. This ensures that the categories with the largest counts will come first in the plot. In addition we can aid interpretability of counts by adding sequential coloring based on the count by setting fill=count in the aesthetics (aes). A nice package to help with colors is colorspace which is a companion to R’s internal color system. R (since version 4.0) distinguishes colors by hue (type of color), chroma (colorfulness), and luminance (brightness). To get a feeling for these parameters let’s take a look at a plot that keeps all but one fixed (the last color is always the first blue in the “Blues 2” palette used in the visualization below): In addition the grid on the y-axis does not add to the interpretability of the plot and should therefore be removed theme(panel.grid.major.y = element_blank()). Optionally the counts can be added to the plot (geom_text(aes(label = count), hjust = -.2)). library(ggplot2) library(colorspace) q6_counts &lt;- colSums(carsharing[,q6_columns]) q6_data &lt;- data.frame(count = q6_counts, reason = q6_answers) q6_data$reason &lt;- factor(q6_data$reason, levels = q6_data$reason[order(q6_data$count)]) ggplot(q6_data[order(q6_data$count, decreasing = TRUE),], aes(x = count, y = reason, fill = count)) + geom_bar(stat=&quot;identity&quot;, show.legend = FALSE) + geom_text(aes(label = count), hjust = -.2) + ylab(&quot;&quot;) + theme_bw() + theme(panel.grid.major.y = element_blank()) + scale_fill_continuous_sequential(palette = &quot;Blues 2&quot;) An important aspect when choosing colors for your plots is color vision deficiency (cvd) which affects about 10% of men (and 0.4% of women). For our plot we can simulate cvd as follows and observe that it works well even for people with cvd (the colors you use in your projects should work well for people with cvd but you should not include this plot): swatchplot(hcl.colors(nrow(q6_data), palette = &quot;Blues 2&quot;), cvd = TRUE) If you would like to explore the available colors more check out the hcl_wizard() function (or visit hclwizard.org) which launches a small app and lets you choose a color scheme. Once you click on Return to R in the app a function which generates the selected colors will be returned. Another option to visualize multiple choice questions is to plot the percentage of respondents who chose a certain answer (note that this will not generally sum up to 1 if multiple answers are possible). The only thing we have to change is to calculate the shares (careful with the denominator!). In this case we might also want to expand the x-axis to 0.4 (expand_limits(x = 0.4) to account for the extra space necessary for the labels. q6_data$share &lt;- q6_data$count / nrow(carsharing) ggplot(q6_data[order(q6_data$share, decreasing = TRUE),], aes(x = share, y = reason, fill = share)) + geom_bar(stat=&quot;identity&quot;, show.legend = FALSE) + geom_text(aes(label = round(share, digits =2)), hjust = -.1) + ylab(&quot;&quot;) + theme_bw() + theme(panel.grid.major.y = element_blank()) + scale_fill_continuous_sequential(palette = &quot;Blues 2&quot;) + expand_limits(x = 0.4) 11.5.6.2 Rankings To visualize the distribution of rankings we can use boxplots. Since 1 is the highest rank and 5 the lowest, we can reverse the y-axis (scale_y_reverse). ggplot(topic_selection, aes(x = topic, y = rank, group = topic)) + geom_boxplot() + theme_bw() + theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) + scale_y_reverse() Another way to visualize the rankings is a stacked barplot in which we stack the counts of all ranks. Compared to the barplot in the carsharing example above the colors are now more important since we need them to distinguish the ranks. Therefore, a multi-hue sequential (see hcl_palettes(\"sequential multi\", plot = TRUE)) scheme is appropriate. One has to be careful with this type of approach if the number of groups gets larger. It is not easy to find more than 7-8 easily distinguishable colors. In addition we can emphasize the y-grid lines (panel.grid.major.y = element_line(color=\"black\")) and make the bars slightly transparent (alpha = 0.8) to make it easier to see the counts. ggplot(rank_counts, aes(x=topic, y=count, fill=rank)) + geom_bar(stat=&quot;identity&quot;) + theme_bw() + scale_y_continuous(breaks = 0:10) + theme(panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.major.y = element_line(color=&quot;black&quot;)) + scale_fill_discrete_sequential(&quot;Inferno&quot;, alpha = 0.8) 11.5.6.3 Constant sum In many cases we want to assess the relative frequency or share of usage of different products/services. One such case is the share of wallet of different types of grocery providers. questions_green_consumption[&quot;Q34_1...19&quot;] ## Q34_1...19 ## &quot;Where do you usually shop for groceries?\\n\\n\\nPlease allocate 100 points among the different options according to the frequency you shop there. - Discounter&quot; questions_green_consumption[&quot;Q34_2&quot;] ## Q34_2 ## &quot;Where do you usually shop for groceries?\\n\\n\\nPlease allocate 100 points among the different options according to the frequency you shop there. - Supermarket&quot; questions_green_consumption[&quot;Q34_3&quot;] ## Q34_3 ## &quot;Where do you usually shop for groceries?\\n\\n\\nPlease allocate 100 points among the different options according to the frequency you shop there. - Farmers market&quot; In this case the searching the names for “Q34” also yields a question that we are not interested in and it is removed when getting the full labels. In addition, we have to distinguish between pre-defined answers and “other” which also has a text field. shareofwallet_names &lt;- names(green_consumption)[startsWith(names(green_consumption), &quot;Q34&quot;)] shareofwallet_labels &lt;- questions_green_consumption[shareofwallet_names[-length(shareofwallet_names)]] shareofwallet_answers &lt;- str_extract(shareofwallet_labels, &quot;(?&lt;=- ).*&quot;) shareofwallet_answers ## [1] &quot;Discounter&quot; &quot;Supermarket&quot; ## [3] &quot;Farmers market&quot; &quot;Directly from the farmer&quot; ## [5] &quot;Other:&quot; &quot;Other: - Text&quot; shareofwallet_data &lt;- green_consumption[, shareofwallet_names[-length(shareofwallet_names)]] shareofwallet_text &lt;- shareofwallet_data$Q34_5_TEXT c(na.omit(shareofwallet_text)) ## [1] &quot;Online&quot; ## [2] &quot;Small family owned market&quot; ## [3] &quot;Grocery Store&quot; ## [4] &quot;Got Chicken &amp; self made bread from my mother in-law&quot; ## [5] &quot;Online&quot; ## [6] &quot;Small grocery store&quot; ## [7] &quot;Organic shops&quot; shareofwallet_data &lt;- na.omit(subset(shareofwallet_data, select = -Q34_5_TEXT)) colnames(shareofwallet_data) &lt;- shareofwallet_answers[-length(shareofwallet_answers)] shareofwallet_data First we can take a look at the correlation of the points allocated to different types. In this case a diverging color scheme is appropriate. library(ggcorrplot) colors &lt;- hcl.colors(3, palette = &quot;Blue-Yellow&quot;) ggcorrplot(cor(shareofwallet_data), lab = TRUE, colors = colors) For easier plotting of distributions we should transform the data to a long format and remove the : from Other:. shareofwallet_data &lt;- pivot_longer(shareofwallet_data, cols = everything(), names_to = &quot;type&quot;, values_to = &quot;points&quot;) shareofwallet_data$type &lt;- str_remove(shareofwallet_data$type, &quot;:&quot;) shareofwallet_data It is easier to see the relative popularity of each store type if we sort the boxplots by the respective medians. This is done by sorting the factor levels accordingly. shareofwallet_median &lt;- sort(c(by(shareofwallet_data$points, shareofwallet_data$type, median)), decreasing = TRUE) shareofwallet_data$type &lt;- factor(shareofwallet_data$type, levels = names(shareofwallet_median)) ggplot(shareofwallet_data, aes(y = points, x=type)) + geom_boxplot() + theme_bw() + theme(panel.grid.major.x = element_blank()) For the text part of the “Other” variable a word cloud can be used to visualize the answers library(wordcloud) shareofwallet_counts &lt;- c(by(na.omit(shareofwallet_text), na.omit(shareofwallet_text), length)) wordcloud(names(shareofwallet_counts), shareofwallet_counts) 11.5.6.4 Comparing groups We can also use the previous plots to show differences between groups (gender, experimental, etc.). A natural fit to add another “dimension” is the facet_wrap layer in ggplot2. First we select the appropriate variables. green_consumption$gender &lt;- factor(green_consumption$Q29, levels = c(1,2), labels = c(&quot;F&quot;, &quot;M&quot;)) gender_sow &lt;- green_consumption[,c(shareofwallet_names[1:4], &quot;gender&quot;)] names(gender_sow)[1:4] &lt;- shareofwallet_answers[1:4] gender_sow Second the data is transformed to a long format again and then the distribution of points is shown for each gender and each store type observed in the data. By adding scales = \"free_y\" to the facet_warp layer, the y-axis values can vary across the plots. gender_sow &lt;- pivot_longer(gender_sow, cols = !last_col(), names_to = &quot;type&quot;, values_to = &quot;points&quot;) gender_sow &lt;- gender_sow[!is.na(gender_sow$gender), ] ggplot(gender_sow, aes(x = gender, y = points, fill = gender)) + geom_boxplot() + theme_bw() + theme(panel.grid.major.x = element_blank()) + facet_wrap(~type, scales = &quot;free_y&quot;) + xlab(&quot;&quot;) + scale_fill_discrete_qualitative(palette = &quot;Dynamic&quot;) Another way to compare multiple values across groups is a radar plot. First we calculate the share of respondents by gender for a couple of car use-cases (aggregate(. ~ gender, data = car_gender, mean) where . indicates all other variables). Then we create a radar plot where the color indicates the gender. Since the labels are multiple words long we can rotate them to make them fit better (theme(axis.text.x = element_text(angle = c(-30,...)))). library(ggiraphExtra) carsharing$gender &lt;- factor(carsharing$Q26, levels = c(1,2), labels = c(&quot;F&quot;, &quot;M&quot;)) car_gender &lt;- carsharing[,c(q6_columns, &quot;gender&quot;)] car_gender_mean &lt;- aggregate(. ~ gender, data = car_gender, mean) names(car_gender_mean) &lt;- c(&quot;gender&quot;, q6_answers) ggRadar(car_gender_mean, aes(color = gender) ) + theme_bw() + #theme(axis.text.x = element_text(angle = c(30,50,89, 0,0,0, 89,45,10, 0))) + # scale_color_discrete_qualitative(palette = &quot;Dynamic&quot;) We can also create a pairplot to compare statistics across groups using the ggPair function. Notice that despite the last two functions are provided by the ggiraphExtra package, they are producing ggplot2 compatible plots. Thus, we can still use ggplot2 layers for theme and coloring. #ggPair(car_gender_mean, horizontal = TRUE, aes(color = gender)) + # ggtitle(&quot;Average response across genders&quot;) + # theme_bw() + # scale_color_discrete_qualitative(palette = &quot;Dynamic&quot;) 11.5.6.5 Likert scales For likert scales that range for example from “strongly agree” to “strongly disagree” a diverging barplot is appropriate. The likert function from the HH package can be used to easily create such a plot. Unfortunately, this function does not produce a ggplot and therefore we need slightly different syntax. The legend is called key in the likert plot and we can format the automatically generated key using auto.key = list(columns = 2, title= \"\"), producing two columns and removing the legend title. In addition we can add vertical lines to the plot with panel.abline(v=seq(-100,50,by=50),col=\"lightgrey\") which has to be wrapped in a function that finally generates the plot. library(HH) carsharing_benefits &lt;- carsharing[, startsWith(names(carsharing), &quot;Q13_&quot;)] carsharing_benefits benefit_labels &lt;- questions_carsharing[ startsWith(names(carsharing), &quot;Q13_&quot;)] names(carsharing_benefits) &lt;- str_extract(benefit_labels, &quot;(?&lt;=- ).*&quot;) carsharing_benefits &lt;- pivot_longer(carsharing_benefits, cols = everything()) carsharing_benefits carsharing_benefits$value &lt;- factor(carsharing_benefits$value, levels = 1:7, labels = c( &quot;strongly disagree&quot;, &quot;disagree&quot;, &quot;somewhat disagree&quot;, &quot;neutral&quot;, &quot;somewhat agree&quot;, &quot;agree&quot;, &quot;strongly agree&quot;)) likert(table(carsharing_benefits), main = &quot;&quot;, ylab = &quot;&quot;, xlab = &quot;number of respondents&quot;, col = hcl.colors(7, palette = &quot;Blue-Red 2&quot;, rev = TRUE), auto.key = list(columns = 2, title= &quot;&quot;), panel=function(...){ panel.abline(v=seq(-100,50,by=50),col=&quot;lightgrey&quot;) panel.likert(...) } ) 11.5.7 Working with factors 11.5.7.1 Reordering factors Recall our share-of-wallet plot above shareofwallet_median &lt;- sort(c(by(shareofwallet_data$points, shareofwallet_data$type, median)), decreasing = TRUE) shareofwallet_data$type &lt;- factor(shareofwallet_data$type, levels = names(shareofwallet_median)) ggplot(shareofwallet_data, aes(y = points, x=type)) + geom_boxplot() + theme_bw() + theme(panel.grid.major.x = element_blank()) We set the order of the types of store by ordering the levels when we created the factor. However, if we already have a factor that we would like to reorder we can use the fct_reorder function from the forcats package (which has the added benefit of having a cat themed package in our project). This function takes the factor as the first argument. The second argument is the variable by which we want to sort and the third is the function applied in order to sort the groups in the factor (ascending by default). In the example below we sort by the lowest to highest variance (var), for example. library(forcats) ggplot(shareofwallet_data, aes(y = points, x=fct_reorder(type, points, var))) + geom_boxplot() + xlab(&quot;type&quot;) + theme_bw() + theme(panel.grid.major.x = element_blank()) A special version of that function is fct_infreq which sorts the factor by frequency of occurrence. We can recreate the topic selection plot with the bars ordered by the total amount of times a topic was selected. Notice also that we can use a slightly different way of creating the plot (without calculating the counts first). topic_selection$rank &lt;- factor(topic_selection$rank, levels = 5:1) ggplot(topic_selection, aes(x=fct_infreq(topic), fill=rank)) + geom_bar(stat = &quot;count&quot;) + theme_bw() + xlab(&quot;topic&quot;) + scale_y_continuous(breaks = 0:10) + theme(panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.major.y = element_line(color=&quot;black&quot;)) + scale_fill_discrete_sequential(&quot;Inferno&quot;, alpha = 0.8) Another useful factor-reordering functions is fct_rev to reverse the order (can be combined with the others). 11.5.7.2 Combining / collapsing factors In some cases we want to combine multiple factor values to one (e.g., when we do not have enough observations in each group). Let’s say we want to combine a 7-point likert scale to only 3 levels for an analysis. We can use the fct_collapse function for that. str(carsharing_benefits$value) ## Factor w/ 7 levels &quot;strongly disagree&quot;,..: 2 4 2 1 5 4 2 6 6 6 ... carsharing_benefits$value_collapsed &lt;- fct_collapse(carsharing_benefits$value, disagree = c(&quot;strongly disagree&quot;, &quot;disagree&quot;), neutral = c(&quot;somewhat disagree&quot;, &quot;neutral&quot;, &quot;somewhat agree&quot;), agree = c(&quot;agree&quot;, &quot;strongly agree&quot;)) carsharing_benefits[, c(&quot;value&quot;, &quot;value_collapsed&quot;)] 11.5.7.3 Handling choice and text input For some questions predefined answers are provided but participants can also fill in their own answers. In the data this will lead to multiple columns being added for such a question. Below we see the countries the participants were from. We had checkboxes for “Austria” and “Germany” and a text field for all other countries. We can use the case_when function from the dplyr package to combine the columns. For each row it checks whether the left-hand-side statement (left of ~) is TRUE and either returns the right-hand-side if that is the case or moves on to the next one. By specifying the last statement as TRUE ~... we define a default action if none of the above are TRUE. library(dplyr) country_questions &lt;- c(&quot;Q28_1&quot;, &quot;Q28_2&quot;, &quot;Q28_3_TEXT&quot;) questions_green_consumption[country_questions] ## Q28_1 ## &quot;Where do you live? - Selected Choice - Austria&quot; ## Q28_2 ## &quot;Where do you live? - Selected Choice - Germany&quot; ## Q28_3_TEXT ## &quot;Where do you live? - Other - Text&quot; green_consumption[,country_questions] green_consumption$country &lt;- as.factor(case_when( green_consumption$Q28_1 == 1 ~ &quot;Austria&quot;, green_consumption$Q28_2 == 1 ~ &quot;Germany&quot;, TRUE ~ green_consumption$Q28_3_TEXT )) str(green_consumption$country) ## Factor w/ 14 levels &quot;Australia&quot;,&quot;Austria&quot;,..: 2 2 2 2 2 2 2 2 3 2 ... However, this leads to many factor levels that have very few observations each. fct_count(green_consumption$country) If we only want to keep “Austria”, and “Germany” and combine all other countries to “Other” we can use the convenience function fct_other and specify only the levels we want to keep. green_consumption$country_other &lt;- fct_other(green_consumption$country, keep = c(&quot;Austria&quot;, &quot;Germany&quot;)) green_consumption[, c(&quot;country&quot;, &quot;country_other&quot;)] If we do want to keep the countries manually specified we have to check for different spellings for the same country. For string comparisons it can sometimes help to convert all to lower case (e.g., to see that “USA”, “Usa”, and “usa” are equal) green_consumption$country &lt;- tolower(green_consumption$country) unique(green_consumption$country) ## [1] &quot;austria&quot; &quot;finland&quot; &quot;germany&quot; &quot;viet nam&quot; ## [5] NA &quot;australia&quot; &quot;vietnam&quot; &quot;uzbekistan&quot; ## [9] &quot;portu&quot; &quot;usa&quot; &quot;united states&quot; &quot;singapore&quot; ## [13] &quot;hanoi&quot; &quot;norway&quot; Then we can easily combine different spellings using fct_collapse green_consumption$country &lt;- fct_collapse(green_consumption$country, usa = c(&quot;usa&quot;, &quot;united states&quot;), vietnam = c(&quot;viet nam&quot;, &quot;vietnam&quot;, &quot;hanoi&quot;)) unique(green_consumption$country) ## [1] austria finland germany vietnam &lt;NA&gt; australia ## [7] uzbekistan portu usa singapore norway ## 10 Levels: australia austria finland germany vietnam norway portu ... uzbekistan Finally, we can capitalize all countries (str_to_title(green_consumption$country)) and recode the US to be all upper case (fct_recode(green_consumption$country, USA = \"Usa\")). green_consumption$country &lt;- str_to_title(green_consumption$country) green_consumption$country &lt;- fct_recode(green_consumption$country, USA = &quot;Usa&quot;) unique(green_consumption$country) ## [1] Austria Finland Germany Vietnam &lt;NA&gt; Australia ## [7] Uzbekistan Portu USA Singapore Norway ## 10 Levels: Australia Austria Finland Germany Norway Portu Singapore ... Vietnam "],["faq.html", "12 FAQ 12.1 Common error messages 12.2 Installation of R packages 12.3 Issues with statistics and data 12.4 Errors related to specific methods 12.5 General settings and options 12.6 Data visualization/output issues 12.7 Issues with functions and function arguments 12.8 Issues with R Markdown 12.9 New questions", " 12 FAQ In this section, we provide answers to questions that students of previous cohorts encountered. We grouped the answers by topic and hope that you will find the answers useful. 12.1 Common error messages A general note on error messages We usually load data into a data.frame in our R Session (e.g., from a CSV file using data &lt;- read.csv(\"file.csv\")). It is important to note that this data.frame is not the original data file, but just a copy of the file that is stored on the hard drive. This means that any changes we make to the data.frame are not persistent/permanent and are not written to the original file (unless it is overwritten explicitly by using e.g., write.csv(data, \"file.csv\"), which we usually don’t do). Therefore, it is important to write all commands in an R/Rmd file such that we can re-run the analysis the next time we open R and reproduce the results. This also means that if you cannot solve an issue using the suggested solutions to specific error messages mentioned on this page, it is completely safe to restart R or delete variables from the Global Environment. You just have to re-run our code to get the variables and results back. Therefore, your code files should always be fully reproducible using only the R/Rmd and data files. In addition your R/Rmd files should run linearly from the first to the last line and should not depend on “jumping” back and forth. The files that you obtain from us from this course are examples of reproducible files and in case you a stuck with a problem at a certain point, you can just save the code file and run it again up until the point where you were before the error occurred. This means that a general procedure for dealing with errors that cannot be solved in any other way would be as follows: Save your code file and restart your R Session (Session -&gt; Restart R in RStudio) Go back to the beginning of your code file and run it line by line (Ctrl-Enter in RStudio) If your error persists check the affected line for typos/differences in spelling. If the error occurs in a function make sure you are passing the arguments correctly (see help file for the function using ?FUNCTIONNAME) Look at all the variables in your Global Environment and make sure they are in the format you expect them to be (e.g., if a file you expect to be a data frame is really a specified as a data frame). See the list of common error messages for more explanations below Nothing helped: Ask in the forum. If possible with a screenshot that explains your issue, or - better yet - a minimal reproducible example. In the following capitalized words are stand-ins for specific calls/symbols/functions. Error in file(file, “rt”): cannot open the connection This error message sometimes has an additional warning: In addition: Warning message: In file(file, &quot;rt&quot;) : cannot open file &#39;FILE&#39;: No such file or directory This error occurs either when a file name is not spelled correctly or the file is not in the directory where R is looking for it. You can check the directory R is looking at by executing the function getwd(). To set a new directory use setwd(DIRECTORY). Note that you cannot just paste a path from Windows Explorer to setwd since the directory has to be in the format: setwd(\"C:/Users/USERNAME/Documents\") but Windows Explorer uses C:\\Users\\USERNAME\\Documents (i.e., change \\ to / in R when specifying the path) Alternatively, you can set the directory in RStudio under Session -&gt; Set Working Directory. Here “To Source File Location” will set the directory to wherever the currently open R file is stored. Error: unexpected ‘SYMBOL’ in “CALL” Usually the unexpectes SYMBOL message is due to parentheses not being matched but it could also be any other symbol that R cannot interpret in the given context. Please check the line in which the error occurred for typos (especially too many/ too few symbols). Some common examples are: print(&quot;hello&quot;)) ## Error: &lt;text&gt;:1:15: unexpected &#39;)&#39; ## 1: print(&quot;hello&quot;)) ## ^ There is one too many closing parenthesis here. 1 +/ 2 # Too many symbols ## Error: &lt;text&gt;:1:4: unexpected &#39;/&#39; ## 1: 1 +/ ## ^ The “/” symbol may not follow the “+” symbol without any additional objects. 1 2 # Missing symbol ## Error: &lt;text&gt;:1:3: unexpected numeric constant ## 1: 1 2 ## ^ The sequence with a space between numbers is not recognized by R. x &lt;- 3 2x # Missing symbol ## Error: &lt;text&gt;:2:2: unexpected symbol ## 1: x &lt;- 3 ## 2: 2x ## ^ If you wanted to multiply x by 2 you would need to a the “*” symbol, as the following example shows. 2*x ## [1] 6 Error in CALL : object of type ‘closure’ is not subsettable This error occurs usually when one tries to subset a function (either with fun$element or fun[1] where fun is a function). Check your variable (especially data.frames) names for typos! This happens when you run the following code, for example, since mean is a function: # Does not work: means &lt;- data.frame(value = c(1,2,3)) mean$value ## Error in mean$value: object of type &#39;closure&#39; is not subsettable instead of (i.e., correcting for the missing “s” to identify the data frame by its name) # Works: means &lt;- data.frame(value = c(1,2,3)) means$value ## [1] 1 2 3 or we give variables the same name as a function (which should generally be avoided) but have not created that variable yet: summary(aov)[[1]] ## Error in object[[i]]: object of type &#39;closure&#39; is not subsettable Make sure all the relevant code is run first: dat &lt;- data.frame(value = c(1,2,3), group = c(&quot;a&quot;, &quot;b&quot;, &quot;b&quot;)) aov &lt;- aov(value~group, dat) summary(aov)[[1]] Error in CALL_WITH_$: $ operator is invalid for atomic vectors This error occurs when we try to subset a vector using the $ operator. Usually this occurs when we think an object is a data.frame with the variable in it but it is really a vector. x &lt;- c(1,2,3) x$a ## Error in x$a: $ operator is invalid for atomic vectors xdf &lt;- data.frame(a = x) xdf$a ## [1] 1 2 3 Note that this error can also occur as part of function calls when some variables are NA: library(psych) xdf$group &lt;- NA mean(xdf$a, xdf$group) ## Error in mean.default(xdf$a, xdf$group): &#39;trim&#39; must be numeric of length one When you get this error make sure your data is in the format you expect it to be (e.g., using the str function). And that missing values (i.e., NA) are handles appropriately. str(xdf) ## &#39;data.frame&#39;: 3 obs. of 2 variables: ## $ a : int 1 2 3 ## $ group: logi NA NA NA Error in CALL: object ‘NAME’ not found This error occurs whenever you pass a variable name that is not assigned to some function. The error is for example: Error in plot(x): object 'x' not found If you just enter a variable name that is not assigned it looks like this: Error: object 'NAME' not found Check your code for typos and make sure you have run all the relevant lines of code before the one in which the error occurs! Error in CALL: could not find function “FUNCTION” This error occurs if a function name is either misspelled or some packages have not been loaded into the current session (library(PACKAGENAME)). You have to re-load all packages every time you restart R. For example if you did not load the ggplot2 library but try to use the ggplot function: ## Error in detach(package:ggplot2): invalid &#39;name&#39; argument ggplot(data) ## Error in ggplot(data): could not find function &quot;ggplot&quot; If you are not sure which package provides a given function, try running: ??FUNCTION with two ?? this will search the help files of all installed packages for FUNCTION (e.g., ??ggplot). Error in CALL: incorrect number of dimension This error occurs when subsetting an object with the wrong number of dimension. For example if we have a vector x and try to get an element in the second dimension: x &lt;- c(1,2,3) x[1,1] ## Error in x[1, 1]: incorrect number of dimensions x[1] ## [1] 1 Note that data.frames have two dimensions (each variable is a column, each observation a row) even if there is only one variable: x &lt;- c(1,2,3) data.frame(x)[1, 1] ## [1] 1 For multidimensional objects you can always check the size of each dimension using the dim function: dim(data.frame(x)) ## [1] 3 1 For vectors dim will return NULL. 12.2 Installation of R packages What are the different ways to install R packages? There are multiple ways to install a package: Enter install.packages(\"PACKAGENAME\") in the console (attention: the name of the package needs to be in quotation marks) Go to the “Packages” pane in RStudio (lower right by default), then click on “Install”, then enter the package name Using the two methods above would load the package from the official R server, the so-called Comprehensive R Archive Network (CRAN). There may be instances when you would like to install packages from other sources. This could be the case, for example, when a package is not available for the version of R that you are using. Sometimes an new version of R is released and some packages may require updating to be compatible with this new version. The updating process on the official server may take some time and usually the most recent version of a package are available from other sources, such as GitHub. Using the devtools package, you can install packages from GitHub directly: devtools::install_github(repo = \"USERNAME/PACKAGENAME\"). Of course, this requires the devtools package to be installed already; i.e., you need to run install.packages(\"devtools\") first, if the devtools package is not installed yet. I cannot install packages due to “Error in contrib.url(repos,”source”)” or “Warning message: package ‘PACKAGENAME’ is not available for this version of R” Try adding the repo argument to the install.packages command as in the following example: install.packages(&quot;PACKAGENAME&quot;, repo=&quot;https://cloud.r-project.org/&quot;) Try to install the package from GitHub directly using the devtools package. For example to get the devtools package and install the ggstatsplot package from the GitHub-user IndrajeetPatil run the following code: install.packages(&quot;devtools&quot;) devtools::install_github( repo = &quot;IndrajeetPatil/ggstatsplot&quot;, # package path on GitHub (&quot;username/packagename&quot;) dependencies = TRUE, # installs packages which ggstatsplot depends on upgrade_dependencies = TRUE # updates any out of date dependencies ) In case you are using knitting process of a R Markdown file, you should not install any packages from within the markdown file. Instead, install the packages first using a plain R script file and then load the package within the markdown file before clicking knit to compile the document. Some libraries with graphical output (e.g., summarytools, magick) fail to install/load properly on MacOS Some libraries require the XQuartz window system for MacOS. After installing XQuartz please restart your computer. If you get an error message including a message about the magick package try install.packages(\"magick\") and if that fails devtools::install_github(\"ropensci/magick\", dependencies = TRUE) might help. I cannot install some packages on MacOS When asked whether R should try to install a package from sources a package which needs compilation, enter “no” or “n”. If this doesn’t solve the issue, try installing the free XCode package from the Apple Appstore, open a Terminal and enter “xcode-select –install”. After that try to install the package again (answering “yes” to the question above). 12.3 Issues with statistics and data Why does a multi-item scale lead to increased reliability? “When combining several items into a scale, random error that is inherent in every item is averaged out, which leads to increased levels of reliability”. There could, for example, be individual-level differences in the interpretation of certain items. When you have multiple items measuring the same underlying construct, these differences will average out. See Diamantopoulos, Sarstedt, Fuchs, et al. (2012) Why can demeaning/standardization lead to missing values? Calculating statistics (e.g., mean, sd) using variables that include NAs will return an NA by default. There are a couple of options to address this problem. The missing values can be deleted from a variable using the na.omit function. Alternatively many functions offer the na.rm argument which will calculate the statistic disregarding NAs. For example, the following will result in NA: x &lt;- c(1,2,3, 5, NA) mean(x) ## [1] NA While the following disregards the NA values when computing the mean of the numeric vector: x &lt;- c(1,2,3, 5, NA) mean(x, na.rm = TRUE) ## [1] 2.75 Note that the scale function automatically omits missing values when calculating the mean and standard deviation to standardize a variable. See missings.R for a sample script. The confidence interval (CI) of the mean seems very small compared to the dispersion of my sample. Can this be correct? The confidence interval of the mean depends on both the variance of the variable and the the sample size: \\[ \\sigma_{\\bar x} = \\frac{\\sigma}{\\sqrt{n}} \\] Therefore even if the standard deviation of the data (\\(\\sigma\\)) is large, we can get a narrow CI if we have a relatively large sample size. See confidenceinterval.R for a simulation study. 12.4 Errors related to specific methods Logistic regression When using logistic regression: Error in eval(family$initialize) : y values must be 0 &lt;= y &lt;= 1 When using logistic regression make sure all the values in the dependent variable (left hand side) are between \\(0\\) and \\(1\\) dat &lt;- data.frame(y = c(2,0,1), x = c(1,2,3)) glm(y ~ x , data = dat, family=binomial()) ## Error in eval(family$initialize): y values must be 0 &lt;= y &lt;= 1 When using logistic regression: Error in weights * y : non-numeric argument to binary operator This error occurs if a variable that is supposed to be numeric is a character dat$char_y &lt;- c(&quot;1&quot;, &quot;0&quot;, &quot;1&quot;) glm(char_y ~ x , data = dat, family=binomial()) ## Error in weights * y: non-numeric argument to binary operator 12.5 General settings and options Numbers are formatted weirdly By default R uses scientific notation for very large and very small numbers. We can control this behavior using options(scipen=...) where larger positive numbers will result in a wider range of values being printed in fixed notation (i.e., all digits) and negative numbers will result in more numbers being printed in scientific notation. From ?options we get: scipen: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation. Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than scipen digits wider. Scientific notation follows the following rule: \\(VeD \\Rightarrow V \\times 10^D\\). Therefore, options(scipen=-10) would result in: options(scipen=-10) 29.3749592384 ## [1] 2.937496e+01 And options(scipen=10) would result in: options(scipen=10) 29.3749592384 ## [1] 29.37496 See also scientificnotation.R for some examples. Note that options(digits=...) also allows you to control the number of digits to be displayed for numeric values: options(digits = 12) 29.3749592384 ## [1] 29.3749592384 12.6 Data visualization/output issues How can the geom colors in a ggplot be changed? In general, there are two types of colors that can be changed. The color argument changes the line or border color (e.g., in a bar chart). The fill argument changes the filling color of a plot that has a rectangle-like area (e.g., barplot, histogram, boxplot) that can be filled but does nothing for e.g., line plots. Colors can be specified either as an argument to the ggplot or geom* call directly as in ggplot(data, aes(x = Genre, y = Freq), color = c(\"red\", \"green\",...)) or as part of the aesthetics (aes). In the latter case, colors will automatically be assigned and a legend added if a categorical variable is provided as in ggplot(table_plot_rel, aes(x = Genre,y = Freq, fill = Genre)) + geom_col(). This is not to be confused with setting background/text colors as part of a theme. Themes can either be provided by a package (e.g., library(ggthemes)) or created by hand. See ggplotcolors.R for a sample script. Why are some histograms displayed differently? When plotting a histogram, there is an important parameter called binwidth which controls the range over which the number of observations are counted in each bin. If it is set to a too low value, each bin will only have very few observations and we get a large number of bins. If it is set to a value that is too high, we lump many observations together and get very few bins (in the extreme case only one). You may have to play around with different values to find the appropriate binwidth for your plot. See histogrambins.R for some examples. Some labels in plots are cut off. How can I extend the plot margins? If axis labels (e.g. names) are too long, they are cut off by the default margins of R plots. You can set margins manually in ggplot2 as part of the theme settings in the following order: top, right, bottom, left. For example, to add 2cm margin to each side, we can use: my_ggplot + theme(plot.margin = margin(2, 2, 2, 2, &quot;cm&quot;)) In addition you can try to change the height and width when saving a ggplot (this usually works better): ggsave(&quot;myggplot.png&quot;, width = 10, height = 10, units = &quot;cm&quot;) Within an Rmd document you can set the with and height as part of the code chunk options using e.g., fig.width=10, fig.height=10 (see also here) 12.7 Issues with functions and function arguments Generally, if you face an issue relating to a particular function, it is a good idea to check the details of a function, by typing ?FUNCTION (e.g., ?mean) and read the help file. Problems with factor and as.factor 1. Common mistake: some groups are not named in levels and labels \\(\\Rightarrow\\) results in NA for omitted group like in the following example: x &lt;- c(0,0,0,1,0,2,0,1) x &lt;- factor(x, levels = c(0,1), labels = c(&quot;no&quot;,&quot;yes&quot;)) x ## [1] no no no yes no &lt;NA&gt; no yes ## Levels: no yes In this example, you need to also consider “2” as a factor level to avoid setting the value of this observation to NA: x &lt;- c(0,0,0,1,0,2,0,1) x &lt;- factor(x, levels = c(0,1,2), labels = c(&quot;no&quot;,&quot;yes&quot;,&quot;maybe&quot;)) x ## [1] no no no yes no maybe no yes ## Levels: no yes maybe 2. Common mistake: the code creating the factor is run twice overwriting the original variable \\(\\Rightarrow\\) results in NA for all values like in the following example: x &lt;- c(0,0,0,1,0,2,0,1) x &lt;- factor(x, levels = c(0,1,2), labels = c(&quot;no&quot;,&quot;yes&quot;,&quot;maybe&quot;)) x &lt;- factor(x, levels = c(0,1,2), labels = c(&quot;no&quot;,&quot;yes&quot;,&quot;maybe&quot;)) x ## [1] &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## Levels: no yes maybe As can be seen, by running the line of code specifying the factor variable twice, we first specify the factor variable correctly and then incorrectly overwrite this variable again. The second time we run the code, the values are set to NA because R looks from levels of 0,1, and 2 again, but these had already been replaced by the labels when the code was run for the first time. Hence, since there are no elements with the values of 0,1,2 anymore, these values are replaced by missing values. Note that this is usually a result of “jumping” back and forth in the code. Run your script from the top and make sure you do not create the factor twice. The second time the original levels do not exist anymore and thus all resulting values are missing without warning or error. Possible remedy: name the factor variable you create differently from the source variable, e.g., x &lt;- c(0,0,0,1,0,2,0,1) y &lt;- factor(x, levels = c(0,1,2), labels = c(&quot;no&quot;,&quot;yes&quot;,&quot;maybe&quot;)) y ## [1] no no no yes no maybe no yes ## Levels: no yes maybe In this case, you can always go back and re-run the code creating the factor variable from its original source if you have overwritten it accidentally. Otherwise you would need to re-run the entire code to get the original formating of the variable back. 3. Common mistake: converting from factor to integer/numeric directly: Internally factors are stored in increasing integers starting at \\(1\\) each attached with a label. If we create a factor from an integer variable and then convert it back, this behavior might be surprising. Possible remedy: convert to character first since this will use the labels as values See factors.R for examples of each of the mistakes and remedies. How can I find an explanation of the output of a function? See the Value section of the help file for the function. You can get the help file by calling: ?FUNCTION e.g., ?lm or ?mean If the function is provided by a package you have to load the package first using the library(...) function. e.g., library(Hmisc) ?rcorr What does the MARGIN argument do? Some functions such as apply and prop.table take a MARGIN argument. This argument specifies over which dimension (e.g., rows = 1, columns = 2) a function should be applied. This is especially useful for multidimensional arrays such as matrices. m &lt;- matrix(1:9, nrow=3) m ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 e.g. we could get the max of each row with apply(m, 1, max) ## [1] 7 8 9 and the max of each column with apply(m, 2, max) ## [1] 3 6 9 See margins.R for more examples. 12.8 Issues with R Markdown I get an error when knitting to PDF but it works for HTML Try installing the tinytex library as follows before kniting your document: install.packages(&#39;tinytex&#39;) tinytex::install_tinytex() I am not sure where R-code, LaTeX math, and text go In an Rmd document, there are 3 different environments, 1. R-code is enclosed in three ticks followed by {r, chunk-options} where the chunk options can include configuration for printing code and output as well as figures e.g. print(&quot;Hello R!&quot;) ## [1] &quot;Hello R!&quot; 2. LaTeX math can either be enclosed in single dollar signs $x^2$ \\(\\Rightarrow x^2\\) for in-line math or in double dollar signs to put the math output on its own line $$ x^2 $$ \\[ x^2 \\] For aligned multi-line equations we can add \\begin{aligned} and \\end{aligend}. The equations will be aligend at the &amp; and a line is ended with \\\\. $$ \\begin{aligned} x &amp;= 1 \\\\ y &amp;= 2 \\\\ z = &amp;3 \\end{aligned} $$ \\[ \\begin{aligned} x &amp;= 1 \\\\ y &amp;= 2 \\\\ z = &amp;3 \\end{aligned} \\] 3. Regular text goes anywhere between those environments 12.9 New questions Couldn’t find an answer to your question? In this case, you may use the forum on Learn@wu to ask your question. We regularly update this section of the website and will include answers to new questions as they come up. "]]
